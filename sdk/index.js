var ge=Object.defineProperty;var Tn=Object.getOwnPropertyDescriptor;var bn=Object.getOwnPropertyNames;var fn=Object.prototype.hasOwnProperty;var hn=(n,s,p)=>s in n?ge(n,s,{enumerable:!0,configurable:!0,writable:!0,value:p}):n[s]=p;var An=n=>ge(n,"__esModule",{value:!0});var kn=(n,s)=>{for(var p in s)ge(n,p,{get:s[p],enumerable:!0})},gn=(n,s,p,R)=>{if(s&&typeof s=="object"||typeof s=="function")for(let I of bn(s))!fn.call(n,I)&&(p||I!=="default")&&ge(n,I,{get:()=>s[I],enumerable:!(R=Tn(s,I))||R.enumerable});return n};var wn=(n=>(s,p)=>n&&n.get(s)||(p=gn(An({}),s,1),n&&n.set(s,p),p))(typeof WeakMap!="undefined"?new WeakMap:0);var K=(n,s,p)=>(hn(n,typeof s!="symbol"?s+"":s,p),p);var Jn={};kn(Jn,{BaseToken:()=>E,Bridge:()=>_e,ChainId:()=>e,Networks:()=>X,Slippages:()=>P,SwapPools:()=>Y,Tokens:()=>t,UnsupportedSwapReason:()=>J,WrappedToken:()=>te,allNetworksSwapTokensMap:()=>Pe,detailedTokenSwapMap:()=>pn,l1BridgeZap:()=>Kn,l2BridgeZap:()=>$n,networkSwapTokensMap:()=>Fe,newL1BridgeZapInstance:()=>je,newL2BridgeZapInstance:()=>Qe,newSynapseBridgeInstance:()=>Je,supportedChainIds:()=>qe,supportedNetworks:()=>dn,swappableTokens:()=>rn,swappableTokensAllNetworks:()=>on,synapseBridge:()=>zn});var we=require("ethers"),Ce=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{inputs:[],name:"BRIDGEMANAGER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"chainID",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"calculateSwapFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getAllTokenIDs",outputs:[{internalType:"string[]",name:"result",type:"string[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"uint256",name:"index",type:"uint256"}],name:"getRoleMember",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleMemberCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"tokenID",type:"string"},{internalType:"uint256",name:"chainID",type:"uint256"}],name:"getToken",outputs:[{components:[{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint8",name:"tokenDecimals",type:"uint8"},{internalType:"uint256",name:"maxSwap",type:"uint256"},{internalType:"uint256",name:"minSwap",type:"uint256"},{internalType:"uint256",name:"swapFee",type:"uint256"},{internalType:"uint256",name:"maxSwapFee",type:"uint256"},{internalType:"uint256",name:"minSwapFee",type:"uint256"},{internalType:"bool",name:"hasUnderlying",type:"bool"},{internalType:"bool",name:"isUnderlying",type:"bool"}],internalType:"struct BridgeConfig.Token",name:"token",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"chainID",type:"uint256"}],name:"getToken",outputs:[{components:[{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint8",name:"tokenDecimals",type:"uint8"},{internalType:"uint256",name:"maxSwap",type:"uint256"},{internalType:"uint256",name:"minSwap",type:"uint256"},{internalType:"uint256",name:"swapFee",type:"uint256"},{internalType:"uint256",name:"maxSwapFee",type:"uint256"},{internalType:"uint256",name:"minSwapFee",type:"uint256"},{internalType:"bool",name:"hasUnderlying",type:"bool"},{internalType:"bool",name:"isUnderlying",type:"bool"}],internalType:"struct BridgeConfig.Token",name:"token",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"chainID",type:"uint256"}],name:"getTokenID",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"tokenID",type:"string"}],name:"getUnderlyingToken",outputs:[{components:[{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint8",name:"tokenDecimals",type:"uint8"},{internalType:"uint256",name:"maxSwap",type:"uint256"},{internalType:"uint256",name:"minSwap",type:"uint256"},{internalType:"uint256",name:"swapFee",type:"uint256"},{internalType:"uint256",name:"maxSwapFee",type:"uint256"},{internalType:"uint256",name:"minSwapFee",type:"uint256"},{internalType:"bool",name:"hasUnderlying",type:"bool"},{internalType:"bool",name:"isUnderlying",type:"bool"}],internalType:"struct BridgeConfig.Token",name:"token",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"tokenID",type:"string"}],name:"hasUnderlyingToken",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"tokenID",type:"string"}],name:"isTokenIDExist",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string",name:"tokenID",type:"string"},{internalType:"uint256",name:"chainID",type:"uint256"},{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint8",name:"tokenDecimals",type:"uint8"},{internalType:"uint256",name:"maxSwap",type:"uint256"},{internalType:"uint256",name:"minSwap",type:"uint256"},{internalType:"uint256",name:"swapFee",type:"uint256"},{internalType:"uint256",name:"maxSwapFee",type:"uint256"},{internalType:"uint256",name:"minSwapFee",type:"uint256"},{internalType:"bool",name:"hasUnderlying",type:"bool"},{internalType:"bool",name:"isUnderlying",type:"bool"}],name:"setTokenConfig",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],ye=class{static createInterface(){return new we.utils.Interface(Ce)}static connect(s,p){return new we.Contract(s,Ce,p)}};K(ye,"abi",Ce);var Ee=require("ethers"),Se=[{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_spender",type:"address"},{name:"_value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint8"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"}],name:"balanceOf",outputs:[{name:"balance",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{payable:!0,stateMutability:"payable",type:"fallback"},{anonymous:!1,inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"spender",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Transfer",type:"event"}],le=class{static createInterface(){return new Ee.utils.Interface(Se)}static connect(s,p){return new Ee.Contract(s,Se,p)}};K(le,"abi",Se);var xe=require("ethers"),ve=[{inputs:[{internalType:"address payable",name:"_wethAddress",type:"address"},{internalType:"contract ISwap",name:"_baseSwap",type:"address"},{internalType:"contract ISynapseBridge",name:"_synapseBridge",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"WETH_ADDRESS",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"baseTokens",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"uint8",name:"tokenIndex",type:"uint8"}],name:"calculateRemoveLiquidityOneToken",outputs:[{internalType:"uint256",name:"availableTokenAmount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bool",name:"deposit",type:"bool"}],name:"calculateTokenAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"depositAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositETH",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"depositETHAndSwap",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256[]",name:"liquidityAmounts",type:"uint256[]"},{internalType:"uint256",name:"minToMint",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapAndDeposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256[]",name:"liquidityAmounts",type:"uint256[]"},{internalType:"uint256",name:"minToMint",type:"uint256"},{internalType:"uint256",name:"liqDeadline",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"swapDeadline",type:"uint256"}],name:"zapAndDepositAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"}],Q=class{static createInterface(){return new xe.utils.Interface(ve)}static connect(s,p){return new xe.Contract(s,ve,p)}};K(Q,"abi",ve);var Re=require("ethers"),Oe=[{inputs:[{internalType:"address payable",name:"_wethAddress",type:"address"},{internalType:"address",name:"_swapOne",type:"address"},{internalType:"address",name:"tokenOne",type:"address"},{internalType:"address",name:"_swapTwo",type:"address"},{internalType:"address",name:"tokenTwo",type:"address"},{internalType:"contract ISynapseBridge",name:"_synapseBridge",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"WETH_ADDRESS",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"}],name:"calculateSwap",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositETH",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"liqTokenIndex",type:"uint8"},{internalType:"uint256",name:"liqMinAmount",type:"uint256"},{internalType:"uint256",name:"liqDeadline",type:"uint256"}],name:"redeemAndRemove",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"redeemAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapAndRedeem",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"liqTokenIndex",type:"uint8"},{internalType:"uint256",name:"liqMinAmount",type:"uint256"},{internalType:"uint256",name:"liqDeadline",type:"uint256"}],name:"swapAndRedeemAndRemove",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"swapTokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"swapTokenIndexTo",type:"uint8"},{internalType:"uint256",name:"swapMinDy",type:"uint256"},{internalType:"uint256",name:"swapDeadline",type:"uint256"}],name:"swapAndRedeemAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHAndRedeem",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"swapTokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"swapTokenIndexTo",type:"uint8"},{internalType:"uint256",name:"swapMinDy",type:"uint256"},{internalType:"uint256",name:"swapDeadline",type:"uint256"}],name:"swapETHAndRedeemAndSwap",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"swapMap",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"swapTokensMap",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"}],ee=class{static createInterface(){return new Re.utils.Interface(Oe)}static connect(s,p){return new Re.Contract(s,Oe,p)}};K(ee,"abi",Oe);var Ie=require("ethers"),Ne=[{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"chainId",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenDeposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"chainId",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{indexed:!1,internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{indexed:!1,internalType:"uint256",name:"minDy",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"}],name:"TokenDepositAndSwap",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"contract IERC20Mintable",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!0,internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"TokenMint",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"contract IERC20Mintable",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!1,internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{indexed:!1,internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{indexed:!1,internalType:"uint256",name:"minDy",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"bool",name:"swapSuccess",type:"bool"},{indexed:!0,internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"TokenMintAndSwap",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"chainId",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenRedeem",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"chainId",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint8",name:"swapTokenIndex",type:"uint8"},{indexed:!1,internalType:"uint256",name:"swapMinAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"swapDeadline",type:"uint256"}],name:"TokenRedeemAndRemove",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"chainId",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{indexed:!1,internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{indexed:!1,internalType:"uint256",name:"minDy",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"}],name:"TokenRedeemAndSwap",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!0,internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"TokenWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!1,internalType:"uint8",name:"swapTokenIndex",type:"uint8"},{indexed:!1,internalType:"uint256",name:"swapMinAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"swapDeadline",type:"uint256"},{indexed:!1,internalType:"bool",name:"swapSuccess",type:"bool"},{indexed:!0,internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"TokenWithdrawAndRemove",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"GOVERNANCE_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"NODEGROUP_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH_ADDRESS",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32[]",name:"kappas",type:"bytes32[]"}],name:"addKappas",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"bridgeVersion",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"chainGasAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"depositAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"}],name:"getFeeBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"uint256",name:"index",type:"uint256"}],name:"getRoleMember",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleMemberCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"kappaExists",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address payable",name:"to",type:"address"},{internalType:"contract IERC20Mintable",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"},{internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"to",type:"address"},{internalType:"contract IERC20Mintable",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"},{internalType:"contract ISwap",name:"pool",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"mintAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract ERC20Burnable",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract ERC20Burnable",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"swapTokenIndex",type:"uint8"},{internalType:"uint256",name:"swapMinAmount",type:"uint256"},{internalType:"uint256",name:"swapDeadline",type:"uint256"}],name:"redeemAndRemove",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract ERC20Burnable",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"redeemAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"setChainGasAmount",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"_wethAddress",type:"address"}],name:"setWethAddress",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"startBlockNumber",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"},{internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"},{internalType:"contract ISwap",name:"pool",type:"address"},{internalType:"uint8",name:"swapTokenIndex",type:"uint8"},{internalType:"uint256",name:"swapMinAmount",type:"uint256"},{internalType:"uint256",name:"swapDeadline",type:"uint256"},{internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"withdrawAndRemove",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"address",name:"to",type:"address"}],name:"withdrawFees",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],ie=class{static createInterface(){return new Ie.utils.Interface(Ne)}static connect(s,p){return new Ie.Contract(s,Ne,p)}};K(ie,"abi",Ne);var Ze=require("ethers");var De=require("@ethersproject/bignumber"),e;(f=>(f.ETH=1,f.OPTIMISM=10,f.BSC=56,f.POLYGON=137,f.FANTOM=250,f.BOBA=288,f.MOONBEAM=1284,f.MOONRIVER=1285,f.ARBITRUM=42161,f.AVALANCHE=43114,f.AURORA=1313161554,f.HARMONY=16666e5,f.asBigNumber=w=>De.BigNumber.from(w),f.asNumber=w=>De.BigNumber.from(w).toNumber(),f.supportedChainIds=()=>[1,10,56,137,250,288,1284,1285,42161,43114,1313161554,16666e5]))(e||={});var qe=e.supportedChainIds;var xn={abi:[{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"chainId",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenDeposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"chainId",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{indexed:!1,internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{indexed:!1,internalType:"uint256",name:"minDy",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"}],name:"TokenDepositAndSwap",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"contract IERC20Mintable",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!0,internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"TokenMint",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"contract IERC20Mintable",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!1,internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{indexed:!1,internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{indexed:!1,internalType:"uint256",name:"minDy",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"bool",name:"swapSuccess",type:"bool"},{indexed:!0,internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"TokenMintAndSwap",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"chainId",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenRedeem",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"chainId",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint8",name:"swapTokenIndex",type:"uint8"},{indexed:!1,internalType:"uint256",name:"swapMinAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"swapDeadline",type:"uint256"}],name:"TokenRedeemAndRemove",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"chainId",type:"uint256"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{indexed:!1,internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{indexed:!1,internalType:"uint256",name:"minDy",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"}],name:"TokenRedeemAndSwap",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!0,internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"TokenWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fee",type:"uint256"},{indexed:!1,internalType:"uint8",name:"swapTokenIndex",type:"uint8"},{indexed:!1,internalType:"uint256",name:"swapMinAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"swapDeadline",type:"uint256"},{indexed:!1,internalType:"bool",name:"swapSuccess",type:"bool"},{indexed:!0,internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"TokenWithdrawAndRemove",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"GOVERNANCE_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"NODEGROUP_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH_ADDRESS",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32[]",name:"kappas",type:"bytes32[]"}],name:"addKappas",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"bridgeVersion",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"chainGasAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"depositAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"}],name:"getFeeBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"uint256",name:"index",type:"uint256"}],name:"getRoleMember",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleMemberCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"kappaExists",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address payable",name:"to",type:"address"},{internalType:"contract IERC20Mintable",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"},{internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"to",type:"address"},{internalType:"contract IERC20Mintable",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"},{internalType:"contract ISwap",name:"pool",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"mintAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract ERC20Burnable",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract ERC20Burnable",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"swapTokenIndex",type:"uint8"},{internalType:"uint256",name:"swapMinAmount",type:"uint256"},{internalType:"uint256",name:"swapDeadline",type:"uint256"}],name:"redeemAndRemove",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract ERC20Burnable",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"redeemAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"setChainGasAmount",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address payable",name:"_wethAddress",type:"address"}],name:"setWethAddress",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"startBlockNumber",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"},{internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fee",type:"uint256"},{internalType:"contract ISwap",name:"pool",type:"address"},{internalType:"uint8",name:"swapTokenIndex",type:"uint8"},{internalType:"uint256",name:"swapMinAmount",type:"uint256"},{internalType:"uint256",name:"swapDeadline",type:"uint256"},{internalType:"bytes32",name:"kappa",type:"bytes32"}],name:"withdrawAndRemove",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"address",name:"to",type:"address"}],name:"withdrawFees",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],devdoc:{kind:"dev",methods:{"deposit(address,uint256,address,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees*",chainId:"which chain to bridge assets onto",to:"address on other chain to bridge assets to",token:"ERC20 compatible token to deposit into the bridge"}},"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees",chainId:"which chain to bridge assets onto",deadline:"latest timestamp to accept this transaction*",minDy:"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.",to:"address on other chain to bridge assets to",token:"ERC20 compatible token to deposit into the bridge",tokenIndexFrom:"the token the user wants to swap from",tokenIndexTo:"the token the user wants to swap to"}},"getRoleAdmin(bytes32)":{details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{details:"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{details:"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{details:"Returns `true` if `account` has been granted `role`."},"mint(address,address,uint256,uint256,bytes32)":{details:"This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted",params:{amount:"Amount in native token decimals to transfer cross-chain post-fees",fee:"Amount in native token decimals to save to the contract as fees",kappa:"kappa*",to:"address on other chain to redeem underlying assets to",token:"ERC20 compatible token to deposit into the bridge"}},"mintAndSwap(address,address,uint256,uint256,address,uint8,uint8,uint256,uint256,bytes32)":{details:"This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted",params:{amount:"Amount in native token decimals to transfer cross-chain post-fees",deadline:"Epoch time of the deadline that the swap is allowed to be executed.",fee:"Amount in native token decimals to save to the contract as fees",kappa:"kappa*",minDy:"Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.",pool:"Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.",to:"address on other chain to redeem underlying assets to",token:"ERC20 compatible token to deposit into the bridge",tokenIndexFrom:"Index of the SynERC20 asset in the pool",tokenIndexTo:"Index of the desired final asset"}},"paused()":{details:"Returns true if the contract is paused, and false otherwise."},"redeem(address,uint256,address,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees*",chainId:"which underlying chain to bridge assets onto",to:"address on other chain to redeem underlying assets to",token:"ERC20 compatible token to deposit into the bridge"}},"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees",chainId:"which underlying chain to bridge assets onto",swapDeadline:"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token*",swapMinAmount:"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap",swapTokenIndex:"Specifies which of the underlying LP assets the nodes should attempt to redeem for",to:"address on other chain to redeem underlying assets to",token:"ERC20 compatible token to deposit into the bridge"}},"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees",chainId:"which underlying chain to bridge assets onto",deadline:"latest timestamp to accept this transaction*",minDy:"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.",to:"address on other chain to redeem underlying assets to",token:"ERC20 compatible token to deposit into the bridge",tokenIndexFrom:"the token the user wants to swap from",tokenIndexTo:"the token the user wants to swap to"}},"renounceRole(bytes32,address)":{details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"withdraw(address,address,uint256,uint256,bytes32)":{params:{amount:"Amount in native token decimals to withdraw",fee:"Amount in native token decimals to save to the contract as fees",kappa:"kappa*",to:"address on chain to send underlying assets to",token:"ERC20 compatible token to withdraw from the bridge"}},"withdrawAndRemove(address,address,uint256,uint256,address,uint8,uint256,uint256,bytes32)":{params:{amount:"Amount in native token decimals to withdraw",fee:"Amount in native token decimals to save to the contract as fees",kappa:"kappa*",pool:"Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.",swapDeadline:"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token",swapMinAmount:"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap",swapTokenIndex:"Specifies which of the underlying LP assets the nodes should attempt to redeem for",to:"address on chain to send underlying assets to",token:"ERC20 compatible token to withdraw from the bridge"}},"withdrawFees(address,address)":{params:{to:"Address to send the fees to",token:"ERC20 token in which fees acccumulated to transfer"}}},version:1},userdoc:{kind:"user",methods:{"deposit(address,uint256,address,uint256)":{notice:"Relays to nodes to transfers an ERC20 token cross-chain"},"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)":{notice:"Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user."},"mint(address,address,uint256,uint256,bytes32)":{notice:"Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDeposit event is emitted."},"mintAndSwap(address,address,uint256,uint256,address,uint8,uint8,uint256,uint256,bytes32)":{notice:"Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted."},"redeem(address,uint256,address,uint256)":{notice:"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain"},"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)":{notice:'Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g "swap" out of the LP token)'},"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)":{notice:'Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g "swap" out of the LP token)'},"withdraw(address,address,uint256,uint256,bytes32)":{notice:"Function to be called by the node group to withdraw the underlying assets from the contract"},"withdrawAndRemove(address,address,uint256,uint256,address,uint8,uint256,uint256,bytes32)":{notice:"Function to be called by the node group to withdraw the underlying assets from the contract"},"withdrawFees(address,address)":{notice:"withdraw specified ERC20 token fees to a given address"}},version:1}},Ye=xn;var Rn={abi:[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"previousAdminRole",type:"bytes32"},{indexed:!0,internalType:"bytes32",name:"newAdminRole",type:"bytes32"}],name:"RoleAdminChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleGranted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"role",type:"bytes32"},{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!0,internalType:"address",name:"sender",type:"address"}],name:"RoleRevoked",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[],name:"DEFAULT_ADMIN_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"MINTER_ROLE",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burnFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleAdmin",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"uint256",name:"index",type:"uint256"}],name:"getRoleMember",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"}],name:"getRoleMemberCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"grantRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"hasRole",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string",name:"name",type:"string"},{internalType:"string",name:"symbol",type:"string"},{internalType:"uint8",name:"decimals",type:"uint8"},{internalType:"address",name:"owner",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"renounceRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"role",type:"bytes32"},{internalType:"address",name:"account",type:"address"}],name:"revokeRole",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sender",type:"address"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],devdoc:{kind:"dev",methods:{"DOMAIN_SEPARATOR()":{details:"See {IERC20Permit-DOMAIN_SEPARATOR}."},"allowance(address,address)":{details:"See {IERC20-allowance}."},"approve(address,uint256)":{details:"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{details:"See {IERC20-balanceOf}."},"burn(uint256)":{details:"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{details:"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"decimals()":{details:"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{details:"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"getRoleAdmin(bytes32)":{details:"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{details:"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{details:"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{details:"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{details:"Returns `true` if `account` has been granted `role`."},"increaseAllowance(address,uint256)":{details:"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"initialize(string,string,uint8,address)":{params:{decimals:"Token name",name:"Token name",owner:"admin address to be initialized with",symbol:"Token symbol"}},"name()":{details:"Returns the name of the token."},"nonces(address)":{details:"See {IERC20Permit-nonces}."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{details:"See {IERC20Permit-permit}."},"renounceRole(bytes32,address)":{details:"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{details:"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"symbol()":{details:"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{details:"See {IERC20-totalSupply}."},"transfer(address,uint256)":{details:"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{details:"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}},version:1},userdoc:{kind:"user",methods:{"initialize(string,string,uint8,address)":{notice:"Initializes this ERC20 contract with the given parameters."}},version:1}},Xe=Rn;var In={abi:[{inputs:[{internalType:"address payable",name:"_wethAddress",type:"address"},{internalType:"address",name:"_swapOne",type:"address"},{internalType:"address",name:"tokenOne",type:"address"},{internalType:"address",name:"_swapTwo",type:"address"},{internalType:"address",name:"tokenTwo",type:"address"},{internalType:"contract ISynapseBridge",name:"_synapseBridge",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"WETH_ADDRESS",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"}],name:"calculateSwap",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositETH",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"liqTokenIndex",type:"uint8"},{internalType:"uint256",name:"liqMinAmount",type:"uint256"},{internalType:"uint256",name:"liqDeadline",type:"uint256"}],name:"redeemAndRemove",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"redeemAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapAndRedeem",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"liqTokenIndex",type:"uint8"},{internalType:"uint256",name:"liqMinAmount",type:"uint256"},{internalType:"uint256",name:"liqDeadline",type:"uint256"}],name:"swapAndRedeemAndRemove",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"swapTokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"swapTokenIndexTo",type:"uint8"},{internalType:"uint256",name:"swapMinDy",type:"uint256"},{internalType:"uint256",name:"swapDeadline",type:"uint256"}],name:"swapAndRedeemAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHAndRedeem",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"dx",type:"uint256"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"swapTokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"swapTokenIndexTo",type:"uint8"},{internalType:"uint256",name:"swapMinDy",type:"uint256"},{internalType:"uint256",name:"swapDeadline",type:"uint256"}],name:"swapETHAndRedeemAndSwap",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"swapMap",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"swapTokensMap",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"}],devdoc:{kind:"dev",methods:{"calculateSwap(address,uint8,uint8,uint256)":{params:{dx:"the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",tokenIndexFrom:"the token the user wants to sell",tokenIndexTo:"the token the user wants to buy"},returns:{_0:"amount of tokens the user will receive"}},"deposit(address,uint256,address,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees*",chainId:"which underlying chain to bridge assets onto",to:"address on other chain to redeem underlying assets to",token:"ERC20 compatible token to deposit into the bridge"}},"depositETH(address,uint256,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees*",chainId:"which chain to bridge assets onto",to:"address on other chain to bridge assets to"}},"redeem(address,uint256,address,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees*",chainId:"which underlying chain to bridge assets onto",to:"address on other chain to redeem underlying assets to",token:"ERC20 compatible token to deposit into the bridge"}},"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)":{params:{amount:"Amount of (typically) LP token to pass to the nodes to attempt to removeLiquidity() with to redeem for the underlying assets of the LP token",chainId:"which underlying chain to bridge assets onto",liqDeadline:"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token*",liqMinAmount:"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap",liqTokenIndex:"Specifies which of the underlying LP assets the nodes should attempt to redeem for",to:"address on other chain to redeem underlying assets to",token:"ERC20 compatible token to deposit into the bridge"}},"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees",chainId:"which underlying chain to bridge assets onto",deadline:"latest timestamp to accept this transaction*",minDy:"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.",to:"address on other chain to redeem underlying assets to",token:"ERC20 compatible token to deposit into the bridge",tokenIndexFrom:"the token the user wants to swap from",tokenIndexTo:"the token the user wants to swap to"}}},version:1},userdoc:{kind:"user",methods:{"calculateSwap(address,uint8,uint8,uint256)":{notice:"Calculate amount of tokens you receive on swap"},"deposit(address,uint256,address,uint256)":{notice:"wraps SynapseBridge redeem()"},"depositETH(address,uint256,uint256)":{notice:"Wraps SynapseBridge deposit() function to make it compatible w/ ETH -> WETH conversions"},"redeem(address,uint256,address,uint256)":{notice:"wraps SynapseBridge redeem()"},"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)":{notice:'Wraps redeemAndRemove on SynapseBridge Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g "swap" out of the LP token)'},"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)":{notice:'Wraps redeemAndSwap on SynapseBridge.sol Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g "swap" out of the LP token)'}},version:1}},ze=In;var Bn={abi:[{inputs:[{internalType:"address payable",name:"_wethAddress",type:"address"},{internalType:"contract ISwap",name:"_baseSwap",type:"address"},{internalType:"contract ISynapseBridge",name:"_synapseBridge",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"WETH_ADDRESS",outputs:[{internalType:"address payable",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"baseTokens",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"uint8",name:"tokenIndex",type:"uint8"}],name:"calculateRemoveLiquidityOneToken",outputs:[{internalType:"uint256",name:"availableTokenAmount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bool",name:"deposit",type:"bool"}],name:"calculateTokenAmount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"depositAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"depositETH",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"depositETHAndSwap",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"redeem",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256[]",name:"liquidityAmounts",type:"uint256[]"},{internalType:"uint256",name:"minToMint",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapAndDeposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"chainId",type:"uint256"},{internalType:"contract IERC20",name:"token",type:"address"},{internalType:"uint256[]",name:"liquidityAmounts",type:"uint256[]"},{internalType:"uint256",name:"minToMint",type:"uint256"},{internalType:"uint256",name:"liqDeadline",type:"uint256"},{internalType:"uint8",name:"tokenIndexFrom",type:"uint8"},{internalType:"uint8",name:"tokenIndexTo",type:"uint8"},{internalType:"uint256",name:"minDy",type:"uint256"},{internalType:"uint256",name:"swapDeadline",type:"uint256"}],name:"zapAndDepositAndSwap",outputs:[],stateMutability:"nonpayable",type:"function"}],devdoc:{details:"This contract should be deployed with a base Swap.sol address and a SynapseBridge.sol address, otherwise, it will not function.",kind:"dev",methods:{"calculateRemoveLiquidityOneToken(uint256,uint8)":{params:{tokenAmount:"the amount of LP token to burn",tokenIndex:"index of which token will be withdrawn"},returns:{availableTokenAmount:"calculated amount of underlying token available to withdraw"}},"calculateTokenAmount(uint256[],bool)":{details:"This shouldn't be used outside frontends for user estimates.",params:{amounts:"an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision.",deposit:"whether this is a deposit or a withdrawal"},returns:{_0:"token amount the user will receive"}},"deposit(address,uint256,address,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees*",chainId:"which chain to bridge assets onto",to:"address on other chain to bridge assets to",token:"ERC20 compatible token to deposit into the bridge"}},"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees",chainId:"which chain to bridge assets onto",deadline:"latest timestamp to accept this transaction*",minDy:"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.",to:"address on other chain to bridge assets to",token:"ERC20 compatible token to deposit into the bridge",tokenIndexFrom:"the token the user wants to swap from",tokenIndexTo:"the token the user wants to swap to"}},"depositETH(address,uint256,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees*",chainId:"which chain to bridge assets onto",to:"address on other chain to bridge assets to"}},"depositETHAndSwap(address,uint256,uint256,uint8,uint8,uint256,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees",chainId:"which chain to bridge assets onto",deadline:"latest timestamp to accept this transaction*",minDy:"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.",to:"address on other chain to bridge assets to",tokenIndexFrom:"the token the user wants to swap from",tokenIndexTo:"the token the user wants to swap to"}},"redeem(address,uint256,address,uint256)":{params:{amount:"Amount in native token decimals to transfer cross-chain pre-fees*",chainId:"which chain to bridge assets onto",to:"address on other chain to bridge assets to",token:"ERC20 compatible token to redeem into the bridge"}},"zapAndDeposit(address,uint256,address,uint256[],uint256,uint256)":{params:{chainId:"which chain to bridge assets onto",deadline:"latest timestamp to accept this transaction*",liquidityAmounts:"the amounts of each token to add, in their native precision",minToMint:"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation",to:"address on other chain to bridge assets to",token:"ERC20 compatible token to deposit into the bridge"}},"zapAndDepositAndSwap(address,uint256,address,uint256[],uint256,uint256,uint8,uint8,uint256,uint256)":{params:{chainId:"which chain to bridge assets onto",liqDeadline:"latest timestamp to accept this transaction",liquidityAmounts:"the amounts of each token to add, in their native precision",minDy:"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.",minToMint:"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation",swapDeadline:"latest timestamp to accept this transaction*",to:"address on other chain to bridge assets to",token:"ERC20 compatible token to deposit into the bridge",tokenIndexFrom:"the token the user wants to swap from",tokenIndexTo:"the token the user wants to swap to"}}},title:"L1BridgeZap",version:1},userdoc:{kind:"user",methods:{"calculateRemoveLiquidityOneToken(uint256,uint8)":{notice:"Calculate the amount of underlying token available to withdraw when withdrawing via only single token"},"calculateTokenAmount(uint256[],bool)":{notice:'A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various "min" parameters on calls to fight front-running'},constructor:"Constructs the contract, approves each token inside of baseSwap to be used by baseSwap (needed for addLiquidity())","deposit(address,uint256,address,uint256)":{notice:"Wraps SynapseBridge deposit() function"},"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)":{notice:"Wraps SynapseBridge depositAndSwap() function"},"depositETH(address,uint256,uint256)":{notice:"Wraps SynapseBridge deposit() function to make it compatible w/ ETH -> WETH conversions"},"depositETHAndSwap(address,uint256,uint256,uint8,uint8,uint256,uint256)":{notice:"Wraps SynapseBridge depositAndSwap() function to make it compatible w/ ETH -> WETH conversions"},"redeem(address,uint256,address,uint256)":{notice:"Wraps SynapseBridge redeem() function"},"zapAndDeposit(address,uint256,address,uint256[],uint256,uint256)":{notice:"Combines adding liquidity to the given Swap, and calls deposit() on the bridge using that LP token"},"zapAndDepositAndSwap(address,uint256,address,uint256[],uint256,uint256,uint8,uint8,uint256,uint256)":{notice:"Combines adding liquidity to the given Swap, and calls depositAndSwap() on the bridge using that LP token"}},notice:"This contract is responsible for handling user Zaps into the SynapseBridge contract, through the Synapse Swap contracts. It does so It does so by combining the action of addLiquidity() to the base swap pool, and then calling either deposit() or depositAndSwap() on the bridge. This is done in hopes of automating portions of the bridge user experience to users, while keeping the SynapseBridge contract logic small.",version:1}},Ke=Bn;var ce;(I=>(I.SynapseBridge=Ye.abi,I.L1BridgeZap=Ke.abi,I.L2BridgeZap=ze.abi,I.SynapseERC20=Xe.abi))(ce||={});var L;(y=>{class n{bridge;bridge_zap;constructor(f){let{bridge:w,bridge_zap:m,isEthMainnet:k=!1}=f;this.bridge={address:w,abi:ce.SynapseBridge},this.bridge_zap={address:m,abi:k?ce.L1BridgeZap:ce.L2BridgeZap}}}y.SynapseContract=n,y.Ethereum=new n({bridge:"0x2796317b0fF8538F253012862c06787Adfb8cEb6",bridge_zap:"0x6571d6be3d8460CF5F7d6711Cd9961860029D85F",isEthMainnet:!0}),y.Optimism=new n({bridge:"0xAf41a65F786339e7911F4acDAD6BD49426F2Dc6b",bridge_zap:"0x9CD619c50562a38edBdC3451ade7B58CaA71Ab32"}),y.BSC=new n({bridge:"0xd123f70AE324d34A9E76b67a27bf77593bA8749f",bridge_zap:"0x749F37Df06A99D6A8E065dd065f8cF947ca23697"}),y.Polygon=new n({bridge:"0x8F5BBB2BB8c2Ee94639E55d5F41de9b4839C1280",bridge_zap:"0x1c6aE197fF4BF7BA96c66C5FD64Cb22450aF9cC8"}),y.Fantom=new n({bridge:"0xAf41a65F786339e7911F4acDAD6BD49426F2Dc6b",bridge_zap:"0x64B4097bCCD27D49BC2A081984C39C3EeC427a2d"}),y.Boba=new n({bridge:"0x432036208d2717394d2614d6697c46DF3Ed69540",bridge_zap:"0x64B4097bCCD27D49BC2A081984C39C3EeC427a2d"}),y.Moonbeam=new n({bridge:"0x84A420459cd31C3c34583F67E0f0fB191067D32f",bridge_zap:"0x73783F028c60D463bc604cc53852C37C31dEC5e9"}),y.Moonriver=new n({bridge:"0xaeD5b25BE1c3163c907a471082640450F928DDFE",bridge_zap:"0xfA28DdB74b08B2b6430f5F61A1Dd5104268CC29e"}),y.Arbitrum=new n({bridge:"0x6F4e8eBa4D337f874Ab57478AcC2Cb5BACdc19c9",bridge_zap:"0x26532682E1830cDACcCbb7e385Cff6de14dD08D8"}),y.Avalanche=new n({bridge:"0xC05e61d0E7a63D27546389B7aD62FdFf5A91aACE",bridge_zap:"0xE85429C97589AD793Ca11A8BC3477C03d27ED140"}),y.Aurora=new n({bridge:"0xaeD5b25BE1c3163c907a471082640450F928DDFE",bridge_zap:"0x2D8Ee8d6951cB4Eecfe4a79eb9C2F973C02596Ed"}),y.Harmony=new n({bridge:"0xAf41a65F786339e7911F4acDAD6BD49426F2Dc6b",bridge_zap:"0xB729B5bAD4B42f3bDd4A3518a1Cc00178cb5920a"})})(L||={});var U=n=>Promise.reject(n instanceof Error?n:new Error(n)),Be=(n,s)=>n.then(p=>s.sendTransaction(p)).catch(U);function se(n,s){let{address:p}=Cn(n)[s];return p}var Mn={[e.ETH]:L.Ethereum,[e.OPTIMISM]:L.Optimism,[e.BSC]:L.BSC,[e.POLYGON]:L.Polygon,[e.FANTOM]:L.Fantom,[e.BOBA]:L.Boba,[e.MOONBEAM]:L.Moonbeam,[e.MOONRIVER]:L.Moonriver,[e.ARBITRUM]:L.Arbitrum,[e.AVALANCHE]:L.Avalanche,[e.AURORA]:L.Aurora,[e.HARMONY]:L.Harmony},Cn=n=>Mn[n]??null;var $e=require("@ethersproject/providers");var Sn="ETH_RPC_URI",vn="OPTIMISM_RPC_URI",On="BSC_RPC_URI",Nn="POLYGON_RPC_URI",Dn="FANTOM_RPC_URI",Fn="BOBA_RPC_URI",Pn="MOONBEAM_RPC_URI",Hn="MOONRIVER_RPC_URI",_n="ARBITRUM_RPC_URI",Ln="AVALANCHE_RPC_URI",Un="AURORA_RPC_URI",Vn="HARMONY_RPC_URI",Gn={[e.ETH]:Sn,[e.OPTIMISM]:vn,[e.BSC]:On,[e.POLYGON]:Nn,[e.FANTOM]:Dn,[e.BOBA]:Fn,[e.MOONBEAM]:Pn,[e.MOONRIVER]:Hn,[e.ARBITRUM]:_n,[e.AVALANCHE]:Ln,[e.AURORA]:Un,[e.HARMONY]:Vn},Wn={[e.ETH]:"https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161",[e.OPTIMISM]:"https://mainnet.optimism.io",[e.BSC]:"https://bsc-dataseed1.binance.org/",[e.POLYGON]:"https://polygon-rpc.com/",[e.FANTOM]:"https://rpc.ftm.tools/",[e.BOBA]:"https://replica-oolong.boba.network/",[e.MOONBEAM]:"https://rpc.api.moonbeam.network",[e.MOONRIVER]:"https://rpc.moonriver.moonbeam.network",[e.ARBITRUM]:"https://arb1.arbitrum.io/rpc",[e.AVALANCHE]:"https://api.avax.network/ext/bc/C/rpc",[e.AURORA]:"https://mainnet.aurora.dev",[e.HARMONY]:"https://api.harmony.one/"},Zn=(()=>{let n={};return e.supportedChainIds().map(s=>{n[s]=new $e.JsonRpcProvider(qn(s))}),n})();function ne(n){return Zn[n]??null}function qn(n){return Yn(n)??Wn[n]}function Yn(n){let s=Gn[n];if(s in process.env)return process.env[s]}var Je=n=>ie.connect(n.address,n.signerOrProvider),je=n=>Q.connect(n.address,n.signerOrProvider),Qe=n=>ee.connect(n.address,n.signerOrProvider),$;(a=>{a.bridgeConfigAddress="0x7fd806049608b7d04076b8187dd773343e0589e6";function s(r){let o=se(r.chainId,"bridge");return ie.connect(o,r.signerOrProvider)}a.synapseBridge=s;function p(r){let o=se(r.chainId,"bridge_zap");return Q.connect(o,r.signerOrProvider)}a.l1BridgeZap=p;function R(r){let o=se(r.chainId,"bridge_zap");return ee.connect(o,r.signerOrProvider)}a.l2BridgeZap=R;function I(r){let o=se(r.chainId,"bridge_zap");return r.chainId===e.ETH?Q.connect(o,r.signerOrProvider):ee.connect(o,r.signerOrProvider)}a.zapBridge=I;function i(){let r=ne(e.ETH);return ye.connect(a.bridgeConfigAddress,r)}a.bridgeConfig=i})($||={});var en=require("@ethersproject/bignumber"),nn=require("@ethersproject/units"),E=class{name;symbol;addresses={};swapType;isETH;hash;wrapperAddresses={};_decimals={};constructor(s){if(this.name=s.name,this.symbol=s.symbol,this.addresses=s.addresses,this.swapType=s.swapType,this.wrapperAddresses=s.wrapperAddresses??{},typeof s.decimals=="number")for(let[p]of Object.entries(this.addresses))this._decimals[p]=s.decimals;else this._decimals=s.decimals;this.isETH=s.isETH??!1,this.hash=Symbol(this.symbol)}address(s){return this.addresses[s]||null}wrapperAddress(s){return this.wrapperAddresses[s]||null}decimals(s){return this._decimals[s]||null}isEqual(s){return this.hash===s.hash}valueToWei(s,p){let R=en.BigNumber.from(s).toString();return(0,nn.parseUnits)(R,this.decimals(p))}get isWrappedToken(){return!1}},te=class extends E{underlyingToken;constructor(s){let{underlyingToken:p,...R}=s;super(R);this.underlyingToken=p}get isWrappedToken(){return!0}};var t;(c=>{let n=new E({name:"",symbol:"",decimals:18,addresses:{},swapType:"USD"});c.DAI=new E({name:"Dai",symbol:"DAI",decimals:18,addresses:{[e.ETH]:"0x6b175474e89094c44da98b954eedeac495271d0f",[e.BSC]:"0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3",[e.POLYGON]:"0x8f3cf7ad23cd3cadbd9735aff958023239c6a063",[e.BOBA]:"0xf74195Bb8a5cf652411867c5C2C5b8C2a402be35",[e.ARBITRUM]:"0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",[e.AVALANCHE]:"0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",[e.AURORA]:"0xe3520349F477A5F6EB06107066048508498A291b",[e.HARMONY]:"0xef977d2f931c1978db5f6747666fa1eacb0d0339"},swapType:"USD"}),c.BUSD=new E({name:"Binance USD",symbol:"BUSD",decimals:18,addresses:{[e.BSC]:"0xe9e7cea3dedca5984780bafc599bd69add087d56"},swapType:"USD"}),c.USDC=new E({name:"USD Circle",symbol:"USDC",decimals:{[e.ETH]:6,[e.BSC]:18,[e.POLYGON]:6,[e.FANTOM]:6,[e.BOBA]:6,[e.AVALANCHE]:6,[e.ARBITRUM]:6,[e.AURORA]:6,[e.HARMONY]:6},addresses:{[e.ETH]:"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",[e.BSC]:"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d",[e.POLYGON]:"0x2791bca1f2de4661ed88a30c99a7a9449aa84174",[e.FANTOM]:"0x04068da6c83afcfa0e13ba15a6696662335d5b75",[e.BOBA]:"0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc",[e.ARBITRUM]:"0xff970a61a04b1ca14834a43f5de4533ebddb5cc8",[e.AVALANCHE]:"0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",[e.AURORA]:"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802",[e.HARMONY]:"0x985458e523db3d53125813ed68c274899e9dfab4"},swapType:"USD"}),c.USDT=new E({name:"USD Tether",symbol:"USDT",decimals:{[e.ETH]:6,[e.BSC]:18,[e.POLYGON]:6,[e.FANTOM]:6,[e.BOBA]:6,[e.ARBITRUM]:6,[e.AVALANCHE]:6,[e.AURORA]:6,[e.HARMONY]:6},addresses:{[e.ETH]:"0xdac17f958d2ee523a2206206994597c13d831ec7",[e.BSC]:"0x55d398326f99059ff775485246999027b3197955",[e.POLYGON]:"0xc2132d05d31c914a87c6611c10748aeb04b58e8f",[e.FANTOM]:"0x049d68029688eabf473097a2fc38ef61633a3c7a",[e.BOBA]:"0x5DE1677344D3Cb0D7D465c10b72A8f60699C062d",[e.ARBITRUM]:"0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9",[e.AVALANCHE]:"0xc7198437980c041c805a1edcba50c1ce5db95118",[e.AURORA]:"0x4988a896b1227218e4A686fdE5EabdcAbd91571f",[e.HARMONY]:"0x3c2b8be99c50593081eaa2a724f0b8285f5aba8f"},swapType:"USD"}),c.UST=new E({symbol:"UST",name:"TerraUSD",decimals:18,addresses:{[e.BSC]:"0x23396cf899ca06c4472205fc903bdb4de249d6f"},swapType:"USD"}),c.ETH=new E({name:"Ethereum",symbol:"ETH",decimals:18,addresses:{[e.ETH]:"",[e.OPTIMISM]:"",[e.BOBA]:"",[e.ARBITRUM]:""},swapType:"ETH",isETH:!0}),c.NETH=new E({name:"Synapse nETH",symbol:"nETH",decimals:18,addresses:{[e.OPTIMISM]:"0x809DC529f07651bD43A172e8dB6f4a7a0d771036",[e.FANTOM]:"0x67C10C397dD0Ba417329543c1a40eb48AAa7cd00",[e.BOBA]:"0x96419929d7949D6A801A6909c145C8EEf6A40431",[e.MOONBEAM]:"0x3192Ae73315c3634Ffa217f71CF6CBc30FeE349A",[e.ARBITRUM]:"0x3ea9B0ab55F34Fb188824Ee288CeaEfC63cf908e",[e.AVALANCHE]:"0x19E1ae0eE35c0404f835521146206595d37981ae",[e.HARMONY]:"0x0b5740c6b4a97f90eF2F0220651Cca420B868FfB"},swapType:"ETH"}),c.WETH=new E({name:"Wrapped ETH",symbol:"WETH",decimals:18,addresses:{[e.ETH]:"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",[e.OPTIMISM]:"0x121ab82b49B2BC4c7901CA46B8277962b4350204",[e.BOBA]:"0xd203De32170130082896b4111eDF825a4774c18E",[e.ARBITRUM]:"0x82af49447d8a07e3bd95bd0d56f35241523fbab1"},swapType:"ETH"}),c.WETHBEAM=new E({name:"Moonbeam Wrapped ETH",symbol:"WETH",decimals:18,addresses:{[e.MOONBEAM]:"0x3192Ae73315c3634Ffa217f71CF6CBc30FeE349A"},swapType:"ETH"}),c.WETH_E=new E({name:"Wrapped Ether",symbol:"WETH.e",decimals:18,addresses:{[e.AVALANCHE]:"0x49d5c2bdffac6ce2bfdb6640f4f80f226bc10bab"},swapType:"ETH"}),c.AVWETH=new E({name:"AAVE Wrapped Ether",symbol:"AVWETH",decimals:18,addresses:{[e.AVALANCHE]:"0x53f7c5869a859f0aec3d334ee8b4cf01e3492f21"},swapType:"ETH"}),c.ONE_ETH=new E({name:"Harmony ETH",symbol:"1ETH",decimals:18,addresses:{[e.HARMONY]:"0x6983d1e6def3690c4d616b13597a09e6193ea013"},swapType:"ETH"}),c.FTM_ETH=new E({name:"Wrapped ETH",symbol:"ETH ",decimals:18,addresses:{[e.FANTOM]:"0x74b23882a30290451A17c44f4F05243b6b58C76d"},swapType:"ETH"}),c.SYN=new E({name:"Synapse",symbol:"SYN",decimals:18,addresses:{[e.ETH]:"0x0f2d719407fdbeff09d87557abb7232601fd9f29",[e.OPTIMISM]:"0x5A5fFf6F753d7C11A56A52FE47a177a87e431655",[e.BSC]:"0xa4080f1778e69467e905b8d6f72f6e441f9e9484",[e.POLYGON]:"0xf8f9efc0db77d8881500bb06ff5d6abc3070e695",[e.FANTOM]:"0xE55e19Fb4F2D85af758950957714292DAC1e25B2",[e.BOBA]:"0xb554A55358fF0382Fb21F0a478C3546d1106Be8c",[e.MOONBEAM]:"0xF44938b0125A6662f9536281aD2CD6c499F22004",[e.MOONRIVER]:"0xd80d8688b02B3FD3afb81cDb124F188BB5aD0445",[e.ARBITRUM]:"0x080f6aed32fc474dd5717105dba5ea57268f46eb",[e.AVALANCHE]:"0x1f1E7c893855525b303f99bDF5c3c05Be09ca251",[e.AURORA]:"0xd80d8688b02B3FD3afb81cDb124F188BB5aD0445",[e.HARMONY]:"0xE55e19Fb4F2D85af758950957714292DAC1e25B2"},swapType:"SYN"}),c.NUSD=new E({name:"Synapse nUSD",symbol:"nUSD",decimals:18,addresses:{[e.ETH]:"0x1B84765dE8B7566e4cEAF4D0fD3c5aF52D3DdE4F",[e.BSC]:"0x23b891e5c62e0955ae2bd185990103928ab817b3",[e.POLYGON]:"0xb6c473756050de474286bed418b77aeac39b02af",[e.FANTOM]:"0xED2a7edd7413021d440b09D654f3b87712abAB66",[e.BOBA]:"0x6B4712AE9797C199edd44F897cA09BC57628a1CF",[e.ARBITRUM]:"0x2913E812Cf0dcCA30FB28E6Cac3d2DCFF4497688",[e.AVALANCHE]:"0xCFc37A6AB183dd4aED08C204D1c2773c0b1BDf46",[e.AURORA]:"0x07379565cD8B0CaE7c60Dc78e7f601b34AF2A21c",[e.HARMONY]:"0xED2a7edd7413021d440b09D654f3b87712abAB66"},swapType:"USD"}),c.AVAX=new E({name:"Avalanche",symbol:"AVAX",decimals:18,addresses:{[e.AVALANCHE]:""},swapType:"AVAX"}),c.WAVAX=new te({name:"Wrapped AVAX",symbol:"wAVAX",decimals:18,addresses:{[e.AVALANCHE]:"0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7",[e.MOONBEAM]:"0xA1f8890E39b4d8E33efe296D698fe42Fb5e59cC3"},swapType:"AVAX",underlyingToken:c.AVAX}),c.MOVR=new E({name:"Moonriver",symbol:"MOVR",decimals:18,addresses:{[e.MOONRIVER]:""},swapType:"MOVR"}),c.WMOVR=new te({name:"Wrapped MOVR",symbol:"wMOVR",decimals:18,addresses:{[e.MOONBEAM]:"0x1d4C2a246311bB9f827F4C768e277FF5787B7D7E",[e.MOONRIVER]:"0x98878b06940ae243284ca214f92bb71a2b032b8a"},swapType:"MOVR",underlyingToken:c.MOVR}),c.GOHM=new E({name:"Olympus DAO",symbol:"gOHM",decimals:18,addresses:{[e.ETH]:"0x0ab87046fBb341D058F17CBC4c1133F25a20a52f",[e.BSC]:"0x88918495892BAF4536611E38E75D771Dc6Ec0863",[e.POLYGON]:"0xd8cA34fd379d9ca3C6Ee3b3905678320F5b45195",[e.FANTOM]:"0x91fa20244Fb509e8289CA630E5db3E9166233FDc",[e.BOBA]:"0xd22C0a4Af486C7FA08e282E9eB5f30F9AaA62C95",[e.MOONBEAM]:"0xD2666441443DAa61492FFe0F37717578714a4521",[e.MOONRIVER]:"0x3bF21Ce864e58731B6f28D68d5928BcBEb0Ad172",[e.ARBITRUM]:"0x8D9bA570D6cb60C7e3e0F31343Efe75AB8E65FB1",[e.AVALANCHE]:"0x321E7092a180BB43555132ec53AaA65a5bF84251",[e.HARMONY]:"0x67C10C397dD0Ba417329543c1a40eb48AAa7cd00"},swapType:"OHM"}),c.MIM=new E({name:"MIM",symbol:"MIM",decimals:18,addresses:{[e.FANTOM]:"0x82f0b8b456c1a451378467398982d4834b6829c1"},swapType:"USD"}),c.HIGH=new E({name:"Highstreet",symbol:"HIGH",decimals:18,addresses:{[e.ETH]:"0x71Ab77b7dbB4fa7e017BC15090b2163221420282",[e.BSC]:"0x5f4bde007dc06b867f86ebfe4802e34a1ffeed63"},swapType:"HIGHSTREET"}),c.JUMP=new E({name:"HyperJump",symbol:"JUMP",decimals:18,addresses:{[e.BSC]:"0x130025ee738a66e691e6a7a62381cb33c6d9ae83",[e.FANTOM]:"0x78DE9326792ce1d6eCA0c978753c6953Cdeedd73"},swapType:"JUMP"}),c.DOG=new E({name:"The Doge NFT",symbol:"DOG",decimals:18,addresses:{[e.ETH]:"0xBAac2B4491727D78D2b78815144570b9f2Fe8899",[e.BSC]:"0xaa88c603d142c371ea0eac8756123c5805edee03",[e.POLYGON]:"0xeee3371b89fc43ea970e908536fcddd975135d8a"},swapType:"DOG"}),c.NFD=new E({name:"Feisty Doge",symbol:"NFD",decimals:18,addresses:{[e.BSC]:"0x0fe9778c005a5a6115cbe12b0568a2d50b765a51",[e.POLYGON]:"0x0a5926027d407222f8fe20f24cb16e103f617046",[e.AVALANCHE]:"0xf1293574ee43950e7a8c9f1005ff097a9a713959"},swapType:"NFD"}),c.FRAX=new E({name:"Frax",symbol:"FRAX",decimals:18,addresses:{[e.ETH]:"0x853d955acef822db058eb8505911ed77f175b99e",[e.MOONBEAM]:"",[e.MOONRIVER]:"0x1a93b23281cc1cde4c4741353f3064709a16197d",[e.HARMONY]:"0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200"},swapType:"FRAX"}),c.SYN_FRAX=new E({name:"Synapse Frax",symbol:"synFRAX",decimals:18,addresses:{[e.FANTOM]:"0x1852F70512298d56e9c8FDd905e02581E04ddb2a",[e.MOONBEAM]:"0xDd47A348AB60c61Ad6B60cA8C31ea5e00eBfAB4F",[e.MOONRIVER]:"0xE96AC70907ffF3Efee79f502C985A7A21Bce407d",[e.HARMONY]:"0x1852F70512298d56e9c8FDd905e02581E04ddb2a"},swapType:"FRAX"}),c.SOLAR=new E({name:"Vested SolarBeam",symbol:"veSOLAR",decimals:18,addresses:{[e.MOONBEAM]:"0x0DB6729C03C85B0708166cA92801BcB5CAc781fC",[e.MOONRIVER]:"0x76906411D07815491A5E577022757aD941fb5066"},swapType:"SOLAR"}),c.GMX=new E({name:"GMX",symbol:"GMX",decimals:18,addresses:{[e.ARBITRUM]:"0xfc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a",[e.AVALANCHE]:"0x62edc0692bd897d2295872a9ffcac5425011c661"},wrapperAddresses:{[e.AVALANCHE]:"0x20A9DC684B4d0407EF8C9A302BEAaA18ee15F656"},swapType:"GMX"}),c.mintBurnTokens=[c.NUSD,c.SYN,c.NETH,c.HIGH,c.DOG,c.JUMP,c.FRAX,c.SYN_FRAX,c.NFD,c.GOHM,c.SOLAR,c.GMX];function F(pe){return c.mintBurnTokens.map(j=>j.symbol).includes(pe.symbol)}c.isMintBurnToken=F})(t||={});var Y;(b=>{function n(A){return[...A.slice(1),A[0]]}function s(A){return A.notLP=A.notLP??!1,new R({addresses:{[A.chainId]:A.address},decimals:18,name:"Synapse nUSD LP Token"+(A.netName!="BSC"?` ${A.netName}`:""),symbol:A.notLP?"nUSD":"nUSD-LP",poolName:`${A.netName} Stableswap Pool `,poolId:A.poolId,poolType:"USD",swapAddresses:{[A.chainId]:A.swapAddress},poolTokens:A.poolTokens})}function p(A){return new I({addresses:{[A.chainId]:A.address},decimals:18,name:`Synapse ${A.poolName??"ETH"} LP Token ${A.netName}`,symbol:"nETH-LP",poolName:`${A.netName} ${A.poolName??"ETH"} Pool `,poolId:A.poolId,poolType:"ETH",swapAddresses:{[A.chainId]:A.swapAddress},swapEthAddresses:{[A.chainId]:A.swapETHAddress},poolTokens:A.poolTokens,nativeTokens:A.nativeTokens,depositTokens:A.depositTokens})}class R{baseToken;poolId;poolName;poolType;poolTokens;swapAddresses={};constructor(x){this.baseToken=new E({name:x.name,symbol:x.symbol,decimals:x.decimals,addresses:x.addresses,swapType:x.poolType}),this.poolId=x.poolId,this.poolName=x.poolName,this.poolType=x.poolType,this.swapAddresses=x.swapAddresses,this.poolTokens=x.poolTokens}get name(){return this.baseToken.name}get symbol(){return this.baseToken.symbol}get addresses(){return this.baseToken.addresses}get swapType(){return this.baseToken.swapType}get hash(){return this.baseToken.hash}address(x){return this.baseToken.address(x)}decimals(x){return this.baseToken.decimals(x)}get poolTokensForBridgeSwaps(){return n(this.poolTokens)}}b.SwapToken=R;class I extends R{nativeTokens;depositTokens;swapEthAddresses;constructor(x){let{swapEthAddresses:ae,nativeTokens:W,depositTokens:ue,...cn}=x;super(cn);x.swapEthAddresses&&(this.swapEthAddresses=x.swapEthAddresses),x.nativeTokens&&(this.nativeTokens=x.nativeTokens),x.depositTokens&&(this.depositTokens=x.depositTokens)}get poolTokensForBridgeSwaps(){return this.depositTokens?.length>0?n(this.depositTokens):n(this.poolTokens)}}b.ETHSwapToken=I;let i=(A=t.DAI,x=!0)=>[...x?[t.NUSD]:[],...A===null?[]:[A],t.USDC,t.USDT],a=i(),r=i(t.MIM),o=A=>[t.NETH,A],u=o(t.WETH),d=o(t.ETH);b.ETH_POOL_SWAP_TOKEN=s({chainId:e.ETH,address:t.NUSD.address(e.ETH),netName:"Ethereum",poolId:420,swapAddress:"0x1116898DdA4015eD8dDefb84b6e8Bc24528Af2d8",poolTokens:i(t.DAI,!1),notLP:!0}),b.OPTIMISM_ETH_SWAP_TOKEN=p({chainId:e.OPTIMISM,address:"0x4619a06ddd3b8f0f951354ec5e75c09cd1cd1aef",netName:"Optimism",poolId:0,swapAddress:"0xE27BFf97CE92C3e1Ff7AA9f86781FDd6D48F5eE9",swapETHAddress:"0x8c7d5f8A8e154e1B59C92D8FB71314A43F32ef7B",poolTokens:u,nativeTokens:d}),b.BSC_POOL_SWAP_TOKEN=s({chainId:e.BSC,address:"0xa4b7Bc06EC817785170C2DbC1dD3ff86CDcdcc4C",netName:"BSC",poolId:1,swapAddress:"0x28ec0B36F0819ecB5005cAB836F4ED5a2eCa4D13",poolTokens:i(t.BUSD)}),b.POLYGON_POOL_SWAP_TOKEN=s({chainId:e.POLYGON,address:"0x7479e1bc2f2473f9e78c89b4210eb6d55d33b645",netName:"Polygon",poolId:1,swapAddress:"0x85fCD7Dd0a1e1A9FCD5FD886ED522dE8221C3EE5",poolTokens:a}),b.FANTOM_POOL_SWAP_TOKEN=s({chainId:e.FANTOM,address:"0x464d121D3cA63cEEfd390D76f19364D3Bd024cD2",netName:"Fantom",poolId:1,swapAddress:"0x2913E812Cf0dcCA30FB28E6Cac3d2DCFF4497688",poolTokens:r}),b.FANTOM_ETH_SWAP_TOKEN=p({chainId:e.FANTOM,address:"0x0e3dD3403ee498694A8f61B04AFed8919F747f77",netName:"Fantom",poolId:2,swapAddress:"0x8D9bA570D6cb60C7e3e0F31343Efe75AB8E65FB1",poolTokens:o(t.FTM_ETH)}),b.BOBA_POOL_SWAP_TOKEN=s({chainId:e.BOBA,address:"0x9D7283A6AeeD9BCd4Ac70876fEA2b69a63DD8cb9",netName:"Boba",poolId:1,swapAddress:"0x75FF037256b36F15919369AC58695550bE72fead",poolTokens:a}),b.BOBA_ETH_SWAP_TOKEN=p({chainId:e.BOBA,address:"0x498657f2AF18D525049dE520dD86ee376Db9c67c",netName:"Boba",poolId:2,swapAddress:"0x753bb855c8fe814233d26Bb23aF61cb3d2022bE5",swapETHAddress:"0x4F4f66964335D7bef23C16a62Fcd3d1E89f02959",poolTokens:u,nativeTokens:d}),b.ARBITRUM_POOL_SWAP_TOKEN=s({chainId:e.ARBITRUM,address:"0xADeac0343C2Ac62DFE5A5f51E896AefFF5Ab513E",netName:"Arbitrum",poolId:2,swapAddress:"0x0Db3FE3B770c95A0B99D1Ed6F2627933466c0Dd8",poolTokens:r}),b.ARBITRUM_ETH_SWAP_TOKEN=p({chainId:e.ARBITRUM,address:"0xD70A52248e546A3B260849386410C7170c7BD1E9",netName:"Arbitrum",poolId:0,swapAddress:"0xa067668661C84476aFcDc6fA5D758C4c01C34352",swapETHAddress:"0x1c3fe783a7c06bfAbd124F2708F5Cc51fA42E102",poolTokens:u,nativeTokens:d}),b.AVALANCHE_POOL_SWAP_TOKEN=s({chainId:e.AVALANCHE,address:"0xCA87BF3ec55372D9540437d7a86a7750B42C02f4",netName:"Avalanche",poolId:1,swapAddress:"0xED2a7edd7413021d440b09D654f3b87712abAB66",poolTokens:a});let H=o(t.AVWETH),C=o(t.WETH_E);b.AVALANCHE_ETH_SWAP_TOKEN=p({chainId:e.AVALANCHE,address:"0x5dF1dB940dd8fEE0e0eB0C8917cb50b4dfaDF98c",netName:"Avalanche",poolId:2,swapAddress:"0x77a7e60555bC18B4Be44C181b2575eee46212d44",swapETHAddress:"0xdd60483Ace9B215a7c019A44Be2F22Aa9982652E",poolTokens:H,nativeTokens:C,depositTokens:C}),b.AURORA_POOL_SWAP_TOKEN=s({chainId:e.AURORA,address:"0xEAdC3524f3F007cdC5104BF28663b1141D3e3127",netName:"Aurora",poolId:1,swapAddress:"0xcEf6C2e20898C2604886b888552CA6CcF66933B0",poolTokens:i(null)}),b.HARMONY_POOL_SWAP_TOKEN=s({chainId:e.HARMONY,address:"0xE269abBFAF52b26D2632F55B6b223A5223088B96",netName:"Harmony",poolId:1,swapAddress:"0x3ea9B0ab55F34Fb188824Ee288CeaEfC63cf908e",poolTokens:a});let O=o(t.ONE_ETH);b.HARMONY_ONEETH_TOKEN=p({chainId:e.HARMONY,address:"0x464d121D3cA63cEEfd390D76f19364D3Bd024cD2",netName:"Harmony",poolName:"1ETH",poolId:1,swapAddress:"0x2913E812Cf0dcCA30FB28E6Cac3d2DCFF4497688",poolTokens:O,nativeTokens:O,depositTokens:O});let N=(A,x)=>({poolTokens:[A],swapType:x}),z=N(t.ETH,"ETH"),F=N(t.SYN,"SYN"),c=N(t.FRAX,"FRAX"),pe=N(t.HIGH,"HIGHSTREET"),j=N(t.DOG,"DOG"),he=N(t.JUMP,"JUMP"),de=N(t.NFD,"NFD"),G=N(t.GOHM,"OHM"),Ae=N(t.GMX,"GMX"),ke=N(t.SOLAR,"SOLAR"),Le=N(t.AVAX,"AVAX"),Ue=N(t.WAVAX,"AVAX"),Ve=N(t.MOVR,"MOVR"),Ge=N(t.WMOVR,"MOVR"),Z=(A,x,...ae)=>{let W={["SYN"]:F.poolTokens};A&&(W["USD"]=A),x&&(W["ETH"]=x);for(let ue of ae)W[ue.swapType]=ue.poolTokens;return W};b.bridgeSwappableTokensByType={[e.ETH]:Z([...b.ETH_POOL_SWAP_TOKEN.poolTokens,t.NUSD],z.poolTokens,pe,j,c,G),[e.OPTIMISM]:Z(null,b.OPTIMISM_ETH_SWAP_TOKEN.poolTokens),[e.BSC]:Z(b.BSC_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,null,pe,j,he,de),[e.POLYGON]:Z(b.POLYGON_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,null,j,de,G),[e.FANTOM]:Z(b.FANTOM_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,b.FANTOM_ETH_SWAP_TOKEN.poolTokensForBridgeSwaps,he,c,G),[e.BOBA]:Z(b.BOBA_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,b.BOBA_ETH_SWAP_TOKEN.poolTokens),[e.MOONBEAM]:Z(null,null,ke,Ue,Ge),[e.MOONRIVER]:Z(null,null,c,G,ke,Ve),[e.ARBITRUM]:Z(b.ARBITRUM_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,b.ARBITRUM_ETH_SWAP_TOKEN.poolTokens,G,Ae),[e.AVALANCHE]:Z(b.AVALANCHE_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,b.AVALANCHE_ETH_SWAP_TOKEN.poolTokensForBridgeSwaps,de,G,Ae,Le),[e.AURORA]:Z(b.AURORA_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps),[e.HARMONY]:Z(b.HARMONY_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,b.HARMONY_ONEETH_TOKEN.poolTokensForBridgeSwaps,c)};function q(A,x,...ae){let W={};return A&&(W["USD"]=A),x&&(W["ETH"]=x),ae.forEach(ue=>W={...W,[ue.swapType]:{poolTokens:ue.poolTokens}}),W}b.bridgeSwappableTypePoolsByChain={[e.ETH]:q(b.ETH_POOL_SWAP_TOKEN,null,z,F,pe,j,G,c),[e.OPTIMISM]:q(null,b.OPTIMISM_ETH_SWAP_TOKEN,F),[e.BSC]:q(b.BSC_POOL_SWAP_TOKEN,null,F,pe,j,he,de),[e.POLYGON]:q(b.POLYGON_POOL_SWAP_TOKEN,null,F,de,j,G),[e.FANTOM]:q(b.FANTOM_POOL_SWAP_TOKEN,b.FANTOM_ETH_SWAP_TOKEN,F,he,G,c),[e.BOBA]:q(b.BOBA_POOL_SWAP_TOKEN,b.BOBA_ETH_SWAP_TOKEN,F),[e.MOONBEAM]:q(null,null,F,ke,G,Ge,Ue),[e.MOONRIVER]:q(null,null,F,G,ke,c,Ve),[e.ARBITRUM]:q(b.ARBITRUM_POOL_SWAP_TOKEN,b.ARBITRUM_ETH_SWAP_TOKEN,F,G,Ae),[e.AVALANCHE]:q(b.AVALANCHE_POOL_SWAP_TOKEN,b.AVALANCHE_ETH_SWAP_TOKEN,F,de,G,Ae,Le),[e.AURORA]:q(b.AURORA_POOL_SWAP_TOKEN,null,F),[e.HARMONY]:q(b.HARMONY_POOL_SWAP_TOKEN,b.HARMONY_ONEETH_TOKEN,F,c)};function Qn(A){let x=[],ae=b.bridgeSwappableTokensByType[A];return Object.keys(ae).forEach(W=>{x=[...x,...ae[W]]}),x}b.getAllSwappableTokensForNetwork=Qn,b.swapGroupsForNetwork=A=>Object.keys(b.bridgeSwappableTokensByType[A])})(Y||={});function an(n,s){let p=[];return Object.keys(s).forEach(R=>{n.includes(R)&&(p=[...p,...s[R]])}),p}function sn(n,s){let p={};return e.supportedChainIds().forEach(R=>{n!==R&&(p[R]=an(s,Y.bridgeSwappableTokensByType[R]))}),p}function rn(n,s){return Fe(n,s)}function Fe(n,s){let p={},R=Y.swapGroupsForNetwork(n);return typeof s<"u"?p[s]=an(R,Y.bridgeSwappableTokensByType[s]):p=sn(n,R),p}function on(){return Pe()}function Pe(){let n={};return e.supportedChainIds().forEach(s=>{let p=Y.swapGroupsForNetwork(s);n[s]=sn(s,p)}),n}function pn(){let n={},s=e.supportedChainIds();for(let p of s){let I=X.fromChainId(p).tokens;n[p]=I.map(i=>{let a=i.swapType,r={token:i};for(let o of s){if(p===o)continue;let u=Y.bridgeSwappableTypePoolsByChain[o][a]?.poolTokens||[];u.length!==0&&(r[o]=u)}return r})}return n}var Xn=[e.ETH,e.OPTIMISM,e.FANTOM,e.BOBA,e.MOONBEAM,e.ARBITRUM,e.AVALANCHE],X;(m=>{class n{name;names;chainCurrency;chainId;tokens;tokenAddresses;constructor(h){this.name=h.name,this.names=h.names||[],this.chainId=h.chainId,this.chainCurrency=h.chainCurrency,this.tokens=Y.getAllSwappableTokensForNetwork(this.chainId),this.tokenAddresses=this.tokens.map(B=>B.address(this.chainId))}get zapIsL2BridgeZap(){return this.chainId!==e.ETH}supportsToken(h){return h.symbol==="ETH"?Xn.includes(this.chainId):h.isEqual(t.WETH)&&this.chainId===e.ETH||h.isEqual(t.AVWETH)&&this.chainId===e.AVALANCHE||h.isEqual(t.WAVAX)&&this.chainId===e.AVALANCHE||h.isEqual(t.WMOVR)&&this.chainId===e.MOONRIVER?!0:this.tokenAddresses.includes(h.address(this.chainId))}}m.Network=n,m.ETH=new n({name:"Ethereum Mainnet",chainId:e.ETH,chainCurrency:"ETH"}),m.OPTIMISM=new n({name:"Optimism",chainId:e.OPTIMISM,chainCurrency:"ETH"}),m.BSC=new n({name:"Binance Smart Chain",chainId:e.BSC,chainCurrency:"BNB"}),m.POLYGON=new n({name:"Polygon",chainId:e.POLYGON,chainCurrency:"MATIC"}),m.FANTOM=new n({name:"Fantom",chainId:e.FANTOM,chainCurrency:"FTM"}),m.BOBA=new n({name:"Boba Network",chainId:e.BOBA,chainCurrency:"ETH"}),m.MOONBEAM=new n({name:"Moonbeam",chainId:e.MOONBEAM,chainCurrency:"GLMR"}),m.MOONRIVER=new n({name:"Moonriver",chainId:e.MOONRIVER,chainCurrency:"MOVR"}),m.ARBITRUM=new n({name:"Arbitrum",chainId:e.ARBITRUM,chainCurrency:"ETH"}),m.AVALANCHE=new n({name:"Avalanche C-Chain",chainId:e.AVALANCHE,chainCurrency:"AVAX"}),m.AURORA=new n({name:"Aurora",chainId:e.AURORA,chainCurrency:"aETH"}),m.HARMONY=new n({name:"Harmony",chainId:e.HARMONY,chainCurrency:"ONE"});let y={[e.ETH]:m.ETH,[e.OPTIMISM]:m.OPTIMISM,[e.BSC]:m.BSC,[e.POLYGON]:m.POLYGON,[e.FANTOM]:m.FANTOM,[e.BOBA]:m.BOBA,[e.MOONBEAM]:m.MOONBEAM,[e.MOONRIVER]:m.MOONRIVER,[e.ARBITRUM]:m.ARBITRUM,[e.AVALANCHE]:m.AVALANCHE,[e.AURORA]:m.AURORA,[e.HARMONY]:m.HARMONY};m.fromChainId=k=>y[e.asNumber(k)]??null;function f(k,h){return k=k instanceof n?k:m.fromChainId(k),k.supportsToken(h)}m.networkSupportsToken=f,m.supportedNetworks=()=>Object.values(y)})(X||={});var dn=X.supportedNetworks;var oe=require("@ethersproject/constants"),He=require("@ethersproject/units"),mn=require("@ethersproject/bignumber");var J;(i=>(i.TokenNotSupported_From="Token not supported on 'from' network",i.TokenNotSupported_To="Token not suppoorted on 'to' network",i.NonmatchingSwapTypes="Token swap types don't match",i.BOBAToL1="Bridging ETH from Boba Mainnet to L1 not currently supported",i.ETHOnBOBA="Currently, the SDK only supports bridging Stablecoins to and from BOBA"))(J||={});var yn=require("@ethersproject/bignumber");var un=require("@ethersproject/units"),me=require("@ethersproject/bignumber"),Te;(o=>{let n=u=>(0,un.parseUnits)(u,"gwei"),s={maxPriorityFee:n("1.5"),bridgeGasLimit:me.BigNumber.from(1e5)},p={gasPrice:n("10"),approveGasLimit:me.BigNumber.from(6e4)},R={gasPrice:n("2.5"),bridgeGasLimit:me.BigNumber.from(15e5)},I={gasPrice:n("150"),bridgeGasLimit:me.BigNumber.from(8e5),approveGasLimit:me.BigNumber.from(75e3)},i={gasPrice:n("0")};function a(u){switch(u){case e.ETH:return s;case e.BOBA:return p;case e.ARBITRUM:return R;case e.AVALANCHE:return I;case e.AURORA:return i}return{}}o.makeGasParams=a;function r(u,d,T){return Promise.resolve(d).then(g=>{let{maxPriorityFee:y,gasPrice:l,approveGasLimit:f,bridgeGasLimit:w}=a(u);switch(l&&(g.gasPrice=l),y&&(g.maxPriorityFeePerGas=y),T){case"bridge":w&&(g.gasLimit=w);break;case"approve":f&&(g.gasLimit=f);break}return g})}o.populateGasParams=r})(Te||={});var Me=yn.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),re;(i=>{class n{address;chainId;provider;instance;constructor(r){this.address=r.tokenAddress,this.chainId=r.chainId,this.provider=ne(this.chainId),this.instance=le.connect(this.address,this.provider)}approve=async(r,o,u)=>(u=u??!1,u?this.instance.callStatic.approve(r.spender,r.amount??Me,{from:o.getAddress()}):Be(this.buildApproveTransaction(r),o));buildApproveTransaction=async r=>{let{spender:o,amount:u}=r;return u=u??Me,this.instance.populateTransaction.approve(o,u).then(d=>Te.populateGasParams(this.chainId,d,"approve")).catch(U)};balanceOf=async r=>this.instance.balanceOf(r);allowanceOf=async(r,o)=>this.instance.allowance(r,o)}i.approve=async(a,r,o,u)=>new n(r).approve(a,o,u),i.buildApproveTransaction=async(a,r)=>new n(r).buildApproveTransaction(a),i.balanceOf=async(a,r)=>new n(r).balanceOf(a),i.allowanceOf=async(a,r,o)=>new n(o).allowanceOf(a,r)})(re||={});var be=require("@ethersproject/bignumber"),fe=require("@ethersproject/units"),P;(o=>{o.One="ONE",o.OneTenth="ONE_TENTH",o.TwoTenth="TWO_TENTH",o.Quarter="QUARTER";function I(u,d,T){T=T??!1;let g,y;switch(d){case o.OneTenth:y=1e3,g=y+(T?1:-1);break;case o.TwoTenth:y=500,g=y+(T?1:-1);break;case o.Quarter:y=50,g=y+(T?1:-1);break;default:y=100,g=y+(T?1:-1);break}return u.mul(g).div(y)}o._applySlippage=I;function i(u,d){return I(u,d,!0)}o.addSlippage=i;function a(u,d){return I(u,d,!1)}o.subtractSlippage=a;function r(u){switch(u){case o.One:return(0,fe.formatUnits)(be.BigNumber.from(100),2);case o.OneTenth:return(0,fe.formatUnits)(be.BigNumber.from(100),3);case o.TwoTenth:return(0,fe.formatUnits)(be.BigNumber.from(200),3);case o.Quarter:return(0,fe.formatUnits)(be.BigNumber.from(2e3),3);default:return"N/A"}}o.formatSlippageToString=r})(P||={});var ln=require("@ethersproject/constants"),M;(y=>{let n=[e.OPTIMISM,e.FANTOM,e.BOBA,e.MOONBEAM,e.ARBITRUM,e.AVALANCHE,e.HARMONY];y.isL2ETHChain=l=>n.includes(l),y.DepositIfChainTokens=[{chainId:e.FANTOM,tokens:[t.JUMP],depositEth:!1},{chainId:e.POLYGON,tokens:[t.NFD],depositEth:!1},{chainId:e.MOONRIVER,tokens:[t.SOLAR],depositEth:!1},{chainId:e.AVALANCHE,tokens:[t.AVAX,t.WAVAX],altChainId:e.MOONBEAM,depositEth:!0},{chainId:e.MOONRIVER,tokens:[t.MOVR,t.WMOVR],altChainId:e.MOONBEAM,depositEth:!0}],y.getBridgeTxArgs=()=>({slippageCustom:null,slippageSelected:P.OneTenth,infiniteApproval:!0,transactionDeadline:y.getTimeMinutesFromNow(10),bridgeTransactionDeadline:y.getTimeMinutesFromNow(60*24)});function I(l,f){let{slippageSelected:w,transactionDeadline:m,bridgeTransactionDeadline:k}=y.getBridgeTxArgs(),h=w,B=P.TwoTenth,D=P.Quarter,H=P.subtractSlippage(l,h),C=P.subtractSlippage(f,h),v=P.subtractSlippage(C,h),S=P.subtractSlippage(l,B),_=P.subtractSlippage(f,B),O=P.subtractSlippage(_,B),V=P.subtractSlippage(l,D),N=P.subtractSlippage(f,D),z=P.subtractSlippage(N,D);return{slippageSelected:w,transactionDeadline:m,bridgeTransactionDeadline:k,minToSwapOrigin:H,minToSwapDest:C,minToSwapDestFromOrigin:v,minToSwapOriginMediumSlippage:S,minToSwapDestMediumSlippage:_,minToSwapDestFromOriginMediumSlippage:O,minToSwapOriginHighSlippage:V,minToSwapDestHighSlippage:N,minToSwapDestFromOriginHighSlippage:z}}y.getSlippages=I,y.subBigNumSafe=(l,f)=>l.gt(f)?l.sub(f):ln.Zero,y.getTimeMinutesFromNow=l=>Math.round(new Date().getTime()/1e3+60*l),y.makeEasyParams=(l,f,w)=>[l.addressTo,l.chainIdTo,w.address(f),l.amountFrom],y.makeEasySubParams=(l,f,w)=>{let m=y.makeEasyParams(l,f,w);return[m[0],m[1],m[2]]},y.depositETHParams=l=>[l.addressTo,l.chainIdTo,l.amountFrom];async function d(l,f,w,m,k){return l.calculateSwap(f,w,m,k)}y.calculateSwapL2Zap=d,y.isETHLikeToken=l=>l.isEqual(t.WETH_E)||l.isEqual(t.ONE_ETH)||l.isEqual(t.FTM_ETH),y.makeOverrides=(l,f)=>{let w={};return f&&(w={value:l}),w}})(M||={});var _e;(R=>{class n{network;chainId;provider;bridgeAddress;bridgeInstance;networkZapBridgeInstance;isL2Zap;zapBridgeAddress;bridgeConfigInstance=$.bridgeConfig();zapBridgeInstance=$.l1BridgeZap({chainId:e.ETH,signerOrProvider:ne(e.ETH)});requiredConfirmations;constructor(i){let{network:a,provider:r}=i;this.network=a instanceof X.Network?a:X.fromChainId(a),this.chainId=this.network.chainId,this.provider=r??ne(this.chainId),this.requiredConfirmations=p(this.network),this.isL2Zap=this.network.zapIsL2BridgeZap;let o={chainId:this.chainId,signerOrProvider:this.provider};this.bridgeInstance=$.synapseBridge(o),this.bridgeAddress=se(this.chainId,"bridge"),this.networkZapBridgeInstance=$.zapBridge({chainId:this.chainId,signerOrProvider:this.provider}),this.zapBridgeAddress=this.networkZapBridgeInstance.address}bridgeVersion(){return this.bridgeInstance.bridgeVersion()}WETH_ADDRESS(){return this.bridgeInstance.WETH_ADDRESS()}swapSupported(i){let{tokenFrom:a,tokenTo:r,chainIdTo:o}=i;if(!this.network.supportsToken(a))return[!1,J.TokenNotSupported_From];if(!X.networkSupportsToken(o,r))return[!1,J.TokenNotSupported_To];if(a.swapType!==r.swapType)return[!1,J.NonmatchingSwapTypes];let u=this.chainId===e.BOBA&&a.swapType==="ETH",d=o===e.BOBA&&r.swapType==="ETH";return u||d?[!1,J.ETHOnBOBA]:[!0,""]}async estimateBridgeTokenOutput(i){try{await this.checkSwapSupported(i)}catch(a){return U(a)}return this.calculateBridgeRate(i)}async buildBridgeTokenTransaction(i){let{addressTo:a}=i,r=this.makeBridgeTokenArgs(i),{tokenFrom:o,tokenTo:u}=r;return!a||a===""?U(new Error("BridgeTransactionParams.addressTo cannot be empty string or undefined")):(i={...i,tokenFrom:o,tokenTo:u},(this.chainId===e.ETH?this.buildETHMainnetBridgeTxn(i,r):this.buildL2BridgeTxn(i,r)).then(T=>Te.populateGasParams(this.chainId,T,"bridge")).catch(U))}async executeBridgeTokenTransaction(i,a){try{await this.checkSwapSupported(i)}catch(T){return U(T)}let{tokenFrom:r,amountFrom:o,addressTo:u}=i,d=await a.getAddress();return i.addressTo=u??d,this.checkCanBridge({address:d,token:r,amount:o}).then(T=>{let[g,y]=T;if(!g)return U(y);let l=this.buildBridgeTokenTransaction(i);return Be(l,a)}).catch(U)}async buildApproveTransaction(i){let[a,r]=this.buildERC20ApproveArgs(i);return re.buildApproveTransaction(a,{tokenAddress:r,chainId:this.chainId})}async executeApproveTransaction(i,a){let[r,o]=this.buildERC20ApproveArgs(i);return Promise.resolve(re.approve(r,{tokenAddress:o,chainId:this.chainId},a).then(u=>u))}async getAllowanceForAddress(i){let{address:a,token:r}=i,o=r.address(this.chainId);return re.allowanceOf(a,this.zapBridgeAddress,{tokenAddress:o,chainId:this.chainId})}async checkNeedsApprove(i){let{amount:a}=i;a=a??Me.sub(1);let{address:r}=i,[{spender:o},u]=this.buildERC20ApproveArgs(i);return re.allowanceOf(r,o,{tokenAddress:u,chainId:this.chainId}).then(d=>[d.lt(a),d]).catch(U)}async checkHasBalance(i){let{address:a,amount:r}=i,[,o]=this.buildERC20ApproveArgs(i);return re.balanceOf(a,{tokenAddress:o,chainId:this.chainId}).then(u=>[u.gte(r),u]).catch(U)}async checkCanBridge(i){let{token:a}=i,r=this.checkHasBalance(i).then(o=>{let[u,d]=o;if(!u){let g=(0,He.formatUnits)(d,a.decimals(this.chainId)).toString();return[!1,new Error(`Balance of token ${a.symbol} is too low; current balance is ${g}`)]}return[!0,null]}).catch(U);return this.checkNeedsApprove(i).then(o=>{let[u,d]=o;if(u){let T=(0,He.formatUnits)(d,a.decimals(this.chainId)).toString();return[!1,new Error(`Spend allowance of Bridge too low for token ${a.symbol}; current allowance for Bridge is ${T}`)]}return r}).catch(U)}buildERC20ApproveArgs(i){let{token:a,amount:r}=i,o=a instanceof E||a instanceof te?a.address(this.chainId):a;return[{spender:this.zapBridgeAddress,amount:r},o]}async checkSwapSupported(i){let{chainIdTo:a,tokenFrom:r,tokenTo:o}=i,u=X.fromChainId(a);return new Promise((d,T)=>{let[g,y]=this.swapSupported({tokenFrom:r,chainIdTo:a,tokenTo:o});if(!g)switch(y){case J.TokenNotSupported_From:T(`Network '${this.network.name}' does not support token ${r.name} (param: tokenFrom)`);break;case J.TokenNotSupported_To:T(`Network '${u.name}' (param: chainIdTo) does not support token ${o.name} (param: tokenTo)`);break;case J.NonmatchingSwapTypes:T(`param tokenFrom with swapType '${r.swapType}' cannot be bridge to param tokenTo with swapType '${o.swapType}'`);break;default:T(y);break}d(!0)})}async calculateBridgeRate(i){let{chainIdTo:a,amountFrom:r}=i,o={chainId:a,signerOrProvider:ne(a)},u=$.zapBridge(o),{tokenFrom:d,tokenTo:T,tokenIndexFrom:g,tokenIndexTo:y,fromChainTokens:l}=this.makeBridgeTokenArgs(i),f=["HIGHSTREET","DOG","JUMP","NFD","OHM","SOLAR","GMX"],[w,m]=(()=>{if(f.includes(d.swapType))return[d,d];switch(d.swapType){case"SYN":return[t.SYN,t.SYN];case"FRAX":return a===e.ETH?[null,t.FRAX]:[null,t.SYN_FRAX];case"ETH":let O;return a===e.ETH?O=t.WETH:O=t.NETH,[t.NETH,O];case"AVAX":return[t.WAVAX,t.WAVAX];case"MOVR":return[t.WMOVR,t.WMOVR];default:return[t.NUSD,t.NUSD]}})(),k=mn.BigNumber.from(10);m=m??w;let h=this.bridgeConfigInstance.calculateSwapFee(m.address(a),a,r.mul(k.pow(18-d.decimals(this.chainId)))),B=(O,V)=>M.isL2ETHChain(O)&&V.swapType==="ETH",D=this.chainId===e.ETH&&B(a,T),H=a===e.ETH&&B(this.chainId,d),C;switch(!0){case r.eq(oe.Zero):C=oe.Zero;break;case D:case t.isMintBurnToken(d):case d.isWrappedToken:C=r;break;case this.chainId===e.ETH:let O=l.map(V=>d.isEqual(V)?r:oe.Zero);C=await this.zapBridgeInstance.calculateTokenAmount(O,!0);break;default:C=await M.calculateSwapL2Zap(this.networkZapBridgeInstance,w.address(this.chainId),g,0,r)}let v;try{v=await h}catch(O){return console.error(`Error in bridge fee request: ${O}`),null}C=M.subBigNumSafe(C,v);let S;switch(!0){case C.isZero():S=oe.Zero;break;case H:case t.isMintBurnToken(T):case T.isWrappedToken:S=C;break;case a===e.ETH:S=await u.calculateRemoveLiquidityOneToken(C,y);break;default:S=await M.calculateSwapL2Zap(u,w.address(a),0,y,C)}return{amountToReceive:S,bridgeFee:v}}checkEasyArgs(i,a,r,o,u){let d=i;return o.includes(i.tokenTo.hash)?{castArgs:d,isEasy:!0,txn:a.populateTransaction.redeem(...M.makeEasyParams(d,this.chainId,i.tokenTo))}:r.includes(i.tokenTo.hash)?{castArgs:d,isEasy:!0,txn:a.populateTransaction.deposit(...M.makeEasyParams(d,this.chainId,i.tokenTo))}:u.includes(i.tokenTo.hash)?{castArgs:d,isEasy:!0,txn:a.populateTransaction.depositETH(...M.depositETHParams(d),{value:i.amountFrom})}:{castArgs:d,isEasy:!1}}buildETHMainnetBridgeTxn(i,a){let{addressTo:r,chainIdTo:o,amountFrom:u,amountTo:d}=i,T=$.l1BridgeZap({chainId:this.chainId,signerOrProvider:this.provider}),g=[t.SYN.hash],y=[t.HIGH.hash,t.DOG.hash,t.FRAX.hash],l=[t.NETH.hash];i.tokenFrom.isEqual(t.NUSD)&&y.push(t.NUSD.hash);let{castArgs:f,isEasy:w,txn:m}=this.checkEasyArgs(i,T,y,g,l);if(w&&m)return m;let{transactionDeadline:k,bridgeTransactionDeadline:h,minToSwapDestFromOrigin:B,minToSwapDest:D,minToSwapOriginMediumSlippage:H,minToSwapDestFromOriginMediumSlippage:C}=M.getSlippages(u,d);switch(i.tokenTo.hash){case t.NUSD.hash:if(!i.tokenFrom.isEqual(t.NUSD)){let S=a.fromChainTokens.map(_=>i.tokenFrom.isEqual(_)?u:oe.Zero);return T.populateTransaction.zapAndDeposit(r,o,t.NUSD.address(this.chainId),S,D,k)}break;default:if(M.isETHLikeToken(i.tokenTo)||i.tokenTo.isEqual(t.WETH))return T.populateTransaction.depositETHAndSwap(...M.depositETHParams(f),0,a.tokenIndexTo,B,h,{value:u});let v=a.fromChainTokens.map(S=>i.tokenFrom.isEqual(S)?u:oe.Zero);return T.populateTransaction.zapAndDepositAndSwap(r,o,t.NUSD.address(this.chainId),v,H,k,0,a.tokenIndexTo,C,h)}}buildL2BridgeTxn(i,a){let{chainIdTo:r,amountFrom:o,amountTo:u}=i,d=$.l2BridgeZap({chainId:this.chainId,signerOrProvider:this.provider});a.tokenFrom.isEqual(t.AVWETH)&&(a.tokenFrom=t.WETH_E);let T=[],g=[t.SYN.hash,t.HIGH.hash,t.DOG.hash,t.FRAX.hash],y=[];i.tokenFrom.isEqual(t.NUSD)&&g.push(t.NUSD.hash),M.DepositIfChainTokens.forEach(v=>{let{chainId:S,tokens:_,depositEth:O,altChainId:V}=v,N=typeof V<"u",z=_.map(F=>F.hash);this.chainId===S?O?y.push(...z):T.push(...z):N?this.chainId===V&&g.push(...z):g.push(...z)});let{castArgs:l,isEasy:f,txn:w}=this.checkEasyArgs(i,d,T,g,y);if(f&&w)return w;let{transactionDeadline:m,bridgeTransactionDeadline:k,minToSwapOriginHighSlippage:h,minToSwapDestFromOriginHighSlippage:B,minToSwapDest:D}=M.getSlippages(o,u),H=v=>d.populateTransaction.redeemAndSwap(...M.makeEasyParams(l,this.chainId,v),0,a.tokenIndexTo,D,m),C=(v,S)=>d.populateTransaction.swapAndRedeemAndSwap(...M.makeEasySubParams(l,this.chainId,v),a.tokenIndexFrom,0,o,h,m,0,a.tokenIndexTo,B,k,M.makeOverrides(o,S));switch(i.tokenTo.hash){case t.NUSD.hash:return d.populateTransaction.swapAndRedeem(...M.makeEasySubParams(l,this.chainId,t.NUSD),a.tokenIndexFrom,0,o,h,m);case t.GMX.hash:let v=M.makeEasyParams(l,this.chainId,t.GMX);switch(this.chainId){case e.ARBITRUM:return d.populateTransaction.deposit(...v);default:let[S,_,,O]=v;return this.bridgeInstance.populateTransaction.redeem(S,_,t.GMX.wrapperAddress(this.chainId),O)}default:return r===e.ETH?M.isL2ETHChain(this.chainId)&&i.tokenFrom.swapType==="ETH"?i.tokenFrom.isEqual(t.NETH)?d.populateTransaction.redeem(...M.makeEasyParams(l,this.chainId,t.NETH)):M.isETHLikeToken(i.tokenFrom)?d.populateTransaction.swapAndRedeem(...M.makeEasySubParams(l,this.chainId,t.NETH),a.tokenIndexFrom,0,o,h,m):d.populateTransaction.swapETHAndRedeem(...M.makeEasySubParams(l,this.chainId,t.NETH),a.tokenIndexFrom,0,o,h,m,{value:o}):i.tokenFrom.isEqual(t.NUSD)?d.populateTransaction.redeemAndRemove(...M.makeEasySubParams(l,this.chainId,t.NUSD),o,a.tokenIndexTo,D,m):d.populateTransaction.swapAndRedeemAndRemove(...M.makeEasySubParams(l,this.chainId,t.NUSD),a.tokenIndexFrom,0,o,h,m,a.tokenIndexTo,B,k):i.tokenFrom.isEqual(t.NUSD)?H(t.NUSD):i.tokenFrom.isEqual(t.NETH)?H(t.NETH):i.tokenFrom.swapType==="ETH"?M.isETHLikeToken(i.tokenFrom)?C(t.NETH,!1):d.populateTransaction.swapETHAndRedeemAndSwap(...M.makeEasySubParams(l,this.chainId,t.NETH),a.tokenIndexFrom,0,o,h,m,0,a.tokenIndexTo,B,k,{value:o}):C(t.NUSD,!1)}}makeBridgeTokenArgs(i){let{tokenFrom:a,tokenTo:r,chainIdTo:o}=i,u=(k,h,B)=>k.isEqual(h)?B:k,d=(k,h)=>(B,D)=>[u(B,k,h),u(D,k,h)],T;switch(a.swapType){case"ETH":T=d(t.ETH,t.WETH);break;case"AVAX":T=d(t.AVAX,t.WAVAX);break;case"MOVR":T=d(t.MOVR,t.WMOVR);break;default:T=(k,h)=>[k,h]}[a,r]=T(a,r);let g=(k,h)=>{let B=h;return h.isEqual(t.WETH_E)?B=t.AVWETH:h.isEqual(t.ETH)?B=t.WETH:h.isWrappedToken&&(B=h.underlyingToken),k.isEqual(B)},y=(k,h)=>{let B=Y.bridgeSwappableTypePoolsByChain[k]?.[h.swapType]?.poolTokens,D=B.findIndex(H=>g(H,h));return[B,D]},[l,f]=y(this.chainId,a),[w,m]=y(o,r);return{fromChainTokens:l,toChainTokens:w,tokenFrom:a,tokenTo:r,tokenIndexFrom:f,tokenIndexTo:m}}}R.SynapseBridge=n;let s={[e.ETH]:7,[e.OPTIMISM]:1,[e.BSC]:14,[e.POLYGON]:128,[e.FANTOM]:5,[e.BOBA]:1,[e.MOONBEAM]:21,[e.MOONRIVER]:21,[e.ARBITRUM]:40,[e.AVALANCHE]:5,[e.HARMONY]:1};function p(I){let i=I instanceof X.Network?I.chainId:I;return s[i]??-1}R.getRequiredConfirmationsForBridge=p})(_e||={});var{synapseBridge:zn,l1BridgeZap:Kn,l2BridgeZap:$n}=$;module.exports=wn(Jn);0&&(module.exports={BaseToken,Bridge,ChainId,Networks,Slippages,SwapPools,Tokens,UnsupportedSwapReason,WrappedToken,allNetworksSwapTokensMap,detailedTokenSwapMap,l1BridgeZap,l2BridgeZap,networkSwapTokensMap,newL1BridgeZapInstance,newL2BridgeZapInstance,newSynapseBridgeInstance,supportedChainIds,supportedNetworks,swappableTokens,swappableTokensAllNetworks,synapseBridge});
//# sourceMappingURL=index.js.map
