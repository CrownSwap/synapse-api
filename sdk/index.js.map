{
  "version": 3,
  "sources": ["../src/index.ts", "../src/internal/gen/factories/BridgeConfig__factory.ts", "../src/internal/gen/factories/ERC20__factory.ts", "../src/internal/gen/factories/L1BridgeZap__factory.ts", "../src/internal/gen/factories/L2BridgeZap__factory.ts", "../src/internal/gen/factories/SynapseBridge__factory.ts", "../src/internal/gen/factories/SynapseERC20__factory.ts", "../src/common/chainid.ts", "../src/abis/SynapseBridge.ts", "../src/abis/SynapseERC20.ts", "../src/abis/L2BridgeZap.ts", "../src/abis/L1BridgeZap.ts", "../src/abis/index.ts", "../src/common/synapse_contracts.ts", "../src/common/utils.ts", "../src/internal/rpcproviders.ts", "../src/entities.ts", "../src/token.ts", "../src/tokens.ts", "../src/swappools.ts", "../src/common/networks.ts", "../src/bridge/bridge.ts", "../src/bridge/errors.ts", "../src/bridge/erc20.ts", "../src/bridge/gasutils.ts", "../src/bridge/slippages.ts", "../src/bridge/bridgeutils.ts"],
  "sourcesContent": ["export {\n    newSynapseBridgeInstance,\n    newL1BridgeZapInstance,\n    newL2BridgeZapInstance\n} from \"./entities\";\n\nimport {SynapseEntities} from \"./entities\";\n\nexport const {\n    synapseBridge,\n    l1BridgeZap,\n    l2BridgeZap,\n} = SynapseEntities;\n\nimport {Bridge} from \"./bridge/bridge\";\n\nexport {Bridge};\nexport {Slippages} from \"./bridge/slippages\";\nexport {UnsupportedSwapReason} from \"./bridge/errors\";\n\nexport type BridgeOutputEstimate = Bridge.BridgeOutputEstimate;\n\nexport {\n    ChainId,\n    supportedChainIds\n} from \"./common/chainid\";\n\nexport {\n    Networks,\n    supportedNetworks\n} from \"./common/networks\";\n\nexport type {ChainIdTypeMap, AddressMap, DecimalsMap} from \"./common/types\";\n\nexport {BaseToken, WrappedToken} from \"./token\";\nexport type {Token} from \"./token\";\n\nexport {Tokens} from \"./tokens\";\n\nexport {\n    SwapPools,\n    networkSwapTokensMap,\n    allNetworksSwapTokensMap,\n    detailedTokenSwapMap,\n    swappableTokens,\n    swappableTokensAllNetworks,\n} from \"./swappools\";\n\nexport type {\n    DetailedTokenSwapMap,\n    NetworkSwappableTokensMap\n} from \"./swappools\";\n\nexport type {\n    SynapseBridgeContract,\n    GenericZapBridgeContract,\n    L1BridgeZapContract,\n    L2BridgeZapContract,\n    SynapseERC20Contract,\n    BridgeConfigContract\n} from \"./contracts\";\n", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { BridgeConfig, BridgeConfigInterface } from \"../BridgeConfig\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"previousAdminRole\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"newAdminRole\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RoleAdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"BRIDGEMANAGER_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainID\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"calculateSwapFee\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAllTokenIDs\",\n    outputs: [\n      {\n        internalType: \"string[]\",\n        name: \"result\",\n        type: \"string[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"tokenID\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainID\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getToken\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"chainId\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenAddress\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint8\",\n            name: \"tokenDecimals\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxSwap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minSwap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"swapFee\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxSwapFee\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minSwapFee\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"hasUnderlying\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"isUnderlying\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct BridgeConfig.Token\",\n        name: \"token\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainID\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getToken\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"chainId\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenAddress\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint8\",\n            name: \"tokenDecimals\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxSwap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minSwap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"swapFee\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxSwapFee\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minSwapFee\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"hasUnderlying\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"isUnderlying\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct BridgeConfig.Token\",\n        name: \"token\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainID\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getTokenID\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"tokenID\",\n        type: \"string\",\n      },\n    ],\n    name: \"getUnderlyingToken\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"uint256\",\n            name: \"chainId\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"address\",\n            name: \"tokenAddress\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint8\",\n            name: \"tokenDecimals\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxSwap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minSwap\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"swapFee\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"maxSwapFee\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"minSwapFee\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"hasUnderlying\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"isUnderlying\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct BridgeConfig.Token\",\n        name: \"token\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"tokenID\",\n        type: \"string\",\n      },\n    ],\n    name: \"hasUnderlyingToken\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"tokenID\",\n        type: \"string\",\n      },\n    ],\n    name: \"isTokenIDExist\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"tokenID\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainID\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenDecimals\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"maxSwap\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minSwap\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"maxSwapFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minSwapFee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"hasUnderlying\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"isUnderlying\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setTokenConfig\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class BridgeConfig__factory {\n  static readonly abi = _abi;\n  static createInterface(): BridgeConfigInterface {\n    return new utils.Interface(_abi) as BridgeConfigInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): BridgeConfig {\n    return new Contract(address, _abi, signerOrProvider) as BridgeConfig;\n  }\n}\n", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { ERC20, ERC20Interface } from \"../ERC20\";\n\nconst _abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nexport class ERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): ERC20Interface {\n    return new utils.Interface(_abi) as ERC20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {\n    return new Contract(address, _abi, signerOrProvider) as ERC20;\n  }\n}\n", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { L1BridgeZap, L1BridgeZapInterface } from \"../L1BridgeZap\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address payable\",\n        name: \"_wethAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract ISwap\",\n        name: \"_baseSwap\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract ISynapseBridge\",\n        name: \"_synapseBridge\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"WETH_ADDRESS\",\n    outputs: [\n      {\n        internalType: \"address payable\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"baseTokens\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndex\",\n        type: \"uint8\",\n      },\n    ],\n    name: \"calculateRemoveLiquidityOneToken\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"availableTokenAmount\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"deposit\",\n        type: \"bool\",\n      },\n    ],\n    name: \"calculateTokenAmount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"depositAndSwap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"depositETHAndSwap\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeem\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"liquidityAmounts\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minToMint\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"zapAndDeposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"liquidityAmounts\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minToMint\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"liqDeadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapDeadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"zapAndDepositAndSwap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class L1BridgeZap__factory {\n  static readonly abi = _abi;\n  static createInterface(): L1BridgeZapInterface {\n    return new utils.Interface(_abi) as L1BridgeZapInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): L1BridgeZap {\n    return new Contract(address, _abi, signerOrProvider) as L1BridgeZap;\n  }\n}\n", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { L2BridgeZap, L2BridgeZapInterface } from \"../L2BridgeZap\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address payable\",\n        name: \"_wethAddress\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_swapOne\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenOne\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"_swapTwo\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"tokenTwo\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract ISynapseBridge\",\n        name: \"_synapseBridge\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"WETH_ADDRESS\",\n    outputs: [\n      {\n        internalType: \"address payable\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"dx\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"calculateSwap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"depositETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeem\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"liqTokenIndex\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"liqMinAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"liqDeadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeemAndRemove\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeemAndSwap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"dx\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapAndRedeem\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"dx\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"liqTokenIndex\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"liqMinAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"liqDeadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapAndRedeemAndRemove\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"dx\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"swapTokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"swapTokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapMinDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapDeadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapAndRedeemAndSwap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"dx\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapETHAndRedeem\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"dx\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"swapTokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"swapTokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapMinDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapDeadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapETHAndRedeemAndSwap\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"swapMap\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"swapTokensMap\",\n    outputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport class L2BridgeZap__factory {\n  static readonly abi = _abi;\n  static createInterface(): L2BridgeZapInterface {\n    return new utils.Interface(_abi) as L2BridgeZapInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): L2BridgeZap {\n    return new Contract(address, _abi, signerOrProvider) as L2BridgeZap;\n  }\n}\n", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { SynapseBridge, SynapseBridgeInterface } from \"../SynapseBridge\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Paused\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"previousAdminRole\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"newAdminRole\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RoleAdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenDeposit\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenDepositAndSwap\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20Mintable\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"kappa\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"TokenMint\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20Mintable\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"swapSuccess\",\n        type: \"bool\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"kappa\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"TokenMintAndSwap\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenRedeem\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"swapTokenIndex\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapMinAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapDeadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenRedeemAndRemove\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TokenRedeemAndSwap\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"kappa\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"TokenWithdraw\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint8\",\n        name: \"swapTokenIndex\",\n        type: \"uint8\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapMinAmount\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"swapDeadline\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"swapSuccess\",\n        type: \"bool\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"kappa\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"TokenWithdrawAndRemove\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"Unpaused\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"GOVERNANCE_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"NODEGROUP_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"WETH_ADDRESS\",\n    outputs: [\n      {\n        internalType: \"address payable\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"kappas\",\n        type: \"bytes32[]\",\n      },\n    ],\n    name: \"addKappas\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"bridgeVersion\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"chainGasAmount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"deposit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"depositAndSwap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"tokenAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"getFeeBalance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"kappa\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"kappaExists\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address payable\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20Mintable\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"kappa\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address payable\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20Mintable\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract ISwap\",\n        name: \"pool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"kappa\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"mintAndSwap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"paused\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract ERC20Burnable\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeem\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract ERC20Burnable\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"swapTokenIndex\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapMinAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapDeadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeemAndRemove\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"chainId\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract ERC20Burnable\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexFrom\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"tokenIndexTo\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"minDy\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"redeemAndSwap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"setChainGasAmount\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address payable\",\n        name: \"_wethAddress\",\n        type: \"address\",\n      },\n    ],\n    name: \"setWethAddress\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"startBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"kappa\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"withdraw\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"fee\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"contract ISwap\",\n        name: \"pool\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"swapTokenIndex\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapMinAmount\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"swapDeadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"kappa\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"withdrawAndRemove\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"contract IERC20\",\n        name: \"token\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n    ],\n    name: \"withdrawFees\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n];\n\nexport class SynapseBridge__factory {\n  static readonly abi = _abi;\n  static createInterface(): SynapseBridgeInterface {\n    return new utils.Interface(_abi) as SynapseBridgeInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): SynapseBridge {\n    return new Contract(address, _abi, signerOrProvider) as SynapseBridge;\n  }\n}\n", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport { Provider } from \"@ethersproject/providers\";\nimport type { SynapseERC20, SynapseERC20Interface } from \"../SynapseERC20\";\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"previousAdminRole\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"newAdminRole\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"RoleAdminChanged\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleGranted\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n    ],\n    name: \"RoleRevoked\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"DEFAULT_ADMIN_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"MINTER_ROLE\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burnFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"subtractedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleAdmin\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getRoleMember\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"getRoleMemberCount\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"grantRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"hasRole\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"decimals\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"renounceRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"role\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"revokeRole\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class SynapseERC20__factory {\n  static readonly abi = _abi;\n  static createInterface(): SynapseERC20Interface {\n    return new utils.Interface(_abi) as SynapseERC20Interface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): SynapseERC20 {\n    return new Contract(address, _abi, signerOrProvider) as SynapseERC20;\n  }\n}\n", "import {BigNumber, BigNumberish} from \"@ethersproject/bignumber\";\n\nexport namespace ChainId {\n    export const ETH:       number = 1;\n    export const OPTIMISM:  number = 10;\n    export const BSC:       number = 56;\n    export const POLYGON:   number = 137;\n    export const FANTOM:    number = 250;\n    export const BOBA:      number = 288;\n    export const MOONBEAM:  number = 1284;\n    export const MOONRIVER: number = 1285;\n    export const ARBITRUM:  number = 42161;\n    export const AVALANCHE: number = 43114;\n    export const AURORA:    number = 1313161554;\n    export const HARMONY:   number = 1666600000;\n\n    export const asBigNumber = (n: BigNumberish): BigNumber => {\n        return BigNumber.from(n)\n    }\n\n    export const asNumber = (n: BigNumberish): number => {\n        return BigNumber.from(n).toNumber()\n    }\n\n    export const supportedChainIds = (): number[] => [\n        ETH,       OPTIMISM,  BSC,\n        POLYGON,   FANTOM,    BOBA,\n        MOONBEAM,  MOONRIVER, ARBITRUM,\n        AVALANCHE, AURORA,    HARMONY,\n    ]\n}\n\nexport const supportedChainIds = ChainId.supportedChainIds;", "const ABI = {\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Paused\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"previousAdminRole\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"newAdminRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TokenDeposit\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TokenDepositAndSwap\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"contract IERC20Mintable\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"fee\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"kappa\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"TokenMint\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"contract IERC20Mintable\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"fee\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"swapSuccess\",\n          \"type\": \"bool\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"kappa\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"TokenMintAndSwap\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TokenRedeem\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"swapTokenIndex\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"swapMinAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"swapDeadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TokenRedeemAndRemove\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"TokenRedeemAndSwap\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"fee\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"kappa\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"TokenWithdraw\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"fee\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint8\",\n          \"name\": \"swapTokenIndex\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"swapMinAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"swapDeadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"bool\",\n          \"name\": \"swapSuccess\",\n          \"type\": \"bool\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"kappa\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"TokenWithdrawAndRemove\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": false,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"Unpaused\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"DEFAULT_ADMIN_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"GOVERNANCE_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"NODEGROUP_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH_ADDRESS\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address payable\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32[]\",\n          \"name\": \"kappas\",\n          \"type\": \"bytes32[]\"\n        }\n      ],\n      \"name\": \"addKappas\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"bridgeVersion\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"chainGasAmount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"deposit\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"depositAndSwap\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenAddress\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"getFeeBalance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getRoleMember\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleMemberCount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"initialize\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"kappa\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"kappaExists\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address payable\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"contract IERC20Mintable\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"fee\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"kappa\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"mint\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address payable\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"contract IERC20Mintable\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"fee\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract ISwap\",\n          \"name\": \"pool\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"kappa\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"mintAndSwap\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"pause\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"paused\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract ERC20Burnable\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"redeem\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract ERC20Burnable\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"swapTokenIndex\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"swapMinAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"swapDeadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"redeemAndRemove\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract ERC20Burnable\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"redeemAndSwap\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"setChainGasAmount\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address payable\",\n          \"name\": \"_wethAddress\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"setWethAddress\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"startBlockNumber\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"unpause\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"fee\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"kappa\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"withdraw\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"fee\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract ISwap\",\n          \"name\": \"pool\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"swapTokenIndex\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"swapMinAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"swapDeadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"kappa\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"withdrawAndRemove\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"withdrawFees\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"stateMutability\": \"payable\",\n      \"type\": \"receive\"\n    }\n  ],\n  \"devdoc\": {\n    \"kind\": \"dev\",\n    \"methods\": {\n      \"deposit(address,uint256,address,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees*\",\n          \"chainId\": \"which chain to bridge assets onto\",\n          \"to\": \"address on other chain to bridge assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\"\n        }\n      },\n      \"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees\",\n          \"chainId\": \"which chain to bridge assets onto\",\n          \"deadline\": \"latest timestamp to accept this transaction*\",\n          \"minDy\": \"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\",\n          \"to\": \"address on other chain to bridge assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\",\n          \"tokenIndexFrom\": \"the token the user wants to swap from\",\n          \"tokenIndexTo\": \"the token the user wants to swap to\"\n        }\n      },\n      \"getRoleAdmin(bytes32)\": {\n        \"details\": \"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"\n      },\n      \"getRoleMember(bytes32,uint256)\": {\n        \"details\": \"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"\n      },\n      \"getRoleMemberCount(bytes32)\": {\n        \"details\": \"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"\n      },\n      \"grantRole(bytes32,address)\": {\n        \"details\": \"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"\n      },\n      \"hasRole(bytes32,address)\": {\n        \"details\": \"Returns `true` if `account` has been granted `role`.\"\n      },\n      \"mint(address,address,uint256,uint256,bytes32)\": {\n        \"details\": \"This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted\",\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain post-fees\",\n          \"fee\": \"Amount in native token decimals to save to the contract as fees\",\n          \"kappa\": \"kappa*\",\n          \"to\": \"address on other chain to redeem underlying assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\"\n        }\n      },\n      \"mintAndSwap(address,address,uint256,uint256,address,uint8,uint8,uint256,uint256,bytes32)\": {\n        \"details\": \"This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted\",\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain post-fees\",\n          \"deadline\": \"Epoch time of the deadline that the swap is allowed to be executed.\",\n          \"fee\": \"Amount in native token decimals to save to the contract as fees\",\n          \"kappa\": \"kappa*\",\n          \"minDy\": \"Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.\",\n          \"pool\": \"Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\",\n          \"to\": \"address on other chain to redeem underlying assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\",\n          \"tokenIndexFrom\": \"Index of the SynERC20 asset in the pool\",\n          \"tokenIndexTo\": \"Index of the desired final asset\"\n        }\n      },\n      \"paused()\": {\n        \"details\": \"Returns true if the contract is paused, and false otherwise.\"\n      },\n      \"redeem(address,uint256,address,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees*\",\n          \"chainId\": \"which underlying chain to bridge assets onto\",\n          \"to\": \"address on other chain to redeem underlying assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\"\n        }\n      },\n      \"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees\",\n          \"chainId\": \"which underlying chain to bridge assets onto\",\n          \"swapDeadline\": \"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token*\",\n          \"swapMinAmount\": \"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\",\n          \"swapTokenIndex\": \"Specifies which of the underlying LP assets the nodes should attempt to redeem for\",\n          \"to\": \"address on other chain to redeem underlying assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\"\n        }\n      },\n      \"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees\",\n          \"chainId\": \"which underlying chain to bridge assets onto\",\n          \"deadline\": \"latest timestamp to accept this transaction*\",\n          \"minDy\": \"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\",\n          \"to\": \"address on other chain to redeem underlying assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\",\n          \"tokenIndexFrom\": \"the token the user wants to swap from\",\n          \"tokenIndexTo\": \"the token the user wants to swap to\"\n        }\n      },\n      \"renounceRole(bytes32,address)\": {\n        \"details\": \"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"\n      },\n      \"revokeRole(bytes32,address)\": {\n        \"details\": \"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"\n      },\n      \"withdraw(address,address,uint256,uint256,bytes32)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to withdraw\",\n          \"fee\": \"Amount in native token decimals to save to the contract as fees\",\n          \"kappa\": \"kappa*\",\n          \"to\": \"address on chain to send underlying assets to\",\n          \"token\": \"ERC20 compatible token to withdraw from the bridge\"\n        }\n      },\n      \"withdrawAndRemove(address,address,uint256,uint256,address,uint8,uint256,uint256,bytes32)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to withdraw\",\n          \"fee\": \"Amount in native token decimals to save to the contract as fees\",\n          \"kappa\": \"kappa*\",\n          \"pool\": \"Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\",\n          \"swapDeadline\": \"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\",\n          \"swapMinAmount\": \"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\",\n          \"swapTokenIndex\": \"Specifies which of the underlying LP assets the nodes should attempt to redeem for\",\n          \"to\": \"address on chain to send underlying assets to\",\n          \"token\": \"ERC20 compatible token to withdraw from the bridge\"\n        }\n      },\n      \"withdrawFees(address,address)\": {\n        \"params\": {\n          \"to\": \"Address to send the fees to\",\n          \"token\": \"ERC20 token in which fees acccumulated to transfer\"\n        }\n      }\n    },\n    \"version\": 1\n  },\n  \"userdoc\": {\n    \"kind\": \"user\",\n    \"methods\": {\n      \"deposit(address,uint256,address,uint256)\": {\n        \"notice\": \"Relays to nodes to transfers an ERC20 token cross-chain\"\n      },\n      \"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\": {\n        \"notice\": \"Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.\"\n      },\n      \"mint(address,address,uint256,uint256,bytes32)\": {\n        \"notice\": \"Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDeposit event is emitted.\"\n      },\n      \"mintAndSwap(address,address,uint256,uint256,address,uint8,uint8,uint256,uint256,bytes32)\": {\n        \"notice\": \"Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted.\"\n      },\n      \"redeem(address,uint256,address,uint256)\": {\n        \"notice\": \"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\"\n      },\n      \"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)\": {\n        \"notice\": \"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\"\n      },\n      \"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\": {\n        \"notice\": \"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\"\n      },\n      \"withdraw(address,address,uint256,uint256,bytes32)\": {\n        \"notice\": \"Function to be called by the node group to withdraw the underlying assets from the contract\"\n      },\n      \"withdrawAndRemove(address,address,uint256,uint256,address,uint8,uint256,uint256,bytes32)\": {\n        \"notice\": \"Function to be called by the node group to withdraw the underlying assets from the contract\"\n      },\n      \"withdrawFees(address,address)\": {\n        \"notice\": \"withdraw specified ERC20 token fees to a given address\"\n      }\n    },\n    \"version\": 1\n  }\n}\n\nexport default ABI\n", "const ABI = {\n  \"abi\": [\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Approval\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"previousAdminRole\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"newAdminRole\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"RoleAdminChanged\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleGranted\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"RoleRevoked\",\n      \"type\": \"event\"\n    },\n    {\n      \"anonymous\": false,\n      \"inputs\": [\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"from\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": true,\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"indexed\": false,\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"Transfer\",\n      \"type\": \"event\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"DEFAULT_ADMIN_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"DOMAIN_SEPARATOR\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"MINTER_ROLE\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"allowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"approve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"balanceOf\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"burn\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"burnFrom\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"decimals\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"subtractedValue\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"decreaseAllowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleAdmin\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"index\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"getRoleMember\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"getRoleMemberCount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"grantRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"hasRole\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"addedValue\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"increaseAllowance\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"string\",\n          \"name\": \"symbol\",\n          \"type\": \"string\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"decimals\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"initialize\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"mint\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"name\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"nonces\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"owner\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"spender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"value\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"v\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"r\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"s\",\n          \"type\": \"bytes32\"\n        }\n      ],\n      \"name\": \"permit\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"renounceRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"bytes32\",\n          \"name\": \"role\",\n          \"type\": \"bytes32\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"account\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"revokeRole\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"symbol\",\n      \"outputs\": [\n        {\n          \"internalType\": \"string\",\n          \"name\": \"\",\n          \"type\": \"string\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"totalSupply\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transfer\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"sender\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"recipient\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"transferFrom\",\n      \"outputs\": [\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"devdoc\": {\n    \"kind\": \"dev\",\n    \"methods\": {\n      \"DOMAIN_SEPARATOR()\": {\n        \"details\": \"See {IERC20Permit-DOMAIN_SEPARATOR}.\"\n      },\n      \"allowance(address,address)\": {\n        \"details\": \"See {IERC20-allowance}.\"\n      },\n      \"approve(address,uint256)\": {\n        \"details\": \"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"\n      },\n      \"balanceOf(address)\": {\n        \"details\": \"See {IERC20-balanceOf}.\"\n      },\n      \"burn(uint256)\": {\n        \"details\": \"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"\n      },\n      \"burnFrom(address,uint256)\": {\n        \"details\": \"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"\n      },\n      \"decimals()\": {\n        \"details\": \"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"\n      },\n      \"decreaseAllowance(address,uint256)\": {\n        \"details\": \"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"\n      },\n      \"getRoleAdmin(bytes32)\": {\n        \"details\": \"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"\n      },\n      \"getRoleMember(bytes32,uint256)\": {\n        \"details\": \"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"\n      },\n      \"getRoleMemberCount(bytes32)\": {\n        \"details\": \"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"\n      },\n      \"grantRole(bytes32,address)\": {\n        \"details\": \"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"\n      },\n      \"hasRole(bytes32,address)\": {\n        \"details\": \"Returns `true` if `account` has been granted `role`.\"\n      },\n      \"increaseAllowance(address,uint256)\": {\n        \"details\": \"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"\n      },\n      \"initialize(string,string,uint8,address)\": {\n        \"params\": {\n          \"decimals\": \"Token name\",\n          \"name\": \"Token name\",\n          \"owner\": \"admin address to be initialized with\",\n          \"symbol\": \"Token symbol\"\n        }\n      },\n      \"name()\": {\n        \"details\": \"Returns the name of the token.\"\n      },\n      \"nonces(address)\": {\n        \"details\": \"See {IERC20Permit-nonces}.\"\n      },\n      \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n        \"details\": \"See {IERC20Permit-permit}.\"\n      },\n      \"renounceRole(bytes32,address)\": {\n        \"details\": \"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"\n      },\n      \"revokeRole(bytes32,address)\": {\n        \"details\": \"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"\n      },\n      \"symbol()\": {\n        \"details\": \"Returns the symbol of the token, usually a shorter version of the name.\"\n      },\n      \"totalSupply()\": {\n        \"details\": \"See {IERC20-totalSupply}.\"\n      },\n      \"transfer(address,uint256)\": {\n        \"details\": \"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"\n      },\n      \"transferFrom(address,address,uint256)\": {\n        \"details\": \"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"\n      }\n    },\n    \"version\": 1\n  },\n  \"userdoc\": {\n    \"kind\": \"user\",\n    \"methods\": {\n      \"initialize(string,string,uint8,address)\": {\n        \"notice\": \"Initializes this ERC20 contract with the given parameters.\"\n      }\n    },\n    \"version\": 1\n  }\n}\n\nexport default ABI\n", "const ABI = {\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address payable\",\n          \"name\": \"_wethAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_swapOne\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenOne\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_swapTwo\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"address\",\n          \"name\": \"tokenTwo\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"contract ISynapseBridge\",\n          \"name\": \"_synapseBridge\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH_ADDRESS\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address payable\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"dx\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"calculateSwap\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"deposit\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"depositETH\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"redeem\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"liqTokenIndex\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"liqMinAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"liqDeadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"redeemAndRemove\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"redeemAndSwap\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"dx\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"swapAndRedeem\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"dx\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"liqTokenIndex\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"liqMinAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"liqDeadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"swapAndRedeemAndRemove\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"dx\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"swapTokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"swapTokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"swapMinDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"swapDeadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"swapAndRedeemAndSwap\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"dx\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"swapETHAndRedeem\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"dx\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"swapTokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"swapTokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"swapMinDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"swapDeadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"swapETHAndRedeemAndSwap\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"name\": \"swapMap\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"swapTokensMap\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    }\n  ],\n  \"devdoc\": {\n    \"kind\": \"dev\",\n    \"methods\": {\n      \"calculateSwap(address,uint8,uint8,uint256)\": {\n        \"params\": {\n          \"dx\": \"the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\n          \"tokenIndexFrom\": \"the token the user wants to sell\",\n          \"tokenIndexTo\": \"the token the user wants to buy\"\n        },\n        \"returns\": {\n          \"_0\": \"amount of tokens the user will receive\"\n        }\n      },\n      \"deposit(address,uint256,address,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees*\",\n          \"chainId\": \"which underlying chain to bridge assets onto\",\n          \"to\": \"address on other chain to redeem underlying assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\"\n        }\n      },\n      \"depositETH(address,uint256,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees*\",\n          \"chainId\": \"which chain to bridge assets onto\",\n          \"to\": \"address on other chain to bridge assets to\"\n        }\n      },\n      \"redeem(address,uint256,address,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees*\",\n          \"chainId\": \"which underlying chain to bridge assets onto\",\n          \"to\": \"address on other chain to redeem underlying assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\"\n        }\n      },\n      \"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount of (typically) LP token to pass to the nodes to attempt to removeLiquidity() with to redeem for the underlying assets of the LP token\",\n          \"chainId\": \"which underlying chain to bridge assets onto\",\n          \"liqDeadline\": \"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token*\",\n          \"liqMinAmount\": \"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\",\n          \"liqTokenIndex\": \"Specifies which of the underlying LP assets the nodes should attempt to redeem for\",\n          \"to\": \"address on other chain to redeem underlying assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\"\n        }\n      },\n      \"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees\",\n          \"chainId\": \"which underlying chain to bridge assets onto\",\n          \"deadline\": \"latest timestamp to accept this transaction*\",\n          \"minDy\": \"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\",\n          \"to\": \"address on other chain to redeem underlying assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\",\n          \"tokenIndexFrom\": \"the token the user wants to swap from\",\n          \"tokenIndexTo\": \"the token the user wants to swap to\"\n        }\n      }\n    },\n    \"version\": 1\n  },\n  \"userdoc\": {\n    \"kind\": \"user\",\n    \"methods\": {\n      \"calculateSwap(address,uint8,uint8,uint256)\": {\n        \"notice\": \"Calculate amount of tokens you receive on swap\"\n      },\n      \"deposit(address,uint256,address,uint256)\": {\n        \"notice\": \"wraps SynapseBridge redeem()\"\n      },\n      \"depositETH(address,uint256,uint256)\": {\n        \"notice\": \"Wraps SynapseBridge deposit() function to make it compatible w/ ETH -> WETH conversions\"\n      },\n      \"redeem(address,uint256,address,uint256)\": {\n        \"notice\": \"wraps SynapseBridge redeem()\"\n      },\n      \"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)\": {\n        \"notice\": \"Wraps redeemAndRemove on SynapseBridge Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\"\n      },\n      \"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\": {\n        \"notice\": \"Wraps redeemAndSwap on SynapseBridge.sol Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\"\n      }\n    },\n    \"version\": 1\n  }\n}\n\nexport default ABI\n", "const ABI = {\n  \"abi\": [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address payable\",\n          \"name\": \"_wethAddress\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"contract ISwap\",\n          \"name\": \"_baseSwap\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"contract ISynapseBridge\",\n          \"name\": \"_synapseBridge\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"WETH_ADDRESS\",\n      \"outputs\": [\n        {\n          \"internalType\": \"address payable\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"baseTokens\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"tokenAmount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndex\",\n          \"type\": \"uint8\"\n        }\n      ],\n      \"name\": \"calculateRemoveLiquidityOneToken\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"availableTokenAmount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"amounts\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"bool\",\n          \"name\": \"deposit\",\n          \"type\": \"bool\"\n        }\n      ],\n      \"name\": \"calculateTokenAmount\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"deposit\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"depositAndSwap\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"depositETH\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"depositETHAndSwap\",\n      \"outputs\": [],\n      \"stateMutability\": \"payable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"amount\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"redeem\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"liquidityAmounts\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minToMint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"deadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"zapAndDeposit\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"to\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"chainId\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"contract IERC20\",\n          \"name\": \"token\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"uint256[]\",\n          \"name\": \"liquidityAmounts\",\n          \"type\": \"uint256[]\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minToMint\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"liqDeadline\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexFrom\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint8\",\n          \"name\": \"tokenIndexTo\",\n          \"type\": \"uint8\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"minDy\",\n          \"type\": \"uint256\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"swapDeadline\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"zapAndDepositAndSwap\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ],\n  \"devdoc\": {\n    \"details\": \"This contract should be deployed with a base Swap.sol address and a SynapseBridge.sol address, otherwise, it will not function.\",\n    \"kind\": \"dev\",\n    \"methods\": {\n      \"calculateRemoveLiquidityOneToken(uint256,uint8)\": {\n        \"params\": {\n          \"tokenAmount\": \"the amount of LP token to burn\",\n          \"tokenIndex\": \"index of which token will be withdrawn\"\n        },\n        \"returns\": {\n          \"availableTokenAmount\": \"calculated amount of underlying token available to withdraw\"\n        }\n      },\n      \"calculateTokenAmount(uint256[],bool)\": {\n        \"details\": \"This shouldn't be used outside frontends for user estimates.\",\n        \"params\": {\n          \"amounts\": \"an array of token amounts to deposit or withdrawal, corresponding to pooledTokens. The amount should be in each pooled token's native precision.\",\n          \"deposit\": \"whether this is a deposit or a withdrawal\"\n        },\n        \"returns\": {\n          \"_0\": \"token amount the user will receive\"\n        }\n      },\n      \"deposit(address,uint256,address,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees*\",\n          \"chainId\": \"which chain to bridge assets onto\",\n          \"to\": \"address on other chain to bridge assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\"\n        }\n      },\n      \"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees\",\n          \"chainId\": \"which chain to bridge assets onto\",\n          \"deadline\": \"latest timestamp to accept this transaction*\",\n          \"minDy\": \"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\",\n          \"to\": \"address on other chain to bridge assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\",\n          \"tokenIndexFrom\": \"the token the user wants to swap from\",\n          \"tokenIndexTo\": \"the token the user wants to swap to\"\n        }\n      },\n      \"depositETH(address,uint256,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees*\",\n          \"chainId\": \"which chain to bridge assets onto\",\n          \"to\": \"address on other chain to bridge assets to\"\n        }\n      },\n      \"depositETHAndSwap(address,uint256,uint256,uint8,uint8,uint256,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees\",\n          \"chainId\": \"which chain to bridge assets onto\",\n          \"deadline\": \"latest timestamp to accept this transaction*\",\n          \"minDy\": \"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\",\n          \"to\": \"address on other chain to bridge assets to\",\n          \"tokenIndexFrom\": \"the token the user wants to swap from\",\n          \"tokenIndexTo\": \"the token the user wants to swap to\"\n        }\n      },\n      \"redeem(address,uint256,address,uint256)\": {\n        \"params\": {\n          \"amount\": \"Amount in native token decimals to transfer cross-chain pre-fees*\",\n          \"chainId\": \"which chain to bridge assets onto\",\n          \"to\": \"address on other chain to bridge assets to\",\n          \"token\": \"ERC20 compatible token to redeem into the bridge\"\n        }\n      },\n      \"zapAndDeposit(address,uint256,address,uint256[],uint256,uint256)\": {\n        \"params\": {\n          \"chainId\": \"which chain to bridge assets onto\",\n          \"deadline\": \"latest timestamp to accept this transaction*\",\n          \"liquidityAmounts\": \"the amounts of each token to add, in their native precision\",\n          \"minToMint\": \"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\",\n          \"to\": \"address on other chain to bridge assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\"\n        }\n      },\n      \"zapAndDepositAndSwap(address,uint256,address,uint256[],uint256,uint256,uint8,uint8,uint256,uint256)\": {\n        \"params\": {\n          \"chainId\": \"which chain to bridge assets onto\",\n          \"liqDeadline\": \"latest timestamp to accept this transaction\",\n          \"liquidityAmounts\": \"the amounts of each token to add, in their native precision\",\n          \"minDy\": \"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\",\n          \"minToMint\": \"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\",\n          \"swapDeadline\": \"latest timestamp to accept this transaction*\",\n          \"to\": \"address on other chain to bridge assets to\",\n          \"token\": \"ERC20 compatible token to deposit into the bridge\",\n          \"tokenIndexFrom\": \"the token the user wants to swap from\",\n          \"tokenIndexTo\": \"the token the user wants to swap to\"\n        }\n      }\n    },\n    \"title\": \"L1BridgeZap\",\n    \"version\": 1\n  },\n  \"userdoc\": {\n    \"kind\": \"user\",\n    \"methods\": {\n      \"calculateRemoveLiquidityOneToken(uint256,uint8)\": {\n        \"notice\": \"Calculate the amount of underlying token available to withdraw when withdrawing via only single token\"\n      },\n      \"calculateTokenAmount(uint256[],bool)\": {\n        \"notice\": \"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running\"\n      },\n      \"constructor\": \"Constructs the contract, approves each token inside of baseSwap to be used by baseSwap (needed for addLiquidity())\",\n      \"deposit(address,uint256,address,uint256)\": {\n        \"notice\": \"Wraps SynapseBridge deposit() function\"\n      },\n      \"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\": {\n        \"notice\": \"Wraps SynapseBridge depositAndSwap() function\"\n      },\n      \"depositETH(address,uint256,uint256)\": {\n        \"notice\": \"Wraps SynapseBridge deposit() function to make it compatible w/ ETH -> WETH conversions\"\n      },\n      \"depositETHAndSwap(address,uint256,uint256,uint8,uint8,uint256,uint256)\": {\n        \"notice\": \"Wraps SynapseBridge depositAndSwap() function to make it compatible w/ ETH -> WETH conversions\"\n      },\n      \"redeem(address,uint256,address,uint256)\": {\n        \"notice\": \"Wraps SynapseBridge redeem() function\"\n      },\n      \"zapAndDeposit(address,uint256,address,uint256[],uint256,uint256)\": {\n        \"notice\": \"Combines adding liquidity to the given Swap, and calls deposit() on the bridge using that LP token\"\n      },\n      \"zapAndDepositAndSwap(address,uint256,address,uint256[],uint256,uint256,uint8,uint8,uint256,uint256)\": {\n        \"notice\": \"Combines adding liquidity to the given Swap, and calls depositAndSwap() on the bridge using that LP token\"\n      }\n    },\n    \"notice\": \"This contract is responsible for handling user Zaps into the SynapseBridge contract, through the Synapse Swap contracts. It does so It does so by combining the action of addLiquidity() to the base swap pool, and then calling either deposit() or depositAndSwap() on the bridge. This is done in hopes of automating portions of the bridge user experience to users, while keeping the SynapseBridge contract logic small.\",\n    \"version\": 1\n  }\n}\n\nexport default ABI\n", "import SynapseBridgeABI from \"./SynapseBridge\";\nimport SynapseERC20ABI from \"./SynapseERC20\";\nimport L2BridgeZapABI from \"./L2BridgeZap\";\nimport L1BridgeZapABI from \"./L1BridgeZap\";\n\nexport namespace ABIs {\n    export const\n        SynapseBridge = SynapseBridgeABI.abi,\n        L1BridgeZap   = L1BridgeZapABI.abi,\n        L2BridgeZap   = L2BridgeZapABI.abi,\n        SynapseERC20  = SynapseERC20ABI.abi;\n}", "import {ABIs} from \"../abis/index\";\nimport {ContractInterface} from \"@ethersproject/contracts\";\n\n\nexport namespace SynapseContracts {\n    interface abiAndAddress {\n        address: string,\n        abi:     ContractInterface,\n    }\n\n    export class SynapseContract {\n        readonly bridge:      abiAndAddress;\n        readonly bridge_zap:  abiAndAddress;\n\n        constructor(args: {\n            bridge:         string,\n            bridge_zap:     string,\n            isEthMainnet?:  boolean\n        }) {\n            let { bridge, bridge_zap, isEthMainnet=false } = args;\n\n            this.bridge     = { address: bridge, abi: ABIs.SynapseBridge };\n            this.bridge_zap = {\n                address: bridge_zap,\n                abi: isEthMainnet ? ABIs.L1BridgeZap : ABIs.L2BridgeZap,\n            };\n        }\n    }\n\n    export const Ethereum = new SynapseContract({\n        bridge:       \"0x2796317b0fF8538F253012862c06787Adfb8cEb6\",\n        bridge_zap:   \"0x6571d6be3d8460CF5F7d6711Cd9961860029D85F\",\n        isEthMainnet: true,\n    });\n\n    export const Optimism = new SynapseContract({\n        bridge:     \"0xAf41a65F786339e7911F4acDAD6BD49426F2Dc6b\",\n        bridge_zap: \"0x9CD619c50562a38edBdC3451ade7B58CaA71Ab32\",\n    })\n\n    export const BSC = new SynapseContract({\n        bridge:     \"0xd123f70AE324d34A9E76b67a27bf77593bA8749f\",\n        bridge_zap: \"0x749F37Df06A99D6A8E065dd065f8cF947ca23697\",\n    });\n\n    export const Polygon = new SynapseContract({\n        bridge:     \"0x8F5BBB2BB8c2Ee94639E55d5F41de9b4839C1280\",\n        bridge_zap: \"0x1c6aE197fF4BF7BA96c66C5FD64Cb22450aF9cC8\",\n    });\n\n    export const Fantom = new SynapseContract({\n        bridge:     \"0xAf41a65F786339e7911F4acDAD6BD49426F2Dc6b\",\n        bridge_zap: \"0x64B4097bCCD27D49BC2A081984C39C3EeC427a2d\",\n    });\n\n    export const Boba = new SynapseContract({\n        bridge:     \"0x432036208d2717394d2614d6697c46DF3Ed69540\",\n        bridge_zap: \"0x64B4097bCCD27D49BC2A081984C39C3EeC427a2d\",\n    });\n\n    export const Moonbeam = new SynapseContract(({\n        bridge:     \"0x84A420459cd31C3c34583F67E0f0fB191067D32f\",\n        bridge_zap: \"0x73783F028c60D463bc604cc53852C37C31dEC5e9\",\n    }))\n\n    export const Moonriver = new SynapseContract(({\n        bridge:     \"0xaeD5b25BE1c3163c907a471082640450F928DDFE\",\n        bridge_zap: \"0xfA28DdB74b08B2b6430f5F61A1Dd5104268CC29e\",\n    }))\n\n    export const Arbitrum = new SynapseContract({\n        bridge:     \"0x6F4e8eBa4D337f874Ab57478AcC2Cb5BACdc19c9\",\n        bridge_zap: \"0x26532682E1830cDACcCbb7e385Cff6de14dD08D8\",\n    });\n\n    export const Avalanche = new SynapseContract({\n        bridge:     \"0xC05e61d0E7a63D27546389B7aD62FdFf5A91aACE\",\n        bridge_zap: \"0xE85429C97589AD793Ca11A8BC3477C03d27ED140\",\n    });\n\n    export const Aurora = new SynapseContract({\n        bridge:     \"0xaeD5b25BE1c3163c907a471082640450F928DDFE\",\n        bridge_zap: \"0x2D8Ee8d6951cB4Eecfe4a79eb9C2F973C02596Ed\",\n    });\n\n    export const Harmony = new SynapseContract({\n        bridge:     \"0xAf41a65F786339e7911F4acDAD6BD49426F2Dc6b\",\n        bridge_zap: \"0xB729B5bAD4B42f3bDd4A3518a1Cc00178cb5920a\",\n    });\n}", "import {ChainId} from \"./chainid\";\nimport {SynapseContracts} from \"./synapse_contracts\";\n\nimport {Signer} from \"@ethersproject/abstract-signer\";\nimport {PopulatedTransaction, ContractTransaction} from \"@ethersproject/contracts\";\n\n\nexport const rejectPromise = (e: any): Promise<never> => Promise.reject(e instanceof Error ? e : new Error(e))\n\n\nexport const executePopulatedTransaction = (\n    populatedTxn: Promise<PopulatedTransaction>,\n    signer:       Signer,\n): Promise<ContractTransaction> =>\n    populatedTxn\n        .then((populatedTxn: PopulatedTransaction): Promise<ContractTransaction> => signer.sendTransaction(populatedTxn))\n        .catch(rejectPromise)\n\n\nexport function contractAddressFor(chainId: number, key: string): string {\n    const { address } = contractsForChainId(chainId)[key];\n    return address\n}\n\n\nconst CHAINID_CONTRACTS_MAP: {[c: number]: SynapseContracts.SynapseContract} = {\n    [ChainId.ETH]:       SynapseContracts.Ethereum,\n    [ChainId.OPTIMISM]:  SynapseContracts.Optimism,\n    [ChainId.BSC]:       SynapseContracts.BSC,\n    [ChainId.POLYGON]:   SynapseContracts.Polygon,\n    [ChainId.FANTOM]:    SynapseContracts.Fantom,\n    [ChainId.BOBA]:      SynapseContracts.Boba,\n    [ChainId.MOONBEAM]:  SynapseContracts.Moonbeam,\n    [ChainId.MOONRIVER]: SynapseContracts.Moonriver,\n    [ChainId.ARBITRUM]:  SynapseContracts.Arbitrum,\n    [ChainId.AVALANCHE]: SynapseContracts.Avalanche,\n    [ChainId.AURORA]:    SynapseContracts.Aurora,\n    [ChainId.HARMONY]:   SynapseContracts.Harmony,\n}\n\nexport const contractsForChainId = (chainId: number): SynapseContracts.SynapseContract => CHAINID_CONTRACTS_MAP[chainId] ?? null\n\n", "import {JsonRpcProvider} from \"@ethersproject/providers\";\n\nimport {ChainId} from \"../common/chainid\";\n\ninterface RpcProviderMap {[c: number]: JsonRpcProvider}\n\nconst\n    ETH_RPC_URI_ENV:       string = \"ETH_RPC_URI\",\n    OPTIMISM_RPC_URI_ENV:  string = \"OPTIMISM_RPC_URI\",\n    BSC_RPC_URI_ENV:       string = \"BSC_RPC_URI\",\n    POLYGON_RPC_URI_ENV:   string = \"POLYGON_RPC_URI\",\n    FANTOM_RPC_URI_ENV:    string = \"FANTOM_RPC_URI\",\n    BOBA_RPC_URI_ENV:      string = \"BOBA_RPC_URI\",\n    MOONBEAM_RPC_URI_ENV:  string = \"MOONBEAM_RPC_URI\",\n    MOONRIVER_RPC_URI_ENV: string = \"MOONRIVER_RPC_URI\",\n    ARBITRUM_RPC_URI_ENV:  string = \"ARBITRUM_RPC_URI\",\n    AVALANCHE_RPC_URI_ENV: string = \"AVALANCHE_RPC_URI\",\n    AURORA_RPC_URI_ENV:    string = \"AURORA_RPC_URI\",\n    HARMONY_RPC_URI_ENV:   string = \"HARMONY_RPC_URI\";\n\n\nconst ENV_KEY_MAP: {[c: number]: string} = {\n    [ChainId.ETH]:       ETH_RPC_URI_ENV,\n    [ChainId.OPTIMISM]:  OPTIMISM_RPC_URI_ENV,\n    [ChainId.BSC]:       BSC_RPC_URI_ENV,\n    [ChainId.POLYGON]:   POLYGON_RPC_URI_ENV,\n    [ChainId.FANTOM]:    FANTOM_RPC_URI_ENV,\n    [ChainId.BOBA]:      BOBA_RPC_URI_ENV,\n    [ChainId.MOONBEAM]:  MOONBEAM_RPC_URI_ENV,\n    [ChainId.MOONRIVER]: MOONRIVER_RPC_URI_ENV,\n    [ChainId.ARBITRUM]:  ARBITRUM_RPC_URI_ENV,\n    [ChainId.AVALANCHE]: AVALANCHE_RPC_URI_ENV,\n    [ChainId.AURORA]:    AURORA_RPC_URI_ENV,\n    [ChainId.HARMONY]:   HARMONY_RPC_URI_ENV,\n}\n\nconst CHAIN_RPC_URIS: {[c: number]: string} = {\n    [ChainId.ETH]:       \"https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\",\n    [ChainId.OPTIMISM]:  \"https://mainnet.optimism.io\",\n    [ChainId.BSC]:       \"https://bsc-dataseed1.binance.org/\",\n    [ChainId.POLYGON]:   \"https://polygon-rpc.com/\",\n    [ChainId.FANTOM]:    \"https://rpc.ftm.tools/\",\n    [ChainId.BOBA]:      \"https://replica-oolong.boba.network/\",\n    [ChainId.MOONBEAM]:  \"https://rpc.api.moonbeam.network\",\n    [ChainId.MOONRIVER]: \"https://rpc.moonriver.moonbeam.network\",\n    [ChainId.ARBITRUM]:  \"https://arb1.arbitrum.io/rpc\",\n    [ChainId.AVALANCHE]: \"https://api.avax.network/ext/bc/C/rpc\",\n    [ChainId.AURORA]:    \"https://mainnet.aurora.dev\",\n    [ChainId.HARMONY]:   \"https://api.harmony.one/\",\n}\n\n\n\nconst PROVIDERS: RpcProviderMap = ((): RpcProviderMap => {\n    let m: RpcProviderMap = {};\n\n    ChainId.supportedChainIds().map((c) => {\n        m[c] = new JsonRpcProvider(rpcUriForChainId(c));\n    })\n\n    return m\n})()\n\n\nexport function newProviderForNetwork(chainId: number): JsonRpcProvider {\n    return PROVIDERS[chainId] ?? null\n}\n\nexport function rpcUriForChainId(chainId: number): string {\n    return checkEnv(chainId) ?? CHAIN_RPC_URIS[chainId]\n}\n\nfunction checkEnv(chainId: number): string|undefined {\n    const envKey: string = ENV_KEY_MAP[chainId];\n\n    if (envKey in process.env) {\n        return process.env[envKey]\n    }\n\n    return undefined\n}", "import type {\n    SynapseBridgeContract,\n    L1BridgeZapContract,\n    L2BridgeZapContract,\n    GenericZapBridgeContract,\n    BridgeConfigContract,\n} from \"./contracts\";\n\nimport {\n    SynapseBridgeFactory,\n    L1BridgeZapFactory,\n    L2BridgeZapFactory,\n    BridgeConfigFactory,\n} from \"./contracts\";\n\nimport type {SignerOrProvider} from \"./common/types\";\nimport {contractAddressFor} from \"./common/utils\";\nimport {ChainId} from \"./common/chainid\";\nimport {newProviderForNetwork} from \"./internal/rpcproviders\";\n\n\nexport const newSynapseBridgeInstance = (params: {\n    address: string,\n    signerOrProvider?: SignerOrProvider\n}): SynapseBridgeContract => SynapseBridgeFactory.connect(params.address, params.signerOrProvider);\n\n\nexport const newL1BridgeZapInstance = (params: {\n    address: string,\n    signerOrProvider?: SignerOrProvider\n}): L1BridgeZapContract => L1BridgeZapFactory.connect(params.address, params.signerOrProvider);\n\n\nexport const newL2BridgeZapInstance = (params: {\n    address: string,\n    signerOrProvider?: SignerOrProvider\n}): L2BridgeZapContract => L2BridgeZapFactory.connect(params.address, params.signerOrProvider);\n\nexport namespace SynapseEntities {\n    export const bridgeConfigAddress: string = \"0x7fd806049608b7d04076b8187dd773343e0589e6\";\n    // export const bridgeConfigAddress: string = \"0xAE908bb4905bcA9BdE0656CC869d0F23e77875E7\"\n\n    export function synapseBridge(params: {\n        chainId: number,\n        signerOrProvider?: SignerOrProvider\n    }): SynapseBridgeContract {\n        const address: string = contractAddressFor(params.chainId, \"bridge\");\n        return SynapseBridgeFactory.connect(address, params.signerOrProvider);\n    }\n\n    export function l1BridgeZap(params: {\n        chainId: number,\n        signerOrProvider?: SignerOrProvider\n    }): L1BridgeZapContract {\n        const address: string = contractAddressFor(params.chainId, \"bridge_zap\");\n        return L1BridgeZapFactory.connect(address, params.signerOrProvider);\n    }\n\n    export function l2BridgeZap(params: {\n        chainId: number,\n        signerOrProvider?: SignerOrProvider\n    }): L2BridgeZapContract {\n        const address: string = contractAddressFor(params.chainId, \"bridge_zap\");\n        return L2BridgeZapFactory.connect(address, params.signerOrProvider);\n    }\n\n    export function zapBridge(params: {\n        chainId: number,\n        signerOrProvider?: SignerOrProvider\n    }): GenericZapBridgeContract {\n        const address: string = contractAddressFor(params.chainId, \"bridge_zap\");\n\n        if (params.chainId === ChainId.ETH) {\n            return L1BridgeZapFactory.connect(address, params.signerOrProvider)\n        }\n\n        return L2BridgeZapFactory.connect(address, params.signerOrProvider)\n    }\n\n    export function bridgeConfig(): BridgeConfigContract {\n        const provider = newProviderForNetwork(ChainId.ETH);\n        return BridgeConfigFactory.connect(bridgeConfigAddress, provider);\n    }\n}", "import {BigNumber, BigNumberish} from \"@ethersproject/bignumber\";\nimport {parseUnits} from \"@ethersproject/units\";\n\nimport type {AddressMap, DecimalsMap} from \"./common/types\";\n\nimport type {SwapType} from \"./internal/swaptype\"\n\nexport interface IBaseToken {\n    readonly name:      string,\n    readonly symbol:    string,\n    readonly addresses: AddressMap,\n    readonly swapType:  SwapType,\n    readonly hash:      symbol,\n    address: (chainId: number) => string | null\n    decimals: (chainId: number) => number | null\n}\n\nexport interface Token extends IBaseToken {\n    isWrappedToken:   boolean,\n    underlyingToken?: Token,\n    isEqual:          (other: Token) => boolean,\n    valueToWei:       (amt: BigNumberish, chainId: number) => BigNumber,\n    wrapperAddress:   (chainId: number) => string | null\n}\n\n/**\n * Token represents an ERC20 token on Ethereum-based blockchains.\n */\nexport class BaseToken implements Token {\n    readonly name:      string;\n    readonly symbol:    string;\n    readonly addresses: AddressMap = {};\n    readonly swapType:  SwapType;\n    readonly isETH:     boolean;\n    readonly hash:      symbol;\n\n    private readonly wrapperAddresses: AddressMap = {};\n\n\n    protected readonly _decimals: DecimalsMap = {};\n\n    /**\n     * Creates a new Token object with the defined arguments.\n     * @param {Object} args Information about this token, including name, symbol, decimals, and\n     * contract addresses.\n     * @param {string} args.name Name of the token (example, \"USD Circle\")\n     * @param {string} args.symbol Symbol of the token (example, \"USDC\")\n     * @param {number|Object} args.decimals Either a single value, representing the token's ERC20 decimals value on all chains, or\n     * a map in the format of { chain id => decimals for chain }.\n     * If the latter is passed, values for ALL known chains must be provided.\n     * @param {Object} args.addresses Mapping in the format of { chain id => address of token on chain },\n     * providing the address of this token on different chains.\n     * @param {SwapType} args.swapType Swap type of this token\n     */\n    constructor(args: {\n        name:       string,\n        symbol:     string,\n        decimals:   number | DecimalsMap,\n        addresses:  AddressMap,\n        swapType:   SwapType,\n        isETH?:     boolean,\n        wrapperAddresses?: AddressMap,\n    }) {\n        this.name      = args.name;\n        this.symbol    = args.symbol;\n        this.addresses = args.addresses;\n        this.swapType  = args.swapType;\n\n        this.wrapperAddresses = args.wrapperAddresses ?? {};\n\n        if (typeof args.decimals === \"number\") {\n            for (const [k,] of Object.entries(this.addresses)) {\n                this._decimals[k] = args.decimals;\n            }\n        } else {\n            this._decimals = args.decimals;\n        }\n\n        this.isETH = args.isETH ?? false;\n\n        this.hash = Symbol(this.symbol);\n    }\n\n    /**\n     * Returns the address of this token on a given network, or null if\n     * the token does not exist on the passed network.\n     * @param {number} chainId Chain ID\n     * @return {string|null} Token's contract address for the queried network, or null\n     */\n    address(chainId: number): string | null {\n        return this.addresses[chainId] || null\n    }\n\n    wrapperAddress(chainId: number): string | null {\n        return this.wrapperAddresses[chainId] || null\n    }\n\n    decimals(chainId: number): number | null {\n        return this._decimals[chainId] || null\n    }\n\n    isEqual(other: Token): boolean {\n        return this.hash === other.hash\n    }\n\n    valueToWei(amt: BigNumberish, chainId: number): BigNumber {\n        let amtStr: string = BigNumber.from(amt).toString();\n        return parseUnits(amtStr, this.decimals(chainId))\n    }\n\n    get isWrappedToken(): boolean {\n        return false\n    }\n}\n\nexport class WrappedToken extends BaseToken {\n    readonly underlyingToken: BaseToken;\n\n    constructor(args: {\n        name:            string,\n        symbol:          string,\n        decimals:        number | DecimalsMap,\n        addresses:       AddressMap,\n        swapType:        SwapType,\n        underlyingToken: BaseToken,\n        isETH?:          boolean,\n        wrapperAddresses?: AddressMap,\n    }) {\n        let {underlyingToken, ...tokenArgs} = args;\n        super(tokenArgs);\n\n        this.underlyingToken = underlyingToken;\n    }\n\n    get isWrappedToken(): boolean {\n        return true\n    }\n}", "import type {Token} from \"./token\";\n\nimport {\n    BaseToken,\n    WrappedToken,\n} from \"./token\";\n\nimport {ChainId} from \"./common/chainid\";\n\nimport {SwapType} from \"./internal/swaptype\";\n\nexport namespace Tokens {\n    const KEEP_THIS_HERE = new BaseToken({\n        name:      \"\",\n        symbol:    \"\",\n        decimals:  18,\n        addresses: {},\n        swapType:  SwapType.USD,\n    });\n\n    // Stablecoins\n\n    /**\n     * The DAI stablecoin, available on Arbitrum, Avalanche, Binance Smart Chain, Ethereum, and Polygon.\n     */\n    export const DAI = new BaseToken({\n        name:         'Dai',\n        symbol:       'DAI',\n        decimals:     18,\n        addresses: {\n            [ChainId.ETH]:       \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n            [ChainId.BSC]:       \"0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3\",\n            [ChainId.POLYGON]:   \"0x8f3cf7ad23cd3cadbd9735aff958023239c6a063\",\n            [ChainId.BOBA]:      \"0xf74195Bb8a5cf652411867c5C2C5b8C2a402be35\",\n            [ChainId.ARBITRUM]:  \"0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1\",\n            [ChainId.AVALANCHE]: \"0xd586E7F844cEa2F87f50152665BCbc2C279D8d70\",\n            [ChainId.AURORA]:    \"0xe3520349F477A5F6EB06107066048508498A291b\",\n            [ChainId.HARMONY]:   \"0xef977d2f931c1978db5f6747666fa1eacb0d0339\",\n        },\n        swapType: SwapType.USD\n    });\n\n    export const BUSD = new BaseToken({\n        name:        'Binance USD',\n        symbol:      'BUSD',\n        decimals:    18,\n        addresses: {\n            [ChainId.BSC]: \"0xe9e7cea3dedca5984780bafc599bd69add087d56\",\n        },\n        swapType: SwapType.USD\n    });\n\n    export const USDC = new BaseToken({\n        name:   \"USD Circle\",\n        symbol: \"USDC\",\n        decimals: {\n            [ChainId.ETH]:       6,\n            [ChainId.BSC]:       18,\n            [ChainId.POLYGON]:   6,\n            [ChainId.FANTOM]:    6,\n            [ChainId.BOBA]:      6,\n            [ChainId.AVALANCHE]: 6,\n            [ChainId.ARBITRUM]:  6,\n            [ChainId.AURORA]:    6,\n            [ChainId.HARMONY]:   6,\n        },\n        addresses: {\n            [ChainId.ETH]:       \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            [ChainId.BSC]:       \"0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d\",\n            [ChainId.POLYGON]:   \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\n            [ChainId.FANTOM]:    \"0x04068da6c83afcfa0e13ba15a6696662335d5b75\",\n            [ChainId.BOBA]:      \"0x66a2A913e447d6b4BF33EFbec43aAeF87890FBbc\",\n            [ChainId.ARBITRUM]:  \"0xff970a61a04b1ca14834a43f5de4533ebddb5cc8\",\n            [ChainId.AVALANCHE]: \"0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664\",\n            [ChainId.AURORA]:    \"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\",\n            [ChainId.HARMONY]:   \"0x985458e523db3d53125813ed68c274899e9dfab4\",\n        },\n        swapType: SwapType.USD\n    });\n\n    export const USDT = new BaseToken({\n        name:     \"USD Tether\",\n        symbol:   \"USDT\",\n        decimals: {\n            [ChainId.ETH]:       6,\n            [ChainId.BSC]:       18,\n            [ChainId.POLYGON]:   6,\n            [ChainId.FANTOM]:    6,\n            [ChainId.BOBA]:      6,\n            [ChainId.ARBITRUM]:  6,\n            [ChainId.AVALANCHE]: 6,\n            [ChainId.AURORA]:    6,\n            [ChainId.HARMONY]:   6,\n        },\n        addresses: {\n            [ChainId.ETH]:       \"0xdac17f958d2ee523a2206206994597c13d831ec7\",\n            [ChainId.BSC]:       \"0x55d398326f99059ff775485246999027b3197955\",\n            [ChainId.POLYGON]:   \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\",\n            [ChainId.FANTOM]:    \"0x049d68029688eabf473097a2fc38ef61633a3c7a\",\n            [ChainId.BOBA]:      \"0x5DE1677344D3Cb0D7D465c10b72A8f60699C062d\",\n            [ChainId.ARBITRUM]:  \"0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9\",\n            [ChainId.AVALANCHE]: \"0xc7198437980c041c805a1edcba50c1ce5db95118\",\n            [ChainId.AURORA]:    \"0x4988a896b1227218e4A686fdE5EabdcAbd91571f\",\n            [ChainId.HARMONY]:   \"0x3c2b8be99c50593081eaa2a724f0b8285f5aba8f\",\n        },\n        swapType: SwapType.USD\n    });\n\n    export const UST = new BaseToken({\n        symbol:       'UST',\n        name:         'TerraUSD',\n        decimals:     18,\n        addresses: {\n            [ChainId.BSC]: \"0x23396cf899ca06c4472205fc903bdb4de249d6f\",\n        },\n        swapType: SwapType.USD\n    });\n\n    // ETH, ETH wrappers, and nETH :D\n\n    export const ETH = new BaseToken({\n        name:        'Ethereum',\n        symbol:      'ETH',\n        decimals:    18,\n        addresses: {\n            [ChainId.ETH]:      '',\n            [ChainId.OPTIMISM]: '',\n            [ChainId.BOBA]:     '',\n            [ChainId.ARBITRUM]: ''\n        },\n        swapType: SwapType.ETH,\n        isETH:    true,\n    });\n\n    /**\n     * nETH is a token involved in the bridge.\n     */\n    export const NETH = new BaseToken({\n        name:        'Synapse nETH',\n        symbol:      'nETH',\n        decimals:    18,\n        addresses: {\n            [ChainId.OPTIMISM]:  \"0x809DC529f07651bD43A172e8dB6f4a7a0d771036\",\n            [ChainId.FANTOM]:    \"0x67C10C397dD0Ba417329543c1a40eb48AAa7cd00\",\n            [ChainId.BOBA]:      \"0x96419929d7949D6A801A6909c145C8EEf6A40431\",\n            [ChainId.MOONBEAM]:  \"0x3192Ae73315c3634Ffa217f71CF6CBc30FeE349A\",\n            [ChainId.ARBITRUM]:  \"0x3ea9B0ab55F34Fb188824Ee288CeaEfC63cf908e\",\n            [ChainId.AVALANCHE]: \"0x19E1ae0eE35c0404f835521146206595d37981ae\",\n            [ChainId.HARMONY]:   \"0x0b5740c6b4a97f90eF2F0220651Cca420B868FfB\",\n        },\n        swapType: SwapType.ETH\n    });\n\n    export const WETH = new BaseToken({\n        name:         'Wrapped ETH',\n        symbol:       'WETH', // SHOULD BE WETH\n        decimals:     18,\n        addresses: {\n            [ChainId.ETH]:      \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\n            [ChainId.OPTIMISM]: \"0x121ab82b49B2BC4c7901CA46B8277962b4350204\",\n            [ChainId.BOBA]:     \"0xd203De32170130082896b4111eDF825a4774c18E\",\n            [ChainId.ARBITRUM]: \"0x82af49447d8a07e3bd95bd0d56f35241523fbab1\",\n        },\n        swapType: SwapType.ETH\n    });\n\n    export const WETHBEAM = new BaseToken({\n        name:     \"Moonbeam Wrapped ETH\",\n        symbol:   \"WETH\",\n        decimals: 18,\n        addresses: {\n            [ChainId.MOONBEAM]: \"0x3192Ae73315c3634Ffa217f71CF6CBc30FeE349A\",\n        },\n        swapType: SwapType.ETH,\n    })\n\n    export const WETH_E = new BaseToken({\n        name:     \"Wrapped Ether\",\n        symbol:   \"WETH.e\",\n        decimals: 18,\n        addresses: {\n            [ChainId.AVALANCHE]: \"0x49d5c2bdffac6ce2bfdb6640f4f80f226bc10bab\",\n        },\n        swapType: SwapType.ETH,\n    })\n\n    export const AVWETH = new BaseToken({\n        name:     \"AAVE Wrapped Ether\",\n        symbol:   \"AVWETH\",\n        decimals: 18,\n        addresses: {\n            [ChainId.AVALANCHE]: \"0x53f7c5869a859f0aec3d334ee8b4cf01e3492f21\",\n        },\n        swapType: SwapType.ETH,\n    })\n\n    export const ONE_ETH = new BaseToken({\n        name:     \"Harmony ETH\",\n        symbol:   \"1ETH\",\n        decimals: 18,\n        addresses: {\n            [ChainId.HARMONY]: \"0x6983d1e6def3690c4d616b13597a09e6193ea013\",\n        },\n        swapType: SwapType.ETH,\n    })\n\n    export const FTM_ETH = new BaseToken({\n        name:     \"Wrapped ETH\",\n        symbol:   \"ETH \",\n        decimals: 18,\n        addresses: {\n            [ChainId.FANTOM]: \"0x74b23882a30290451A17c44f4F05243b6b58C76d\"\n        },\n        swapType: SwapType.ETH,\n    })\n\n    // Synapse tokens\n\n    export const SYN = new BaseToken({\n        name:        'Synapse',\n        symbol:      'SYN',\n        decimals:    18,\n        addresses: {\n            [ChainId.ETH]:       \"0x0f2d719407fdbeff09d87557abb7232601fd9f29\",\n            [ChainId.OPTIMISM]:  \"0x5A5fFf6F753d7C11A56A52FE47a177a87e431655\",\n            [ChainId.BSC]:       \"0xa4080f1778e69467e905b8d6f72f6e441f9e9484\",\n            [ChainId.POLYGON]:   \"0xf8f9efc0db77d8881500bb06ff5d6abc3070e695\",\n            [ChainId.FANTOM]:    \"0xE55e19Fb4F2D85af758950957714292DAC1e25B2\",\n            [ChainId.BOBA]:      \"0xb554A55358fF0382Fb21F0a478C3546d1106Be8c\",\n            [ChainId.MOONBEAM]:  \"0xF44938b0125A6662f9536281aD2CD6c499F22004\",\n            [ChainId.MOONRIVER]: \"0xd80d8688b02B3FD3afb81cDb124F188BB5aD0445\",\n            [ChainId.ARBITRUM]:  \"0x080f6aed32fc474dd5717105dba5ea57268f46eb\",\n            [ChainId.AVALANCHE]: \"0x1f1E7c893855525b303f99bDF5c3c05Be09ca251\",\n            [ChainId.AURORA]:    \"0xd80d8688b02B3FD3afb81cDb124F188BB5aD0445\",\n            [ChainId.HARMONY]:   \"0xE55e19Fb4F2D85af758950957714292DAC1e25B2\",\n        },\n        swapType: SwapType.SYN\n    });\n\n    /**\n     * nUSD is a token involved in the bridge.\n     */\n    export const NUSD = new BaseToken({\n        name:        'Synapse nUSD',\n        symbol:      'nUSD',\n        decimals:    18,\n        addresses: {\n            [ChainId.ETH]:       \"0x1B84765dE8B7566e4cEAF4D0fD3c5aF52D3DdE4F\",\n            [ChainId.BSC]:       \"0x23b891e5c62e0955ae2bd185990103928ab817b3\",\n            [ChainId.POLYGON]:   \"0xb6c473756050de474286bed418b77aeac39b02af\",\n            [ChainId.FANTOM]:    \"0xED2a7edd7413021d440b09D654f3b87712abAB66\",\n            [ChainId.BOBA]:      \"0x6B4712AE9797C199edd44F897cA09BC57628a1CF\",\n            [ChainId.ARBITRUM]:  \"0x2913E812Cf0dcCA30FB28E6Cac3d2DCFF4497688\",\n            [ChainId.AVALANCHE]: \"0xCFc37A6AB183dd4aED08C204D1c2773c0b1BDf46\",\n            [ChainId.AURORA]:    \"0x07379565cD8B0CaE7c60Dc78e7f601b34AF2A21c\",\n            [ChainId.HARMONY]:   \"0xED2a7edd7413021d440b09D654f3b87712abAB66\",\n        },\n        swapType: SwapType.USD,\n    });\n\n    // chain native coins and wrapper tokens\n\n    export const AVAX = new BaseToken({\n        name:     \"Avalanche\",\n        symbol:   \"AVAX\",\n        decimals: 18,\n        addresses: {\n            [ChainId.AVALANCHE]: \"\",\n        },\n        swapType: SwapType.AVAX,\n    })\n\n    export const WAVAX = new WrappedToken({\n        name:     \"Wrapped AVAX\",\n        symbol:   \"wAVAX\",\n        decimals: 18,\n        addresses: {\n            [ChainId.AVALANCHE]: \"0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7\",\n            [ChainId.MOONBEAM]:  \"0xA1f8890E39b4d8E33efe296D698fe42Fb5e59cC3\",\n        },\n        swapType:        SwapType.AVAX,\n        underlyingToken: AVAX,\n    })\n\n    export const MOVR = new BaseToken({\n        name:     \"Moonriver\",\n        symbol:   \"MOVR\",\n        decimals: 18,\n        addresses: {\n            [ChainId.MOONRIVER]: \"\",\n        },\n        swapType: SwapType.MOVR,\n    })\n\n    export const WMOVR  = new WrappedToken({\n        name:     \"Wrapped MOVR\",\n        symbol:   \"wMOVR\",\n        decimals: 18,\n        addresses: {\n            [ChainId.MOONBEAM]:  \"0x1d4C2a246311bB9f827F4C768e277FF5787B7D7E\",\n            [ChainId.MOONRIVER]: \"0x98878b06940ae243284ca214f92bb71a2b032b8a\",\n        },\n        swapType:        SwapType.MOVR,\n        underlyingToken: MOVR,\n    })\n\n    // non-Synapse, non-stablecoin tokens\n\n    export const GOHM = new BaseToken({\n        name:     \"Olympus DAO\",\n        symbol:   \"gOHM\",\n        decimals: 18,\n        addresses: {\n            [ChainId.ETH]:       '0x0ab87046fBb341D058F17CBC4c1133F25a20a52f',\n            [ChainId.BSC]:       '0x88918495892BAF4536611E38E75D771Dc6Ec0863',\n            [ChainId.POLYGON]:   '0xd8cA34fd379d9ca3C6Ee3b3905678320F5b45195',\n            [ChainId.FANTOM]:    '0x91fa20244Fb509e8289CA630E5db3E9166233FDc',\n            [ChainId.BOBA]:      '0xd22C0a4Af486C7FA08e282E9eB5f30F9AaA62C95',\n            [ChainId.MOONBEAM]:  '0xD2666441443DAa61492FFe0F37717578714a4521',\n            [ChainId.MOONRIVER]: '0x3bF21Ce864e58731B6f28D68d5928BcBEb0Ad172',\n            [ChainId.ARBITRUM]:  '0x8D9bA570D6cb60C7e3e0F31343Efe75AB8E65FB1',\n            [ChainId.AVALANCHE]: '0x321E7092a180BB43555132ec53AaA65a5bF84251',\n            [ChainId.HARMONY]:   '0x67C10C397dD0Ba417329543c1a40eb48AAa7cd00',\n        },\n        swapType: SwapType.OHM,\n    });\n\n    export const MIM = new BaseToken({\n        name:         'MIM',\n        symbol:       'MIM',\n        decimals:     18,\n        addresses: {\n            [ChainId.FANTOM]: '0x82f0b8b456c1a451378467398982d4834b6829c1'\n        },\n        swapType: SwapType.USD\n    });\n\n    export const HIGH = new BaseToken({\n        name:    \"Highstreet\",\n        symbol:  \"HIGH\",\n        decimals: 18,\n        addresses: {\n            [ChainId.ETH]: \"0x71Ab77b7dbB4fa7e017BC15090b2163221420282\",\n            [ChainId.BSC]: \"0x5f4bde007dc06b867f86ebfe4802e34a1ffeed63\",\n        },\n        swapType: SwapType.HIGH\n    });\n\n    export const JUMP = new BaseToken({\n        name:    \"HyperJump\",\n        symbol:  \"JUMP\",\n        decimals: 18,\n        addresses: {\n            [ChainId.BSC]:    \"0x130025ee738a66e691e6a7a62381cb33c6d9ae83\",\n            [ChainId.FANTOM]: \"0x78DE9326792ce1d6eCA0c978753c6953Cdeedd73\",\n        },\n        swapType: SwapType.JUMP\n    });\n\n    export const DOG = new BaseToken({\n        name:    \"The Doge NFT\",\n        symbol:  \"DOG\",\n        decimals: 18,\n        addresses: {\n            [ChainId.ETH]: \"0xBAac2B4491727D78D2b78815144570b9f2Fe8899\",\n            [ChainId.BSC]: \"0xaa88c603d142c371ea0eac8756123c5805edee03\",\n            [ChainId.POLYGON]: \"0xeee3371b89fc43ea970e908536fcddd975135d8a\",\n        },\n        swapType: SwapType.DOG\n    });\n\n    export const NFD = new BaseToken({\n        name:         \"Feisty Doge\",\n        symbol:       \"NFD\",\n        decimals:     18,\n        addresses: {\n            [ChainId.BSC]:       \"0x0fe9778c005a5a6115cbe12b0568a2d50b765a51\",   // redeem\n            [ChainId.POLYGON]:   \"0x0a5926027d407222f8fe20f24cb16e103f617046\",   // deposit\n            [ChainId.AVALANCHE]: \"0xf1293574ee43950e7a8c9f1005ff097a9a713959\",   // redeem\n        },\n        swapType: SwapType.NFD,\n    });\n\n    // FRAX/synFrax\n\n    export const FRAX = new BaseToken({\n        name:     'Frax',\n        symbol:   'FRAX',\n        decimals: 18,\n        addresses: {\n            [ChainId.ETH]:       \"0x853d955acef822db058eb8505911ed77f175b99e\",\n            [ChainId.MOONBEAM]:  \"\",\n            [ChainId.MOONRIVER]: \"0x1a93b23281cc1cde4c4741353f3064709a16197d\",\n            [ChainId.HARMONY]:   \"0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200\",\n        },\n        swapType: SwapType.FRAX,\n    });\n\n    export const SYN_FRAX = new BaseToken({\n        name:      'Synapse Frax',\n        symbol:    'synFRAX',\n        decimals:  18,\n        addresses: {\n            [ChainId.FANTOM]:    \"0x1852F70512298d56e9c8FDd905e02581E04ddb2a\",\n            [ChainId.MOONBEAM]:  \"0xDd47A348AB60c61Ad6B60cA8C31ea5e00eBfAB4F\",\n            [ChainId.MOONRIVER]: \"0xE96AC70907ffF3Efee79f502C985A7A21Bce407d\",\n            [ChainId.HARMONY]:   \"0x1852F70512298d56e9c8FDd905e02581E04ddb2a\",\n        },\n        swapType: SwapType.FRAX,\n    })\n\n    export const SOLAR = new BaseToken({\n        name:     \"Vested SolarBeam\",\n        symbol:   \"veSOLAR\",\n        decimals: 18,\n        addresses: {\n            [ChainId.MOONBEAM]:  \"0x0DB6729C03C85B0708166cA92801BcB5CAc781fC\",\n            [ChainId.MOONRIVER]: \"0x76906411D07815491A5E577022757aD941fb5066\",\n        },\n        swapType: SwapType.SOLAR,\n    })\n\n    export const GMX = new BaseToken({\n        name:     \"GMX\",\n        symbol:   \"GMX\",\n        decimals: 18,\n        addresses: {\n            [ChainId.ARBITRUM]:  \"0xfc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a\",\n            [ChainId.AVALANCHE]: \"0x62edc0692bd897d2295872a9ffcac5425011c661\",\n        },\n        wrapperAddresses: {\n            [ChainId.AVALANCHE]: \"0x20A9DC684B4d0407EF8C9A302BEAaA18ee15F656\",\n        },\n        swapType: SwapType.GMX,\n    })\n\n    export const mintBurnTokens: Token[] = [\n        NUSD,  SYN,      NETH,\n        HIGH,  DOG,      JUMP,\n        FRAX,  SYN_FRAX, NFD,\n        GOHM,  SOLAR,    GMX,\n    ];\n\n    export function isMintBurnToken(token: Token): boolean {\n        return mintBurnTokens.map((t) => t.symbol).includes(token.symbol)\n    }\n}", "import {Tokens} from \"./tokens\";\n\nimport {ChainId} from \"./common/chainid\";\nimport {Networks} from \"./common/networks\";\n\nimport type {AddressMap, DecimalsMap} from \"./common/types\";\n\nimport {BaseToken} from \"./token\";\nimport type {Token, IBaseToken} from \"./token\";\n\nimport {SwapType} from \"./internal/swaptype\";\n\n\nexport namespace SwapPools {\n    function moveFirstToLast(arr: Token[]) {\n        return [\n            ...arr.slice(1),\n            arr[0]\n        ]\n    }\n\n    export interface LPToken {\n        readonly poolTokens: Token[],\n        readonly swapType:   SwapType,\n    }\n\n    export interface SwapPoolToken extends IBaseToken, LPToken {\n        readonly baseToken:      BaseToken,\n        readonly poolId:         number,\n        readonly poolName:       string,\n        readonly poolType:       string,\n        readonly nativeTokens?:  Token[],\n        readonly depositTokens?: Token[],\n\n        readonly poolTokensForBridgeSwaps: Token[]\n    }\n\n    interface SwapTokenArgs {\n        name:           string,\n        symbol:         string,\n        decimals:       number | DecimalsMap,\n        addresses:      AddressMap,\n        poolId:         number,\n        poolName:       string,\n        poolType:       SwapType,\n        poolTokens:     Token[],\n        swapAddresses:  AddressMap,\n    }\n\n    interface ETHSwapTokenArgs extends SwapTokenArgs {\n        nativeTokens?:     Token[],\n        depositTokens?:    Token[],\n        swapEthAddresses?: AddressMap,\n    }\n\n    function makeSwapToken(args: {\n        chainId:      number,\n        netName:      string,\n        address:      string,\n        swapAddress:  string,\n        poolId:       number,\n        poolTokens:   Token[],\n        notLP?:       boolean\n    }): SwapToken {\n        args.notLP = args.notLP ?? false;\n\n        return new SwapToken({\n            addresses: {[args.chainId]: args.address},\n            decimals:  18,\n            name:      \"Synapse nUSD LP Token\" + (args.netName != \"BSC\" ? ` ${args.netName}` : \"\"),\n            symbol:    args.notLP ? \"nUSD\" : \"nUSD-LP\",\n            poolName:  `${args.netName} Stableswap Pool `,\n            poolId:    args.poolId,\n            poolType:  SwapType.USD,\n            swapAddresses: {\n                [args.chainId]: args.swapAddress,\n            },\n            poolTokens: args.poolTokens,\n        })\n    }\n\n    function makeETHSwapToken(args: {\n        chainId:         number,\n        netName:         string,\n        address:         string,\n        swapAddress:     string,\n        swapETHAddress?: string,\n        poolId:          number,\n        poolName?:       string,\n        poolTokens:      Token[],\n        nativeTokens?:   Token[],\n        depositTokens?:  Token[],\n    }): ETHSwapToken {\n        return new ETHSwapToken({\n            addresses: {[args.chainId]: args.address},\n            decimals:  18,\n            name:      `Synapse ${args.poolName ?? \"ETH\"} LP Token ${args.netName}`,\n            symbol:    \"nETH-LP\",\n            poolName:  `${args.netName} ${args.poolName ?? \"ETH\"} Pool `,\n            poolId:    args.poolId,\n            poolType:  SwapType.ETH,\n            swapAddresses: {\n                [args.chainId]: args.swapAddress,\n            },\n            swapEthAddresses: {\n                [args.chainId]: args.swapETHAddress,\n            },\n            poolTokens:    args.poolTokens,\n            nativeTokens:  args.nativeTokens,\n            depositTokens: args.depositTokens,\n        })\n    }\n\n    export class SwapToken implements SwapPoolToken {\n        readonly baseToken: BaseToken;\n\n        readonly poolId:   number;\n        readonly poolName: string;\n        readonly poolType: SwapType;\n\n        readonly poolTokens: Token[];\n\n        private readonly swapAddresses: AddressMap = {};\n\n        constructor(args: SwapTokenArgs) {\n            this.baseToken = new BaseToken({\n                name:      args.name,\n                symbol:    args.symbol,\n                decimals:  args.decimals,\n                addresses: args.addresses,\n                swapType:  args.poolType\n            });\n\n            this.poolId = args.poolId;\n            this.poolName = args.poolName;\n            this.poolType = args.poolType;\n            this.swapAddresses = args.swapAddresses;\n            this.poolTokens = args.poolTokens;\n        }\n\n        get name(): string {\n           return this.baseToken.name\n        }\n\n        get symbol(): string {\n            return this.baseToken.symbol\n        }\n\n        get addresses(): {[k: number]: string} {\n            return this.baseToken.addresses\n        }\n\n        get swapType(): SwapType {\n            return this.baseToken.swapType\n        }\n\n        get hash(): symbol {\n            return this.baseToken.hash\n        }\n\n        address(chainId: number): string|null {\n            return this.baseToken.address(chainId)\n        }\n\n        decimals(chainId: number): number | null {\n            return this.baseToken.decimals(chainId)\n        }\n\n        get poolTokensForBridgeSwaps(): Token[] {\n            return moveFirstToLast(this.poolTokens);\n        }\n    }\n\n    export class ETHSwapToken extends SwapToken {\n        readonly nativeTokens:  Token[];\n        readonly depositTokens: Token[];\n\n        private readonly swapEthAddresses?: AddressMap;\n\n        constructor(args: ETHSwapTokenArgs) {\n            let {swapEthAddresses, nativeTokens, depositTokens, ...constructorArgs} = args;\n            super(constructorArgs);\n\n            if (args.swapEthAddresses) {\n                this.swapEthAddresses = args.swapEthAddresses;\n            }\n            if (args.nativeTokens) {\n                this.nativeTokens = args.nativeTokens;\n            }\n\n            if (args.depositTokens) {\n                this.depositTokens = args.depositTokens;\n            }\n        }\n\n        get poolTokensForBridgeSwaps(): Token[] {\n            if (this.depositTokens?.length > 0) {\n                return moveFirstToLast(this.depositTokens)\n            }\n\n            return moveFirstToLast(this.poolTokens);\n        }\n    }\n\n    const USDPoolTokens = (tok: Token = Tokens.DAI, nUSD: boolean = true): Token[] => [\n        ...(nUSD ? [Tokens.NUSD] : []),\n        ...(tok === null ? [] : [tok]),\n        Tokens.USDC,\n        Tokens.USDT,\n    ]\n\n    const\n        USDDaiPool = USDPoolTokens(),\n        USDMIMPool = USDPoolTokens(Tokens.MIM);\n\n    const\n        ETHTokensPool = (t: Token): Token[] => [Tokens.NETH, t],\n        WETHTokenPool: Token[] = ETHTokensPool(Tokens.WETH),\n        ETHTokenPool:  Token[] = ETHTokensPool(Tokens.ETH);\n\n    export const ETH_POOL_SWAP_TOKEN = makeSwapToken({\n        chainId:     ChainId.ETH,\n        address:     Tokens.NUSD.address(ChainId.ETH),\n        netName:     \"Ethereum\",\n        poolId:       420,\n        swapAddress: \"0x1116898DdA4015eD8dDefb84b6e8Bc24528Af2d8\",\n        poolTokens:   USDPoolTokens(Tokens.DAI, false),\n        notLP:        true\n    });\n\n    export const OPTIMISM_ETH_SWAP_TOKEN = makeETHSwapToken({\n        chainId:         ChainId.OPTIMISM,\n        address:        \"0x4619a06ddd3b8f0f951354ec5e75c09cd1cd1aef\",\n        netName:        \"Optimism\",\n        poolId:          0,\n        swapAddress:    \"0xE27BFf97CE92C3e1Ff7AA9f86781FDd6D48F5eE9\",\n        swapETHAddress: \"0x8c7d5f8A8e154e1B59C92D8FB71314A43F32ef7B\",\n        poolTokens:      WETHTokenPool,\n        nativeTokens:    ETHTokenPool,\n    });\n\n    export const BSC_POOL_SWAP_TOKEN = makeSwapToken({\n        chainId:      ChainId.BSC,\n        address:     \"0xa4b7Bc06EC817785170C2DbC1dD3ff86CDcdcc4C\",\n        netName:     \"BSC\",\n        poolId:       1,\n        swapAddress: \"0x28ec0B36F0819ecB5005cAB836F4ED5a2eCa4D13\",\n        poolTokens:   USDPoolTokens(Tokens.BUSD),\n    });\n\n    export const POLYGON_POOL_SWAP_TOKEN = makeSwapToken({\n        chainId:      ChainId.POLYGON,\n        address:     \"0x7479e1bc2f2473f9e78c89b4210eb6d55d33b645\",\n        netName:     \"Polygon\",\n        poolId:       1,\n        swapAddress: \"0x85fCD7Dd0a1e1A9FCD5FD886ED522dE8221C3EE5\",\n        poolTokens:   USDDaiPool,\n    });\n\n    export const FANTOM_POOL_SWAP_TOKEN = makeSwapToken({\n        chainId:      ChainId.FANTOM,\n        address:     \"0x464d121D3cA63cEEfd390D76f19364D3Bd024cD2\",\n        netName:     \"Fantom\",\n        poolId:       1,\n        swapAddress: \"0x2913E812Cf0dcCA30FB28E6Cac3d2DCFF4497688\",\n        poolTokens:   USDMIMPool,\n    });\n\n    export const FANTOM_ETH_SWAP_TOKEN = makeETHSwapToken({\n        chainId:     ChainId.FANTOM,\n        address:     \"0x0e3dD3403ee498694A8f61B04AFed8919F747f77\",\n        netName:     \"Fantom\",\n        poolId:       2,\n        swapAddress: \"0x8D9bA570D6cb60C7e3e0F31343Efe75AB8E65FB1\",\n        poolTokens:   ETHTokensPool(Tokens.FTM_ETH),\n    });\n\n    export const BOBA_POOL_SWAP_TOKEN = makeSwapToken({\n        chainId:      ChainId.BOBA,\n        address:     \"0x9D7283A6AeeD9BCd4Ac70876fEA2b69a63DD8cb9\",\n        netName:     \"Boba\",\n        poolId:       1,\n        swapAddress: \"0x75FF037256b36F15919369AC58695550bE72fead\",\n        poolTokens:   USDDaiPool,\n    });\n\n    export const BOBA_ETH_SWAP_TOKEN = makeETHSwapToken({\n        chainId:        ChainId.BOBA,\n        address:        \"0x498657f2AF18D525049dE520dD86ee376Db9c67c\",\n        netName:        \"Boba\",\n        poolId:          2,\n        swapAddress:    \"0x753bb855c8fe814233d26Bb23aF61cb3d2022bE5\",\n        swapETHAddress: \"0x4F4f66964335D7bef23C16a62Fcd3d1E89f02959\",\n        poolTokens:      WETHTokenPool,\n        nativeTokens:    ETHTokenPool,\n    });\n\n    export const ARBITRUM_POOL_SWAP_TOKEN = makeSwapToken({\n        chainId:      ChainId.ARBITRUM,\n        address:     \"0xADeac0343C2Ac62DFE5A5f51E896AefFF5Ab513E\",\n        netName:     \"Arbitrum\",\n        poolId:       2,\n        swapAddress: \"0x0Db3FE3B770c95A0B99D1Ed6F2627933466c0Dd8\",\n        poolTokens:   USDMIMPool,\n    });\n\n    export const ARBITRUM_ETH_SWAP_TOKEN = makeETHSwapToken({\n        chainId:        ChainId.ARBITRUM,\n        address:        \"0xD70A52248e546A3B260849386410C7170c7BD1E9\",\n        netName:        \"Arbitrum\",\n        poolId:          0,\n        swapAddress:    \"0xa067668661C84476aFcDc6fA5D758C4c01C34352\",\n        swapETHAddress: \"0x1c3fe783a7c06bfAbd124F2708F5Cc51fA42E102\",\n        poolTokens:      WETHTokenPool,\n        nativeTokens:    ETHTokenPool,\n    });\n\n    export const AVALANCHE_POOL_SWAP_TOKEN = makeSwapToken({\n        chainId:      ChainId.AVALANCHE,\n        address:     \"0xCA87BF3ec55372D9540437d7a86a7750B42C02f4\",\n        netName:     \"Avalanche\",\n        poolId:       1,\n        swapAddress: \"0xED2a7edd7413021d440b09D654f3b87712abAB66\",\n        poolTokens:   USDDaiPool,\n    });\n\n    const\n        AVAX_AVWETH_POOLTOKENS = ETHTokensPool(Tokens.AVWETH),\n        AVAX_WETHE_POOLTOKENS  = ETHTokensPool(Tokens.WETH_E);\n\n    export const AVALANCHE_ETH_SWAP_TOKEN = makeETHSwapToken({\n        chainId:        ChainId.AVALANCHE,\n        address:        \"0x5dF1dB940dd8fEE0e0eB0C8917cb50b4dfaDF98c\",\n        netName:        \"Avalanche\",\n        poolId:          2,\n        swapAddress:    \"0x77a7e60555bC18B4Be44C181b2575eee46212d44\",\n        swapETHAddress: \"0xdd60483Ace9B215a7c019A44Be2F22Aa9982652E\",\n        poolTokens:      AVAX_AVWETH_POOLTOKENS,\n        nativeTokens:    AVAX_WETHE_POOLTOKENS,\n        depositTokens:   AVAX_WETHE_POOLTOKENS,\n    });\n\n    export const AURORA_POOL_SWAP_TOKEN = makeSwapToken({\n        chainId:      ChainId.AURORA,\n        address:     \"0xEAdC3524f3F007cdC5104BF28663b1141D3e3127\",\n        netName:     \"Aurora\",\n        poolId:       1,\n        swapAddress: \"0xcEf6C2e20898C2604886b888552CA6CcF66933B0\",\n        poolTokens:   USDPoolTokens(null),\n    });\n\n    export const HARMONY_POOL_SWAP_TOKEN = makeSwapToken({\n        chainId:      ChainId.HARMONY,\n        address:     \"0xE269abBFAF52b26D2632F55B6b223A5223088B96\",\n        netName:     \"Harmony\",\n        poolId:       1,\n        swapAddress: \"0x3ea9B0ab55F34Fb188824Ee288CeaEfC63cf908e\",\n        poolTokens:   USDDaiPool,\n    });\n\n    const ONEETH_POOL_TOKENS = ETHTokensPool(Tokens.ONE_ETH);\n\n    export const HARMONY_ONEETH_TOKEN = makeETHSwapToken({\n        chainId:        ChainId.HARMONY,\n        address:        \"0x464d121D3cA63cEEfd390D76f19364D3Bd024cD2\",\n        netName:        \"Harmony\",\n        poolName:       \"1ETH\",\n        poolId:          1,\n        swapAddress:    \"0x2913E812Cf0dcCA30FB28E6Cac3d2DCFF4497688\",\n        poolTokens:      ONEETH_POOL_TOKENS,\n        nativeTokens:    ONEETH_POOL_TOKENS,\n        depositTokens:   ONEETH_POOL_TOKENS,\n    });\n\n    const\n        makeSingleTokenPool = (t: Token, swapType: SwapType): LPToken => ({poolTokens: [t], swapType}),\n        ETH_Pool     = makeSingleTokenPool(Tokens.ETH,    SwapType.ETH),\n        SYN_Pool     = makeSingleTokenPool(Tokens.SYN,    SwapType.SYN),\n        FRAX_Pool    = makeSingleTokenPool(Tokens.FRAX,   SwapType.FRAX),\n        HIGH_Pool    = makeSingleTokenPool(Tokens.HIGH,   SwapType.HIGH),\n        DOG_Pool     = makeSingleTokenPool(Tokens.DOG,    SwapType.DOG),\n        JUMP_Pool    = makeSingleTokenPool(Tokens.JUMP,   SwapType.JUMP),\n        NFD_Pool     = makeSingleTokenPool(Tokens.NFD,    SwapType.NFD),\n        GOHM_Pool    = makeSingleTokenPool(Tokens.GOHM,   SwapType.OHM),\n        GMX_Pool     = makeSingleTokenPool(Tokens.GMX,    SwapType.GMX),\n        SOLAR_Pool   = makeSingleTokenPool(Tokens.SOLAR,  SwapType.SOLAR),\n        AVAX_Pool    = makeSingleTokenPool(Tokens.AVAX,   SwapType.AVAX),\n        WAVAX_Pool   = makeSingleTokenPool(Tokens.WAVAX,  SwapType.AVAX),\n        MOVR_Pool    = makeSingleTokenPool(Tokens.MOVR,   SwapType.MOVR),\n        WMOVR_Pool   = makeSingleTokenPool(Tokens.WMOVR,  SwapType.MOVR);\n\n    const makeTokenPoolsMap = (usdSwapTokens?: Token[], ethSwapTokens?: Token[], ...pools: LPToken[]): SwapGroupTokenMap => {\n        let m: SwapGroupTokenMap = {\n            [SwapType.SYN]: SYN_Pool.poolTokens,\n        };\n\n        if (usdSwapTokens) {\n            m[SwapType.USD] = usdSwapTokens;\n        }\n\n        if (ethSwapTokens) {\n            m[SwapType.ETH] = ethSwapTokens;\n        }\n\n        for (const p of pools) {\n            m[p.swapType] = p.poolTokens\n        }\n\n        return m\n    }\n\n    export interface SwapGroupTokenMap {\n        [grp: string]: Token[]\n    }\n\n    export interface BridgeTokensBySwapGroupMap {\n        [c: number]: SwapGroupTokenMap\n    }\n\n    export const bridgeSwappableTokensByType: BridgeTokensBySwapGroupMap = {\n        [ChainId.ETH]: makeTokenPoolsMap(\n            [...ETH_POOL_SWAP_TOKEN.poolTokens, Tokens.NUSD],\n            ETH_Pool.poolTokens,\n            HIGH_Pool,\n            DOG_Pool,\n            FRAX_Pool,\n            GOHM_Pool,\n        ),\n        [ChainId.OPTIMISM]: makeTokenPoolsMap(\n            null,\n            OPTIMISM_ETH_SWAP_TOKEN.poolTokens,\n        ),\n        [ChainId.BSC]: makeTokenPoolsMap(\n            BSC_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,\n            null,\n            HIGH_Pool,\n            DOG_Pool,\n            JUMP_Pool,\n            NFD_Pool,\n        ),\n        [ChainId.POLYGON]: makeTokenPoolsMap(\n            POLYGON_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,\n            null,\n            DOG_Pool,\n            NFD_Pool,\n            GOHM_Pool,\n        ),\n        [ChainId.FANTOM]: makeTokenPoolsMap(\n            FANTOM_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,\n            FANTOM_ETH_SWAP_TOKEN.poolTokensForBridgeSwaps,\n            JUMP_Pool,\n            FRAX_Pool,\n            GOHM_Pool,\n        ),\n        [ChainId.BOBA]: makeTokenPoolsMap(\n            BOBA_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,\n            BOBA_ETH_SWAP_TOKEN.poolTokens,\n        ),\n        [ChainId.MOONBEAM]: makeTokenPoolsMap(\n            null,\n            null, // [Tokens.WETHBEAM],\n            SOLAR_Pool,\n            WAVAX_Pool,\n            WMOVR_Pool,\n        ),\n        [ChainId.MOONRIVER]: makeTokenPoolsMap(\n            null,\n            null,\n            FRAX_Pool,\n            GOHM_Pool,\n            SOLAR_Pool,\n            MOVR_Pool,\n        ),\n        [ChainId.ARBITRUM]: makeTokenPoolsMap(\n            ARBITRUM_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,\n            ARBITRUM_ETH_SWAP_TOKEN.poolTokens,\n            GOHM_Pool,\n            GMX_Pool,\n        ),\n        [ChainId.AVALANCHE]: makeTokenPoolsMap(\n            AVALANCHE_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,\n            AVALANCHE_ETH_SWAP_TOKEN.poolTokensForBridgeSwaps,\n            NFD_Pool,\n            GOHM_Pool,\n            GMX_Pool,\n            AVAX_Pool,\n        ),\n        [ChainId.AURORA]:  makeTokenPoolsMap(AURORA_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps),\n        [ChainId.HARMONY]: makeTokenPoolsMap(\n            HARMONY_POOL_SWAP_TOKEN.poolTokensForBridgeSwaps,\n            HARMONY_ONEETH_TOKEN.poolTokensForBridgeSwaps,\n            FRAX_Pool,\n        ),\n    }\n\n    interface SwapTypePoolTokens {[s: string]: {poolTokens: Token[]}}\n\n    function makeSwapTypeTokenPool(poolSwapToken?: LPToken, ethSwapToken?: LPToken, ...pools: LPToken[]): SwapTypePoolTokens {\n        let m: SwapTypePoolTokens = {};\n\n        if (poolSwapToken) {\n            m[SwapType.USD] = poolSwapToken;\n        }\n\n        if (ethSwapToken) {\n            m[SwapType.ETH] = ethSwapToken\n        }\n\n        pools.forEach((s) => m = {...m, [s.swapType]: {poolTokens: s.poolTokens}})\n\n        return m\n    }\n\n    export const bridgeSwappableTypePoolsByChain = {\n        [ChainId.ETH]: makeSwapTypeTokenPool(\n            ETH_POOL_SWAP_TOKEN,\n            null,\n            ETH_Pool,\n            SYN_Pool,\n            HIGH_Pool,\n            DOG_Pool,\n            GOHM_Pool,\n            FRAX_Pool,\n        ),\n        [ChainId.OPTIMISM]: makeSwapTypeTokenPool(\n            null,\n            OPTIMISM_ETH_SWAP_TOKEN,\n            SYN_Pool,\n        ),\n        [ChainId.BSC]: makeSwapTypeTokenPool(\n            BSC_POOL_SWAP_TOKEN,\n            null,\n            SYN_Pool,\n            HIGH_Pool,\n            DOG_Pool,\n            JUMP_Pool,\n            NFD_Pool,\n        ),\n        [ChainId.POLYGON]: makeSwapTypeTokenPool(\n            POLYGON_POOL_SWAP_TOKEN,\n            null,\n            SYN_Pool,\n            NFD_Pool,\n            DOG_Pool,\n            GOHM_Pool,\n        ),\n        [ChainId.FANTOM]: makeSwapTypeTokenPool(\n            FANTOM_POOL_SWAP_TOKEN,\n            FANTOM_ETH_SWAP_TOKEN,\n            SYN_Pool,\n            JUMP_Pool,\n            GOHM_Pool,\n            FRAX_Pool,\n        ),\n        [ChainId.BOBA]: makeSwapTypeTokenPool(\n            BOBA_POOL_SWAP_TOKEN,\n            BOBA_ETH_SWAP_TOKEN,\n            SYN_Pool,\n        ),\n        [ChainId.MOONBEAM]: makeSwapTypeTokenPool(\n            null, null,\n            SYN_Pool,\n            SOLAR_Pool,\n            GOHM_Pool,\n            WMOVR_Pool,\n            WAVAX_Pool,\n        ),\n        [ChainId.MOONRIVER]: makeSwapTypeTokenPool(\n            null, null,\n            SYN_Pool,\n            GOHM_Pool,\n            SOLAR_Pool,\n            FRAX_Pool,\n            MOVR_Pool,\n        ),\n        [ChainId.ARBITRUM]: makeSwapTypeTokenPool(\n            ARBITRUM_POOL_SWAP_TOKEN,\n            ARBITRUM_ETH_SWAP_TOKEN,\n            SYN_Pool,\n            GOHM_Pool,\n            GMX_Pool,\n        ),\n        [ChainId.AVALANCHE]: makeSwapTypeTokenPool(\n            AVALANCHE_POOL_SWAP_TOKEN,\n            AVALANCHE_ETH_SWAP_TOKEN,\n            SYN_Pool,\n            NFD_Pool,\n            GOHM_Pool,\n            GMX_Pool,\n            AVAX_Pool,\n        ),\n        [ChainId.AURORA]: makeSwapTypeTokenPool(\n            AURORA_POOL_SWAP_TOKEN,\n            null,\n            SYN_Pool,\n        ),\n        [ChainId.HARMONY]: makeSwapTypeTokenPool(\n            HARMONY_POOL_SWAP_TOKEN,\n            HARMONY_ONEETH_TOKEN,\n            SYN_Pool,\n            FRAX_Pool,\n        )\n    }\n\n    export function getAllSwappableTokensForNetwork(chainId: number): Token[] {\n        let\n            swappableTokens: Token[] = [],\n            groupsForChain = bridgeSwappableTokensByType[chainId];\n\n        Object.keys(groupsForChain).forEach((grp) => {\n            swappableTokens = [...swappableTokens, ...groupsForChain[grp]];\n        })\n\n        return swappableTokens\n    }\n\n    export const swapGroupsForNetwork = (chainId: number): string[] => Object.keys(bridgeSwappableTokensByType[chainId])\n}\n\nexport interface NetworkSwappableTokensMap {\n    [c: number]: Token[]\n}\n\nexport interface AllNetworksSwappableTokensMap {\n    [c: number]: NetworkSwappableTokensMap\n}\n\nfunction filterGrps(chainAGrps: string[], chainBGrpsMap: SwapPools.SwapGroupTokenMap): Token[] {\n    let tokens: Token[] = [];\n\n    Object.keys(chainBGrpsMap).forEach((grp: string) => {\n        if (chainAGrps.includes(grp)) {\n            tokens = [...tokens, ...chainBGrpsMap[grp]];\n        }\n    })\n\n    return tokens\n}\n\nfunction swapGroupsLoop(chainIdA: number, swapGrps: string[]): NetworkSwappableTokensMap {\n    let res: NetworkSwappableTokensMap = {}\n\n    ChainId.supportedChainIds().forEach((chainId: number) => {\n        if (chainIdA === chainId) {\n            return\n        }\n\n        res[chainId] = filterGrps(swapGrps, SwapPools.bridgeSwappableTokensByType[chainId]);\n    })\n\n    return res\n}\n/**\n * @deprecated Use {@link networkSwapTokensMap} instead.\n */\nexport function swappableTokens(chainIdA: number, chainIdB?: number): NetworkSwappableTokensMap {\n    return networkSwapTokensMap(chainIdA, chainIdB)\n}\n\n/**\n * Returns a map of swappable tokens for two given networks; or, if a second chainid isn't passed,\n * a map of all swappable tokens for the passed chainid between all supported networks.\n * @param chainIdA\n * @param chainIdB Optional second network; if passed, a map of swappable tokens between ONLY chainIdA and chainIdB is returned.\n * @return NetworkSwappableTokensMap\n */\nexport function networkSwapTokensMap(chainIdA: number, chainIdB?: number): NetworkSwappableTokensMap {\n    let res: NetworkSwappableTokensMap = {};\n\n    const swapGrpsA: string[] = SwapPools.swapGroupsForNetwork(chainIdA);\n\n    if (typeof chainIdB !== 'undefined') {\n        res[chainIdB] = filterGrps(swapGrpsA, SwapPools.bridgeSwappableTokensByType[chainIdB]);\n    } else {\n        res = swapGroupsLoop(chainIdA, swapGrpsA);\n    }\n\n    return res\n}\n\n/**\n * @deprecated Use {@link allNetworksSwapTokensMap} instead.\n */\nexport function swappableTokensAllNetworks(): AllNetworksSwappableTokensMap {\n    return allNetworksSwapTokensMap()\n}\n\n/**\n * Returns map of all swappable tokens between all supported networks.\n * @return AllNetworksSwappableTokensMap\n */\nexport function allNetworksSwapTokensMap(): AllNetworksSwappableTokensMap {\n    let res: AllNetworksSwappableTokensMap = {};\n\n    ChainId.supportedChainIds().forEach((chainIdA: number) => {\n        const swapGrpsA: string[] = SwapPools.swapGroupsForNetwork(chainIdA);\n\n        res[chainIdA] = swapGroupsLoop(chainIdA, swapGrpsA);\n    })\n\n    return res\n}\n\nexport interface DetailedTokenSwapMap {\n    [chainId: number]: {\n        token: Token,\n        [chainId: number]: Token[],\n    }[],\n}\n\ninterface TokenSwapMap {\n    token: Token,\n    [chainId: number]: Token[],\n}\n\nexport function detailedTokenSwapMap(): DetailedTokenSwapMap {\n    let res: DetailedTokenSwapMap = {};\n\n    const allChainIds = ChainId.supportedChainIds();\n\n    for (const c1 of allChainIds) {\n        let n1: Networks.Network = Networks.fromChainId(c1);\n        let networkTokens: Token[] = n1.tokens;\n\n        res[c1] = networkTokens.map((t: Token) => {\n            let swapType = t.swapType;\n\n            let tokSwapMap: TokenSwapMap = {\n                token: t,\n            }\n\n            for (const c2 of allChainIds) {\n                if (c1 === c2) continue\n\n                let outToks: Token[] = SwapPools.bridgeSwappableTypePoolsByChain[c2][swapType]?.poolTokens || [];\n                if (outToks.length === 0) continue\n\n                tokSwapMap[c2] = outToks;\n            }\n\n            return tokSwapMap\n        })\n    }\n\n    return res\n}", "import {ChainId} from \"./chainid\";\n\nimport {SwapPools} from \"../swappools\";\nimport type {Token} from \"../token\";\nimport {Tokens} from \"../tokens\";\n\nimport {BigNumberish} from \"@ethersproject/bignumber\";\n\nconst ETH_TOKEN_CHAINS = [\n    ChainId.ETH,\n    ChainId.OPTIMISM,\n    ChainId.FANTOM,\n    ChainId.BOBA,\n    ChainId.MOONBEAM,\n    ChainId.ARBITRUM,\n    ChainId.AVALANCHE,\n];\n\nexport namespace Networks {\n    export class Network {\n        readonly name:            string;\n        readonly names:           string[];\n        readonly chainCurrency:   string;\n        readonly chainId:         number;\n        readonly tokens:          Token[];\n        readonly tokenAddresses:  string[];\n\n        constructor(args: {\n            name:        string,\n            names?:      string[],\n            chainId:     number,\n            chainCurrency: string,\n        }) {\n            this.name = args.name\n            this.names = args.names || [];\n            this.chainId = args.chainId;\n            this.chainCurrency = args.chainCurrency;\n\n            this.tokens         = SwapPools.getAllSwappableTokensForNetwork(this.chainId);\n            this.tokenAddresses = this.tokens.map((t) => t.address(this.chainId));\n        }\n\n        /**\n         * Returns true if the Bridge Zap contract for this network\n         * is a L2BridgeZap contract.\n         * Currently, Ethereum mainnet is the only network for which the\n         * Bridge Zap contract is a NerveBridgeZap contract.\n         */\n        get zapIsL2BridgeZap(): boolean {\n            return this.chainId !== ChainId.ETH\n        }\n\n        /**\n         * Returns true if the passed token is available on this network.\n         * @param {BaseToken|string} token Either an instance of {@link BaseToken}, or the address of a token contract.\n         */\n        supportsToken(token: Token): boolean {\n            let checkSymbol = token.symbol;\n\n            if (checkSymbol === \"ETH\") {\n                return ETH_TOKEN_CHAINS.includes(this.chainId)\n            } else if (token.isEqual(Tokens.WETH) && this.chainId === ChainId.ETH) {\n                return true\n            } else if (token.isEqual(Tokens.AVWETH) && this.chainId === ChainId.AVALANCHE) {\n              return true\n            } else if (token.isEqual(Tokens.WAVAX) && this.chainId === ChainId.AVALANCHE) {\n                return true\n            } else if (token.isEqual(Tokens.WMOVR) && this.chainId === ChainId.MOONRIVER) {\n                return true\n            }\n\n            return this.tokenAddresses.includes(token.address(this.chainId));\n        }\n    }\n\n    export const ETH = new Network({\n        name:          \"Ethereum Mainnet\",\n        chainId:       ChainId.ETH,\n        chainCurrency: \"ETH\"\n    });\n\n    export const OPTIMISM = new Network({\n        name:          \"Optimism\",\n        chainId:       ChainId.OPTIMISM,\n        chainCurrency: \"ETH\"\n    })\n\n    export const BSC = new Network({\n        name:          \"Binance Smart Chain\",\n        chainId:       ChainId.BSC,\n        chainCurrency: \"BNB\",\n    });\n\n    export const POLYGON = new Network({\n        name:          \"Polygon\",\n        chainId:       ChainId.POLYGON,\n        chainCurrency: \"MATIC\",\n    });\n\n    export const FANTOM = new Network({\n        name:          \"Fantom\",\n        chainId:       ChainId.FANTOM,\n        chainCurrency: \"FTM\",\n    });\n\n    export const BOBA = new Network({\n       name:         \"Boba Network\",\n       chainId:       ChainId.BOBA,\n       chainCurrency: \"ETH\",\n    });\n\n    export const MOONBEAM = new Network({\n        name:          \"Moonbeam\",\n        chainId:        ChainId.MOONBEAM,\n        chainCurrency: \"GLMR\",\n    })\n\n    export const MOONRIVER = new Network({\n        name:          \"Moonriver\",\n        chainId:       ChainId.MOONRIVER,\n        chainCurrency: \"MOVR\",\n    });\n\n    export const ARBITRUM = new Network({\n        name:          \"Arbitrum\",\n        chainId:       ChainId.ARBITRUM,\n        chainCurrency: \"ETH\",\n    });\n\n    export const AVALANCHE = new Network({\n        name:          \"Avalanche C-Chain\",\n        chainId:       ChainId.AVALANCHE,\n        chainCurrency: \"AVAX\",\n    });\n\n    export const AURORA = new Network({\n        name:          \"Aurora\",\n        chainId:       ChainId.AURORA,\n        chainCurrency: \"aETH\",\n    });\n\n    export const HARMONY = new Network({\n        name:          \"Harmony\",\n        chainId:       ChainId.HARMONY,\n        chainCurrency: \"ONE\",\n    });\n\n    const CHAINID_NETWORK_MAP: {[c:number]:Network} = {\n        [ChainId.ETH]:        ETH,\n        [ChainId.OPTIMISM]:   OPTIMISM,\n        [ChainId.BSC]:        BSC,\n        [ChainId.POLYGON]:    POLYGON,\n        [ChainId.FANTOM]:     FANTOM,\n        [ChainId.BOBA]:       BOBA,\n        [ChainId.MOONBEAM]:   MOONBEAM,\n        [ChainId.MOONRIVER]:  MOONRIVER,\n        [ChainId.ARBITRUM]:   ARBITRUM,\n        [ChainId.AVALANCHE]:  AVALANCHE,\n        [ChainId.AURORA]:     AURORA,\n        [ChainId.HARMONY]:    HARMONY,\n    }\n\n    export const fromChainId = (chainId: BigNumberish): Network => CHAINID_NETWORK_MAP[ChainId.asNumber(chainId)] ?? null\n\n    /**\n     * Returns true if the passed network supports the passed token.\n     * @param {Network | BigNumberish} network Either a {@link Network} instance, or the Chain ID of a supported network.\n     * @param {BaseToken | string} token Either a {@link BaseToken} instance, or the address of a token contract.\n     */\n    export function networkSupportsToken(network: Network | BigNumberish, token: Token): boolean {\n        network = network instanceof Network ? network : fromChainId(network);\n        return network.supportsToken(token);\n    }\n\n    export const supportedNetworks = (): Network[] => Object.values(CHAINID_NETWORK_MAP)\n}\n\nexport const supportedNetworks = Networks.supportedNetworks;", "import {ChainId} from \"../common/chainid\";\nimport {Networks} from \"../common/networks\";\n\nimport {\n    contractAddressFor,\n    executePopulatedTransaction,\n    rejectPromise,\n} from \"../common/utils\";\n\nimport {SwapType} from \"../internal/swaptype\";\nimport {newProviderForNetwork} from \"../internal/rpcproviders\";\n\nimport {Tokens} from \"../tokens\";\nimport {SwapPools} from \"../swappools\";\nimport {BaseToken, WrappedToken} from \"../token\";\n\nimport {SynapseEntities} from \"../entities\";\n\nimport {GenericZapBridgeContract, L1BridgeZapContract, SynapseBridgeContract} from \"../contracts\";\n\n\nimport type {Token} from \"../token\";\n\n\nimport {Zero} from \"@ethersproject/constants\";\nimport {Signer} from \"@ethersproject/abstract-signer\";\nimport {Provider} from \"@ethersproject/providers\";\nimport {formatUnits} from \"@ethersproject/units\";\nimport {BigNumber, BigNumberish} from \"@ethersproject/bignumber\";\nimport {ContractTransaction, PopulatedTransaction} from \"@ethersproject/contracts\";\n\nimport {UnsupportedSwapReason} from \"./errors\";\n\nimport {\n    ERC20,\n    MAX_APPROVAL_AMOUNT\n} from \"./erc20\";\n\nimport {BridgeUtils} from \"./bridgeutils\";\nimport {GasUtils} from \"./gasutils\";\n\n\n/**\n * Bridge provides a wrapper around common Synapse Bridge interactions, such as output estimation, checking supported swaps/bridges,\n * and most importantly, executing Bridge transactions.\n */\nexport namespace Bridge {\n    type CanBridgeResult = [boolean, Error];\n    export type CheckCanBridgeResult = [boolean, BigNumber];\n\n    export interface BridgeOutputEstimate {\n        amountToReceive: BigNumber,\n        bridgeFee:       BigNumber,\n    }\n\n    /**\n     * @param {BaseToken} tokenFrom {@link BaseToken} user will send to the bridge on the source chain\n     * @param {BaseToken} tokenTo {@link BaseToken} user will receive from the bridge on the destination chain\n     * @param {number} chainIdTo Chain ID of the destination chain\n     * @param {BigNumber} amountFrom not necessarily used by this interface, and overriden in BridgeParamsWithAmounts.\n     */\n    export interface BridgeParams {\n        tokenFrom:   Token,\n        tokenTo:     Token\n        chainIdTo:   number,\n        amountFrom?: BigNumber,\n    }\n\n    /**\n     * @param {BigNumber} amountFrom Amount of tokenFrom (denoted in wei) that the user will send to the bridge on the source chain.\n     * @param {BigNumber} amountTo Amount of tokenTo (denoted in wei) that the user will receive from the bridge on the destination chain.\n     * @param {string} addressTo Optional, user can provide an address other than the one retrieved from signer to receive tokens\n     * on the destination chain.\n     */\n    export interface BridgeTransactionParams extends BridgeParams {\n        amountFrom: BigNumber,\n        amountTo:   BigNumber,\n        addressTo?: string\n    }\n\n    interface BridgeTokenArgs {\n        fromChainTokens: Token[],\n        toChainTokens:   Token[],\n        tokenFrom:       Token,\n        tokenTo:         Token,\n        tokenIndexFrom:  number,\n        tokenIndexTo:    number,\n    }\n\n    /**\n     * SynapseBridge is a wrapper around any Synapse Bridge contract which exists on chains supported by the Synapse Protocol.\n     */\n    export class SynapseBridge {\n        protected network: Networks.Network;\n        protected chainId: number;\n        protected provider: Provider;\n\n        private readonly bridgeAddress: string;\n        private readonly bridgeInstance: SynapseBridgeContract;\n        private readonly networkZapBridgeInstance: GenericZapBridgeContract;\n        private readonly isL2Zap: boolean;\n\n        private readonly zapBridgeAddress: string;\n\n        private readonly bridgeConfigInstance = SynapseEntities.bridgeConfig();\n        private readonly zapBridgeInstance = SynapseEntities.l1BridgeZap({\n            chainId: ChainId.ETH,\n            signerOrProvider: newProviderForNetwork(ChainId.ETH),\n        });\n\n        readonly requiredConfirmations: number;\n\n        constructor(args: {\n            network: Networks.Network | number,\n            provider?: Provider\n        }) {\n            let {network, provider} = args;\n\n            this.network = network instanceof Networks.Network ? network : Networks.fromChainId(network);\n            this.chainId = this.network.chainId;\n            this.provider = provider ?? newProviderForNetwork(this.chainId);\n\n            this.requiredConfirmations = getRequiredConfirmationsForBridge(this.network);\n\n            this.isL2Zap = this.network.zapIsL2BridgeZap;\n\n            let factoryParams = {chainId: this.chainId, signerOrProvider: this.provider};\n            this.bridgeInstance = SynapseEntities.synapseBridge(factoryParams);\n            this.bridgeAddress = contractAddressFor(this.chainId, \"bridge\");\n\n            this.networkZapBridgeInstance = SynapseEntities.zapBridge({ chainId: this.chainId, signerOrProvider: this.provider })\n\n            this.zapBridgeAddress = this.networkZapBridgeInstance.address;\n        }\n\n        bridgeVersion(): Promise<BigNumber> {\n            return this.bridgeInstance.bridgeVersion()\n        }\n\n        WETH_ADDRESS(): Promise<string> {\n            return this.bridgeInstance.WETH_ADDRESS()\n        }\n\n        /**\n         * Returns whether a swap/bridge from this Bridge's chain to another chain between two tokens\n         * is supported.\n         * @param {BaseToken} args.tokenFrom {@link Token} user will send to the bridge\n         * @param {BaseToken} args.tokenTo {@link Token} user will receive from the bridge on the destination chain\n         * @param {number} args.chainIdTo Chain ID of the destination chain\n         * @return boolean value denoting whether the input params constitute a valid swap/bridge, along with a\n         * string value denoting the reason for an unsupported swap, if applicable.\n         */\n        swapSupported(args: {\n            tokenFrom: Token,\n            tokenTo: Token\n            chainIdTo: number,\n        }): [boolean, string] {\n            let {tokenFrom, tokenTo, chainIdTo} = args;\n\n            if (!this.network.supportsToken(tokenFrom)) {\n                return [false, UnsupportedSwapReason.TokenNotSupported_From]\n            }\n\n            if (!Networks.networkSupportsToken(chainIdTo, tokenTo)) {\n                return [false, UnsupportedSwapReason.TokenNotSupported_To]\n            }\n\n            if (tokenFrom.swapType !== tokenTo.swapType) {\n                return [false, UnsupportedSwapReason.NonmatchingSwapTypes]\n            }\n\n            let\n                isEthFromBoba = (this.chainId === ChainId.BOBA) && (tokenFrom.swapType === SwapType.ETH),\n                isEthToBoba = (chainIdTo === ChainId.BOBA) && (tokenTo.swapType === SwapType.ETH);\n\n            if (isEthFromBoba || isEthToBoba) {\n                return [false, UnsupportedSwapReason.ETHOnBOBA]\n            }\n            // if ((this.chainId === ChainId.BOBA) && (tokenFrom.swapType === SwapType.ETH)) {\n            //     if ((chainIdTo === ChainId.ETH) && (tokenTo.isETH)) {\n            //         return [false, UnsupportedSwapReason.BOBAToL1]\n            //     }\n            // }\n\n            return [true, \"\"]\n        }\n\n        /**\n         * Returns the estimated output of a given token on the destination chain were a user to send\n         * some amount of another given token on the source chain.\n         * @param {BridgeParams} args Parameters for the output estimation.\n         * @return {Promise<BridgeOutputEstimate>} Object containing the estimated output of args.tokenTo, as well\n         * as the estimated fee to be taken by the bridge. Note that the estimated output already accounts for the\n         * bridge fee, so the bridge fee is entirely for user-facing purposes. Do not use it for calculations.\n         */\n        async estimateBridgeTokenOutput(args: BridgeParams): Promise<BridgeOutputEstimate> {\n            try {\n                await this.checkSwapSupported(args);\n            } catch (e) {\n                return rejectPromise(e);\n            }\n\n            return this.calculateBridgeRate(args)\n        }\n\n        /**\n         * Returns a populated transaction for initiating a token bridge between this Bridge (the source chain) and the bridge contract on the destination chain.\n         * Note that this function **does not** send a signed transaction.\n         * @param {BridgeTransactionParams} args Parameters for the bridge transaction\n         * @return {Promise<PopulatedTransaction>} Populated transaction instance which can be sent via ones choice\n         * of web3/ethers/etc.\n         */\n        async buildBridgeTokenTransaction(args: BridgeTransactionParams): Promise<PopulatedTransaction> {\n            const\n                {addressTo} = args,\n                tokenArgs = this.makeBridgeTokenArgs(args),\n                {tokenFrom, tokenTo} = tokenArgs;\n\n            if ((!addressTo) || addressTo === \"\") {\n                return rejectPromise(\n                    new Error(\"BridgeTransactionParams.addressTo cannot be empty string or undefined\")\n                )\n            }\n\n            args = {...args, tokenFrom, tokenTo};\n\n            let newTxn: Promise<PopulatedTransaction> = this.chainId === ChainId.ETH\n                ? this.buildETHMainnetBridgeTxn(args, tokenArgs)\n                : this.buildL2BridgeTxn(args, tokenArgs);\n\n            return newTxn\n                .then((txn) => GasUtils.populateGasParams(this.chainId, txn, \"bridge\"))\n                .catch(rejectPromise)\n        }\n\n        /**\n         * Starts the Bridge process between this Bridge (the source chain) and the bridge contract on the destination chain.\n         * Note that this function **does** send a signed transaction.\n         * @param {BridgeTransactionParams} args Parameters for the bridge transaction.\n         * @param {Signer} signer Some instance which implements the Ethersjs {@link Signer} interface.\n         * @return {Promise<ContractTransaction>}\n         */\n        async executeBridgeTokenTransaction(args: BridgeTransactionParams, signer: Signer): Promise<ContractTransaction> {\n            try {\n                await this.checkSwapSupported(args);\n            } catch (e) {\n                return rejectPromise(e);\n            }\n\n            const\n                {tokenFrom, amountFrom, addressTo} = args,\n                signerAddress = await signer.getAddress();\n\n            args.addressTo = addressTo ?? signerAddress\n\n            return this.checkCanBridge({\n                address: signerAddress,\n                token: tokenFrom,\n                amount: amountFrom,\n            })\n                .then((canBridgeRes: CanBridgeResult) => {\n                    const [canBridge, err] = canBridgeRes;\n\n                    if (!canBridge) {\n                        return rejectPromise(err)\n                    }\n\n                    let txnProm = this.buildBridgeTokenTransaction(args);\n\n                    return executePopulatedTransaction(txnProm, signer)\n                })\n                .catch(rejectPromise)\n        }\n\n        /**\n         * Builds an ethers PopulatedTransaction instance for an ERC20 Approve call,\n         * approving some amount of a given token to be spent by the Synapse Bridge on its chain.\n         * The returned PopulatedTransaction must then be passed to the user via Web3 or some other\n         * framework so they can ultimately send the transaction.\n         * Should ALWAYS be called before performing any bridge transactions to ensure they don't fail.\n         * @param {Object} args\n         * @param {BaseToken|string} args.token {@link BaseToken} instance or valid on-chain address of the token the user will be sending\n         * to the bridge on the source chain.\n         * @param {BigNumberish} args.amount Optional, a specific amount of args.token to approve. By default, this function\n         * builds an Approve call using an \"infinite\" approval amount.\n         * @return {Promise<PopulatedTransaction>} Populated transaction instance which can be sent via ones choice\n         * of web3/ethers/etc.\n         */\n        async buildApproveTransaction(args: {\n            token: Token | string,\n            amount?: BigNumberish\n        }): Promise<PopulatedTransaction> {\n            const [approveArgs, tokenAddress] = this.buildERC20ApproveArgs(args);\n\n            return ERC20.buildApproveTransaction(approveArgs, {tokenAddress, chainId: this.chainId})\n        }\n\n        /**\n         * Builds and executes an ERC20 Approve call,\n         * approving some amount of a given token to be spent by the Synapse Bridge on its chain.\n         * The returned PopulatedTransaction must then be passed to the user via Web3 or some other\n         * framework so they can ultimately send the transaction.\n         * Should ALWAYS be called before performing any bridge transactions to ensure they don't fail.\n         * @param {Object} args\n         * @param {BaseToken|string} args.token {@link BaseToken} instance or valid on-chain address of the token the user will be sending\n         * to the bridge on the source chain.\n         * @param {BigNumberish} args.amount Optional, a specific amount of args.token to approve. By default, this function\n         * @param {Signer} signer Valid ethers Signer instance for building a fully and properly populated\n         * transaction.\n         */\n        async executeApproveTransaction(args: {\n            token: Token | string,\n            amount?: BigNumberish\n        }, signer: Signer): Promise<ContractTransaction> {\n            const [approveArgs, tokenAddress] = this.buildERC20ApproveArgs(args);\n\n            return Promise.resolve(\n                ERC20.approve(approveArgs, {tokenAddress, chainId: this.chainId}, signer)\n                    .then((res: ContractTransaction) => res)\n            )\n        }\n\n        async getAllowanceForAddress(args: {\n            address: string,\n            token:   Token,\n        }): Promise<BigNumber> {\n            let { address, token } = args;\n            let tokenAddress = token.address(this.chainId);\n\n            return ERC20.allowanceOf(address, this.zapBridgeAddress, {tokenAddress, chainId: this.chainId})\n        }\n\n        private async checkNeedsApprove(args: {\n            address: string,\n            token: Token | string,\n            amount?: BigNumberish,\n        }): Promise<CheckCanBridgeResult> {\n            let {amount} = args;\n            amount = amount ?? MAX_APPROVAL_AMOUNT.sub(1);\n\n            const {address} = args;\n            const [{spender}, tokenAddress] = this.buildERC20ApproveArgs(args);\n\n            return ERC20.allowanceOf(address, spender, {tokenAddress, chainId: this.chainId})\n                .then((allowance: BigNumber) => {\n                    const res: CheckCanBridgeResult = [allowance.lt(amount), allowance];\n                    return res\n                })\n                .catch(rejectPromise)\n        }\n\n        private async checkHasBalance(args: {\n            address: string,\n            token: Token | string,\n            amount: BigNumberish,\n        }): Promise<CheckCanBridgeResult> {\n            const\n                {address, amount} = args,\n                [, tokenAddress] = this.buildERC20ApproveArgs(args);\n\n            return ERC20.balanceOf(address, {tokenAddress, chainId: this.chainId})\n                .then((balance: BigNumber) => {\n                    const res: CheckCanBridgeResult = [balance.gte(amount), balance];\n                    return res\n                })\n                .catch(rejectPromise)\n        }\n\n        private async checkCanBridge(args: {\n            address: string,\n            token: Token,\n            amount: BigNumberish,\n        }): Promise<CanBridgeResult> {\n            const {token} = args;\n\n            const hasBalanceRes = this.checkHasBalance(args)\n                .then((balanceRes) => {\n                    const [hasBalance, balance] = balanceRes;\n                    if (!hasBalance) {\n                        let balanceEth: string = formatUnits(balance, token.decimals(this.chainId)).toString();\n                        let ret: CanBridgeResult = [false, new Error(`Balance of token ${token.symbol} is too low; current balance is ${balanceEth}`)];\n                        return ret\n                    }\n\n                    let ret: CanBridgeResult = [true, null];\n                    return ret\n                })\n                .catch(rejectPromise)\n\n            return this.checkNeedsApprove(args)\n                .then((approveRes) => {\n                    const [needsApprove, allowance] = approveRes;\n                    if (needsApprove) {\n                        let allowanceEth: string = formatUnits(allowance, token.decimals(this.chainId)).toString();\n                        let ret: CanBridgeResult = [false, new Error(`Spend allowance of Bridge too low for token ${token.symbol}; current allowance for Bridge is ${allowanceEth}`)];\n                        return ret\n                    }\n\n                    return hasBalanceRes\n                })\n                .catch(rejectPromise)\n        }\n\n        private buildERC20ApproveArgs(args: {\n            token: Token | string,\n            amount?: BigNumberish\n        }): [ERC20.ApproveArgs, string] {\n            const {token, amount} = args;\n\n            let tokenAddr: string = (token instanceof BaseToken) || (token instanceof WrappedToken)\n                ? token.address(this.chainId)\n                : token as string;\n\n            return [{\n                spender: this.zapBridgeAddress,\n                amount\n            }, tokenAddr]\n        }\n\n        private async checkSwapSupported(args: BridgeParams): Promise<boolean> {\n            const\n                {chainIdTo, tokenFrom, tokenTo} = args,\n                networkTo = Networks.fromChainId(chainIdTo);\n\n            return new Promise<boolean>((resolve, reject) => {\n                let [swapSupported, errReason] = this.swapSupported({tokenFrom, chainIdTo, tokenTo});\n                if (!swapSupported) {\n                    switch (errReason) {\n                        case UnsupportedSwapReason.TokenNotSupported_From:\n                            reject(`Network '${this.network.name}' does not support token ${tokenFrom.name} (param: tokenFrom)`);\n                            break;\n                        case UnsupportedSwapReason.TokenNotSupported_To:\n                            reject(`Network '${networkTo.name}' (param: chainIdTo) does not support token ${tokenTo.name} (param: tokenTo)`);\n                            break;\n                        case UnsupportedSwapReason.NonmatchingSwapTypes:\n                            reject(`param tokenFrom with swapType '${tokenFrom.swapType}' cannot be bridge to param tokenTo with swapType '${tokenTo.swapType}'`);\n                            break;\n                        default:\n                            reject(errReason);\n                            break;\n                    }\n                }\n\n                resolve(true);\n            })\n        }\n\n        private async calculateBridgeRate(args: BridgeParams): Promise<BridgeOutputEstimate> {\n            let {chainIdTo, amountFrom} = args;\n\n            const toChainZapParams = {chainId: chainIdTo, signerOrProvider: newProviderForNetwork(chainIdTo)};\n            const toChainZap: GenericZapBridgeContract = SynapseEntities.zapBridge(toChainZapParams);\n\n            const {\n                tokenFrom, tokenTo,\n                tokenIndexFrom, tokenIndexTo,\n                fromChainTokens\n            } = this.makeBridgeTokenArgs(args);\n\n            const mintBurnSwapTypes = [\n                SwapType.HIGH, SwapType.DOG, SwapType.JUMP,\n                SwapType.NFD,  SwapType.OHM, SwapType.SOLAR,\n                SwapType.GMX,\n            ];\n\n            let [intermediateToken, bridgeConfigIntermediateToken] = ((): [Token, Token] => {\n                if (mintBurnSwapTypes.includes(tokenFrom.swapType)) {\n                    return [tokenFrom, tokenFrom]\n                }\n\n                switch (tokenFrom.swapType) {\n                    case SwapType.SYN:\n                        return [Tokens.SYN, Tokens.SYN]\n                    case SwapType.FRAX:\n                        if (chainIdTo === ChainId.ETH) {\n                            return [null, Tokens.FRAX]\n                        } else {\n                            return [null, Tokens.SYN_FRAX]\n                        }\n                    case SwapType.ETH:\n                        let intermediate: Token;\n                        if (chainIdTo === ChainId.ETH) {\n                            intermediate = Tokens.WETH;\n                        } else {\n                            intermediate = Tokens.NETH;\n                        }\n\n                        return [Tokens.NETH, intermediate]\n                    case SwapType.AVAX:\n                        return [Tokens.WAVAX, Tokens.WAVAX]\n                    case SwapType.MOVR:\n                        return [Tokens.WMOVR, Tokens.WMOVR]\n                    default:\n                        return [Tokens.NUSD, Tokens.NUSD]\n                }\n            })();\n\n            const bigNumTen = BigNumber.from(10);\n\n            bridgeConfigIntermediateToken = bridgeConfigIntermediateToken ?? intermediateToken;\n            const bridgeFeeRequest = this.bridgeConfigInstance.calculateSwapFee(\n                bridgeConfigIntermediateToken.address(chainIdTo),\n                chainIdTo,\n                amountFrom.mul(bigNumTen.pow(18-tokenFrom.decimals(this.chainId)))\n            );\n\n            const checkEthy = (c: number, t: Token): boolean => BridgeUtils.isL2ETHChain(c) && t.swapType === SwapType.ETH\n\n            const\n                ethToEth:   boolean = this.chainId === ChainId.ETH && checkEthy(chainIdTo,    tokenTo),\n                ethFromEth: boolean = chainIdTo    === ChainId.ETH && checkEthy(this.chainId, tokenFrom);\n\n            let amountToReceive_from: BigNumber;\n            switch (true) {\n                case amountFrom.eq(Zero):\n                    amountToReceive_from = Zero;\n                    break;\n                case ethToEth:\n                case Tokens.isMintBurnToken(tokenFrom):\n                case tokenFrom.isWrappedToken:\n                    amountToReceive_from = amountFrom;\n                    break;\n                case this.chainId === ChainId.ETH:\n                    let liquidityAmounts = fromChainTokens.map((t) => tokenFrom.isEqual(t) ? amountFrom : Zero);\n                    amountToReceive_from = await this.zapBridgeInstance.calculateTokenAmount(liquidityAmounts, true);\n\n                    break;\n                default:\n                    amountToReceive_from = await BridgeUtils.calculateSwapL2Zap(\n                        this.networkZapBridgeInstance,\n                        intermediateToken.address(this.chainId),\n                        tokenIndexFrom,\n                        0,\n                        amountFrom\n                    );\n            }\n\n            let bridgeFee: BigNumber;\n            try {\n                bridgeFee = await bridgeFeeRequest;\n            } catch (e) {\n                console.error(`Error in bridge fee request: ${e}`);\n                return null\n            }\n\n            amountToReceive_from = BridgeUtils.subBigNumSafe(amountToReceive_from, bridgeFee);\n\n            let amountToReceive_to: BigNumber;\n            switch (true) {\n                case amountToReceive_from.isZero():\n                    amountToReceive_to = Zero;\n                    break;\n                case ethFromEth:\n                case Tokens.isMintBurnToken(tokenTo):\n                case tokenTo.isWrappedToken:\n                    amountToReceive_to = amountToReceive_from;\n                    break;\n                case chainIdTo === ChainId.ETH:\n                    amountToReceive_to = await (toChainZap as L1BridgeZapContract)\n                        .calculateRemoveLiquidityOneToken(amountToReceive_from, tokenIndexTo);\n\n                    break;\n                default:\n                    amountToReceive_to = await BridgeUtils.calculateSwapL2Zap(\n                        toChainZap,\n                        intermediateToken.address(chainIdTo),\n                        0,\n                        tokenIndexTo,\n                        amountToReceive_from\n                    );\n            }\n\n            let amountToReceive = amountToReceive_to;\n\n            return {amountToReceive, bridgeFee}\n        }\n\n        private checkEasyArgs(\n            args: BridgeTransactionParams,\n            zapBridge: GenericZapBridgeContract,\n            easyDeposits:    symbol[],\n            easyRedeems:     symbol[],\n            easyDepositETH?: symbol[],\n        ): EasyArgsCheck {\n            let castArgs = args as BridgeUtils.BridgeTxParams;\n\n            if (easyRedeems.includes(args.tokenTo.hash)) {\n                return {\n                    castArgs,\n                    isEasy: true,\n                    txn: zapBridge.populateTransaction.redeem(...BridgeUtils.makeEasyParams(castArgs, this.chainId, args.tokenTo))\n                }\n            } else if (easyDeposits.includes(args.tokenTo.hash)) {\n                return {\n                    castArgs,\n                    isEasy: true,\n                    txn: zapBridge.populateTransaction.deposit(...BridgeUtils.makeEasyParams(castArgs, this.chainId, args.tokenTo))\n                }\n            } else if (easyDepositETH.includes(args.tokenTo.hash)) {\n                return {\n                    castArgs,\n                    isEasy: true,\n                    txn: zapBridge.populateTransaction.depositETH(...BridgeUtils.depositETHParams(castArgs), {value: args.amountFrom})\n                }\n            }\n\n            return {castArgs, isEasy: false}\n        }\n\n        private buildETHMainnetBridgeTxn(\n            args: BridgeTransactionParams,\n            tokenArgs: BridgeTokenArgs\n        ): Promise<PopulatedTransaction> {\n            const\n                {addressTo, chainIdTo, amountFrom, amountTo} = args,\n                zapBridge = SynapseEntities.l1BridgeZap({\n                    chainId: this.chainId,\n                    signerOrProvider: this.provider\n                });\n\n            let\n                easyRedeems:    symbol[] = [Tokens.SYN.hash],\n                easyDeposits:   symbol[] = [Tokens.HIGH.hash, Tokens.DOG.hash, Tokens.FRAX.hash],\n                easyDepositETH: symbol[] = [Tokens.NETH.hash]\n\n            if (args.tokenFrom.isEqual(Tokens.NUSD)) {\n                easyDeposits.push(Tokens.NUSD.hash);\n            }\n\n            let {castArgs, isEasy, txn} = this.checkEasyArgs(args, zapBridge, easyDeposits, easyRedeems, easyDepositETH);\n            if (isEasy && txn) {\n                return txn\n            }\n\n            const {\n                transactionDeadline,\n                bridgeTransactionDeadline,\n                minToSwapDestFromOrigin,\n                minToSwapDest,\n                minToSwapOriginMediumSlippage,\n                minToSwapDestFromOriginMediumSlippage,\n            } = BridgeUtils.getSlippages(amountFrom, amountTo);\n\n            switch (args.tokenTo.hash) {\n                case Tokens.NUSD.hash:\n                    if (!args.tokenFrom.isEqual(Tokens.NUSD)) {\n                        const liquidityAmounts = tokenArgs.fromChainTokens.map((t) => {\n                            return args.tokenFrom.isEqual(t) ? amountFrom : Zero\n                        });\n\n                        return zapBridge.populateTransaction.zapAndDeposit(\n                            addressTo,\n                            chainIdTo,\n                            Tokens.NUSD.address(this.chainId),\n                            liquidityAmounts,\n                            minToSwapDest,\n                            transactionDeadline,\n                        )\n                    }\n                    break;\n                default:\n                    if (BridgeUtils.isETHLikeToken(args.tokenTo) || args.tokenTo.isEqual(Tokens.WETH)) {\n                        return zapBridge.populateTransaction.depositETHAndSwap(\n                            ...BridgeUtils.depositETHParams(castArgs),\n                            0, // nusd tokenindex,\n                            tokenArgs.tokenIndexTo,\n                            minToSwapDestFromOrigin, // minDy\n                            bridgeTransactionDeadline,\n                            {value: amountFrom}\n                        )\n                    }\n\n                    const liquidityAmounts = tokenArgs.fromChainTokens.map((t) => {\n                        return args.tokenFrom.isEqual(t) ? amountFrom : Zero\n                    });\n\n                    return zapBridge.populateTransaction.zapAndDepositAndSwap(\n                        addressTo,\n                        chainIdTo,\n                        Tokens.NUSD.address(this.chainId),\n                        liquidityAmounts,\n                        minToSwapOriginMediumSlippage, // minToSwapOrigin,\n                        transactionDeadline,\n                        0,\n                        tokenArgs.tokenIndexTo,\n                        minToSwapDestFromOriginMediumSlippage, //, minToSwapDestFromOrigin, // minDy\n                        bridgeTransactionDeadline,\n                    )\n            }\n        }\n\n        private buildL2BridgeTxn(\n            args: BridgeTransactionParams,\n            tokenArgs: BridgeTokenArgs\n        ): Promise<PopulatedTransaction> {\n            const\n                {chainIdTo, amountFrom, amountTo} = args,\n                zapBridge = SynapseEntities.l2BridgeZap({\n                    chainId: this.chainId,\n                    signerOrProvider: this.provider\n                });\n\n            if (tokenArgs.tokenFrom.isEqual(Tokens.AVWETH)) {\n                tokenArgs.tokenFrom = Tokens.WETH_E;\n            }\n\n            let\n                easyDeposits:   symbol[] = [],\n                easyRedeems:    symbol[] = [Tokens.SYN.hash, Tokens.HIGH.hash, Tokens.DOG.hash, Tokens.FRAX.hash],\n                easyDepositETH: symbol[] = []\n\n            if (args.tokenFrom.isEqual(Tokens.NUSD)) {\n                easyRedeems.push(Tokens.NUSD.hash);\n            }\n\n            BridgeUtils.DepositIfChainTokens.forEach((args) => {\n                let {chainId, tokens, depositEth, altChainId} = args;\n\n                let\n                    hasAltChain = typeof altChainId !== 'undefined',\n                    tokenHashes = tokens.map((t) => t.hash);\n\n                if (this.chainId === chainId) {\n                    depositEth\n                        ? easyDepositETH.push(...tokenHashes)\n                        : easyDeposits.push(...tokenHashes);\n                } else {\n                    if (hasAltChain) {\n                        if (this.chainId === altChainId) easyRedeems.push(...tokenHashes);\n                    } else {\n                        easyRedeems.push(...tokenHashes);\n                    }\n                }\n            })\n\n            let {castArgs, isEasy, txn} = this.checkEasyArgs(args, zapBridge, easyDeposits, easyRedeems, easyDepositETH);\n            if (isEasy && txn) {\n                return txn\n            }\n\n            const {\n                transactionDeadline,\n                bridgeTransactionDeadline,\n                minToSwapOriginHighSlippage,\n                minToSwapDestFromOriginHighSlippage,\n                minToSwapDest,\n            } = BridgeUtils.getSlippages(amountFrom, amountTo);\n\n            const easyRedeemAndSwap = (baseToken: BaseToken): Promise<PopulatedTransaction> =>\n                zapBridge.populateTransaction.redeemAndSwap(\n                    ...BridgeUtils.makeEasyParams(castArgs, this.chainId, baseToken),\n                    0,\n                    tokenArgs.tokenIndexTo,\n                    minToSwapDest,\n                    transactionDeadline,\n                )\n\n            const easySwapAndRedeemAndSwap = (baseToken: BaseToken, withValueOverride: boolean): Promise<PopulatedTransaction> =>\n                zapBridge.populateTransaction.swapAndRedeemAndSwap(\n                    ...BridgeUtils.makeEasySubParams(castArgs, this.chainId, baseToken),\n                    tokenArgs.tokenIndexFrom,\n                    0,\n                    amountFrom,\n                    minToSwapOriginHighSlippage,\n                    transactionDeadline,\n                    0,\n                    tokenArgs.tokenIndexTo,\n                    minToSwapDestFromOriginHighSlippage, // swapMinAmount\n                    bridgeTransactionDeadline, // toSwapDeadline, // swapDeadline\n                    BridgeUtils.makeOverrides(amountFrom, withValueOverride),\n                )\n\n            switch (args.tokenTo.hash) {\n                case Tokens.NUSD.hash:\n                    return zapBridge.populateTransaction.swapAndRedeem(\n                        ...BridgeUtils.makeEasySubParams(castArgs, this.chainId, Tokens.NUSD),\n                        tokenArgs.tokenIndexFrom,\n                        0,\n                        amountFrom,\n                        minToSwapOriginHighSlippage,\n                        transactionDeadline\n                    )\n                case Tokens.GMX.hash:\n                    let params = BridgeUtils.makeEasyParams(castArgs, this.chainId, Tokens.GMX);\n                    switch (this.chainId) {\n                        case ChainId.ARBITRUM:\n                            return zapBridge.populateTransaction.deposit(...params)\n                        default:\n                            let [addrTo, chainTo,,amount] = params;\n                            return this.bridgeInstance.populateTransaction.redeem(\n                                addrTo,\n                                chainTo,\n                                Tokens.GMX.wrapperAddress(this.chainId),\n                                amount\n                            )\n                    }\n                default:\n                    if (chainIdTo === ChainId.ETH) {\n                        if ((BridgeUtils.isL2ETHChain(this.chainId)) && (args.tokenFrom.swapType === SwapType.ETH)) {\n                            if (args.tokenFrom.isEqual(Tokens.NETH)) {\n                                return zapBridge.populateTransaction.redeem(\n                                    ...BridgeUtils.makeEasyParams(castArgs, this.chainId, Tokens.NETH)\n                                )\n                            } else if (BridgeUtils.isETHLikeToken(args.tokenFrom)) {\n                                return zapBridge.populateTransaction.swapAndRedeem(\n                                    ...BridgeUtils.makeEasySubParams(castArgs, this.chainId, Tokens.NETH),\n                                    tokenArgs.tokenIndexFrom,\n                                    0,\n                                    amountFrom,\n                                    minToSwapOriginHighSlippage, // minToSwapOrigin, // minToSwapOriginHighSlippage,\n                                    transactionDeadline,\n                                )\n                            } else {\n                                return zapBridge.populateTransaction.swapETHAndRedeem(\n                                    ...BridgeUtils.makeEasySubParams(castArgs, this.chainId, Tokens.NETH),\n                                    tokenArgs.tokenIndexFrom,\n                                    0,\n                                    amountFrom,\n                                    minToSwapOriginHighSlippage, // minToSwapOrigin, // minToSwapOriginHighSlippage,\n                                    transactionDeadline,\n                                    {value: amountFrom}\n                                );\n                            }\n                        } else if (args.tokenFrom.isEqual(Tokens.NUSD)) {\n                          return zapBridge.populateTransaction.redeemAndRemove(\n                              ...BridgeUtils.makeEasySubParams(castArgs, this.chainId, Tokens.NUSD),\n                              amountFrom,\n                              tokenArgs.tokenIndexTo,\n                              minToSwapDest,\n                              transactionDeadline,\n                          )\n                        } else {\n                            return zapBridge.populateTransaction.swapAndRedeemAndRemove(\n                                ...BridgeUtils.makeEasySubParams(castArgs, this.chainId, Tokens.NUSD),\n                                tokenArgs.tokenIndexFrom,\n                                0,\n                                amountFrom,\n                                minToSwapOriginHighSlippage,\n                                transactionDeadline,\n                                tokenArgs.tokenIndexTo, //swapTokenIndex\n                                minToSwapDestFromOriginHighSlippage, // swapMinAmount\n                                bridgeTransactionDeadline, // toSwapDeadline, // swapDeadline\n                            )\n                        }\n                    } else {\n                        if (args.tokenFrom.isEqual(Tokens.NUSD)) {\n                            return easyRedeemAndSwap(Tokens.NUSD)\n                        } else if (args.tokenFrom.isEqual(Tokens.NETH)) {\n                            return easyRedeemAndSwap(Tokens.NETH)\n                        } else if (args.tokenFrom.swapType === SwapType.ETH) {\n                            if (BridgeUtils.isETHLikeToken(args.tokenFrom)) {\n                                return easySwapAndRedeemAndSwap(Tokens.NETH, false)\n                            } else {\n                                return zapBridge.populateTransaction.swapETHAndRedeemAndSwap(\n                                    ...BridgeUtils.makeEasySubParams(castArgs, this.chainId, Tokens.NETH),\n                                    tokenArgs.tokenIndexFrom,\n                                    0,\n                                    amountFrom,\n                                    minToSwapOriginHighSlippage,\n                                    transactionDeadline,\n                                    0,\n                                    tokenArgs.tokenIndexTo,\n                                    minToSwapDestFromOriginHighSlippage,\n                                    bridgeTransactionDeadline,\n                                    {value: amountFrom}\n                                )\n                            }\n                        } else {\n                            return easySwapAndRedeemAndSwap(Tokens.NUSD, false)\n                        }\n                    }\n            }\n        }\n\n        private makeBridgeTokenArgs(args: BridgeParams): BridgeTokenArgs {\n            let {tokenFrom, tokenTo, chainIdTo} = args;\n\n            const\n                swapparoo = (t: Token, check: Token, swappy: Token): Token => t.isEqual(check) ? swappy : t,\n                swappadoo = (check: Token, swappy: Token): ((t1: Token, t2: Token) => [Token, Token]) =>\n                    (t1: Token, t2: Token) => [swapparoo(t1, check, swappy), swapparoo(t2, check, swappy)];\n\n            let kangaroo: (t1: Token, t2: Token) => [Token, Token];\n\n            switch (tokenFrom.swapType) {\n                case SwapType.ETH:\n                    kangaroo = swappadoo(Tokens.ETH, Tokens.WETH);\n                    break;\n                case SwapType.AVAX:\n                    kangaroo = swappadoo(Tokens.AVAX, Tokens.WAVAX);\n                    break;\n                case SwapType.MOVR:\n                    kangaroo = swappadoo(Tokens.MOVR, Tokens.WMOVR);\n                    break;\n                default:\n                    kangaroo = (t1: Token, t2: Token) => [t1, t2];\n            }\n\n            [tokenFrom, tokenTo] = kangaroo(tokenFrom, tokenTo);\n\n            const findSymbol = (tokA: Token, tokB: Token): boolean => {\n                let compareTok: Token = tokB;\n\n                if (tokB.isEqual(Tokens.WETH_E)) {\n                    compareTok = Tokens.AVWETH;\n                } else if (tokB.isEqual(Tokens.ETH)) {\n                    compareTok = Tokens.WETH;\n                } else if (tokB.isWrappedToken) {\n                    compareTok = tokB.underlyingToken;\n                }\n\n                return tokA.isEqual(compareTok);\n            }\n\n            const makeTokenArgs = (chainId: number, t: Token): [Token[], number] => {\n                let\n                    toks = SwapPools.bridgeSwappableTypePoolsByChain[chainId]?.[t.swapType]?.poolTokens,\n                    idx  = toks.findIndex((tok: Token) => findSymbol(tok, t));\n\n                return [toks, idx]\n            }\n\n            const\n                [fromChainTokens, tokenIndexFrom] = makeTokenArgs(this.chainId, tokenFrom),\n                [toChainTokens,   tokenIndexTo]   = makeTokenArgs(chainIdTo,    tokenTo);\n\n            return {\n                fromChainTokens,\n                toChainTokens,\n                tokenFrom,\n                tokenTo,\n                tokenIndexFrom,\n                tokenIndexTo\n            }\n        }\n    }\n\n    const REQUIRED_CONFS = {\n        [ChainId.ETH]:       7,\n        [ChainId.OPTIMISM]:  1,\n        [ChainId.BSC]:       14,\n        [ChainId.POLYGON]:   128,\n        [ChainId.FANTOM]:    5,\n        [ChainId.BOBA]:      1,\n        [ChainId.MOONBEAM]:  21,\n        [ChainId.MOONRIVER]: 21,\n        [ChainId.ARBITRUM]:  40,\n        [ChainId.AVALANCHE]: 5,\n        [ChainId.HARMONY]:   1,\n    };\n\n    export function getRequiredConfirmationsForBridge(network: Networks.Network | number): number {\n        let chainId: number = network instanceof Networks.Network ? network.chainId : network;\n\n        return REQUIRED_CONFS[chainId] ?? -1\n    }\n\n    interface EasyArgsCheck {\n        isEasy: boolean,\n        castArgs: BridgeUtils.BridgeTxParams,\n        txn?: Promise<PopulatedTransaction>,\n    }\n}", "export namespace UnsupportedSwapReason {\n    export const\n        TokenNotSupported_From = \"Token not supported on 'from' network\",\n        TokenNotSupported_To   = \"Token not suppoorted on 'to' network\",\n        NonmatchingSwapTypes   = \"Token swap types don't match\",\n        BOBAToL1               = \"Bridging ETH from Boba Mainnet to L1 not currently supported\",\n        ETHOnBOBA              = \"Currently, the SDK only supports bridging Stablecoins to and from BOBA\";\n}", "import {Signer} from \"@ethersproject/abstract-signer\";\nimport {Provider} from \"@ethersproject/providers\";\nimport {BigNumber, BigNumberish} from \"@ethersproject/bignumber\";\nimport {PopulatedTransaction, ContractTransaction} from \"@ethersproject/contracts\";\n\nimport {ERC20Factory, ERC20Contract} from \"../contracts\";\nimport {newProviderForNetwork} from \"../internal/rpcproviders\";\n\nimport {\n    executePopulatedTransaction,\n    rejectPromise,\n} from \"../common/utils\";\n\nimport {GasUtils} from \"./gasutils\";\n\nexport const MAX_APPROVAL_AMOUNT = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n\nexport namespace ERC20 {\n    export interface ApproveArgs {\n        spender: string,\n        amount?: BigNumberish\n    }\n\n    export interface ERC20TokenParams {\n        tokenAddress: string,\n        chainId:      number,\n    }\n\n    class ERC20 {\n        readonly address: string;\n        readonly chainId: number;\n        private readonly provider: Provider;\n        private readonly instance: ERC20Contract;\n\n        constructor(args: ERC20TokenParams) {\n            this.address = args.tokenAddress;\n            this.chainId = args.chainId;\n\n            this.provider = newProviderForNetwork(this.chainId);\n            this.instance = ERC20Factory.connect(this.address, this.provider);\n        }\n\n        approve = async (\n            args:    ApproveArgs,\n            signer:  Signer,\n            dryRun?: boolean\n        ): Promise<boolean|ContractTransaction> => {\n            dryRun = dryRun ?? false;\n\n            return dryRun\n                ? this.instance.callStatic.approve(\n                    args.spender,\n                    args.amount ?? MAX_APPROVAL_AMOUNT,\n                    {from: signer.getAddress()}\n                )\n                : executePopulatedTransaction(this.buildApproveTransaction(args), signer)\n        }\n\n        buildApproveTransaction = async (args: ApproveArgs): Promise<PopulatedTransaction> => {\n            let {spender, amount} = args;\n            amount = amount ?? MAX_APPROVAL_AMOUNT;\n\n            return this.instance.populateTransaction.approve(spender, amount)\n                .then((txn) => GasUtils.populateGasParams(this.chainId, txn, \"approve\"))\n                .catch(rejectPromise)\n        }\n\n        balanceOf = async (\n            address: string\n        ): Promise<BigNumber> => this.instance.balanceOf(address)\n\n        allowanceOf = async (\n            owner: string,\n            spender: string\n        ): Promise<BigNumber> => this.instance.allowance(owner, spender)\n    }\n\n    export const approve = async (\n        approveArgs: ApproveArgs,\n        tokenParams: ERC20TokenParams,\n        signer:      Signer,\n        dryRun?:     boolean,\n    ): Promise<boolean|ContractTransaction> => new ERC20(tokenParams).approve(approveArgs, signer, dryRun)\n\n    export const buildApproveTransaction = async (\n        approveArgs: ApproveArgs,\n        tokenParams: ERC20TokenParams\n    ): Promise<PopulatedTransaction> => new ERC20(tokenParams).buildApproveTransaction(approveArgs)\n\n    export const balanceOf = async (\n        address:     string,\n        tokenParams: ERC20TokenParams\n    ): Promise<BigNumber> => new ERC20(tokenParams).balanceOf(address)\n\n    export const allowanceOf = async (\n        owner:       string,\n        spender:     string,\n        tokenParams: ERC20TokenParams\n    ): Promise<BigNumber> => new ERC20(tokenParams).allowanceOf(owner, spender)\n}", "import {ChainId} from \"../common/chainid\";\nimport {parseUnits} from \"@ethersproject/units\";\nimport {BigNumber} from \"@ethersproject/bignumber\";\nimport {PopulatedTransaction} from \"ethers\";\n\nexport namespace GasUtils {\n    export interface GasParams {\n        maxPriorityFee?:  BigNumber,\n        gasPrice?:        BigNumber,\n        bridgeGasLimit?:  BigNumber,\n        approveGasLimit?: BigNumber,\n    }\n\n    const makeGwei = (n: string): BigNumber => parseUnits(n, \"gwei\")\n\n    const ETH_GAS_PARAMS: GasParams = {\n        maxPriorityFee: makeGwei(\"1.5\"),\n        bridgeGasLimit: BigNumber.from(100000)\n    };\n\n    const BOBA_GAS_PARAMS: GasParams = {\n        gasPrice:        makeGwei(\"10\"),\n        approveGasLimit: BigNumber.from(60000),\n    };\n\n    const ARBITRUM_GAS_PARAMS: GasParams = {\n        gasPrice:       makeGwei(\"2.5\"),\n        bridgeGasLimit: BigNumber.from(1500000),\n    };\n\n    const AVALANCHE_GAS_PARAMS: GasParams = {\n        gasPrice:        makeGwei(\"150\"),\n        bridgeGasLimit:  BigNumber.from(800000),\n        approveGasLimit: BigNumber.from(75000),\n    }\n\n    const AURORA_GAS_PARAMS: GasParams = {\n        gasPrice: makeGwei('0'),\n    }\n\n    export function makeGasParams(chainId: number): GasParams {\n        switch (chainId) {\n            case ChainId.ETH:\n                return ETH_GAS_PARAMS\n            case ChainId.BOBA:\n                return BOBA_GAS_PARAMS\n            case ChainId.ARBITRUM:\n                return ARBITRUM_GAS_PARAMS\n            case ChainId.AVALANCHE:\n                return AVALANCHE_GAS_PARAMS\n            case ChainId.AURORA:\n                return AURORA_GAS_PARAMS\n        }\n\n        return {}\n    }\n\n    export function populateGasParams(chainId: number, txn: PopulatedTransaction|Promise<PopulatedTransaction>, gasLimitKind: string): Promise<PopulatedTransaction> {\n        return Promise.resolve(txn)\n            .then((tx: PopulatedTransaction): PopulatedTransaction => {\n                let {maxPriorityFee, gasPrice, approveGasLimit, bridgeGasLimit} = makeGasParams(chainId);\n\n                if (gasPrice)        tx.gasPrice             = gasPrice;\n                if (maxPriorityFee)  tx.maxPriorityFeePerGas = maxPriorityFee;\n\n                switch (gasLimitKind) {\n                    case \"bridge\":\n                        if (bridgeGasLimit) tx.gasLimit = bridgeGasLimit;\n                        break;\n                    case \"approve\":\n                        if (approveGasLimit) tx.gasLimit = approveGasLimit;\n                        break;\n                }\n\n\n                return tx\n            })\n    }\n}", "import {BigNumber} from \"@ethersproject/bignumber\";\nimport {formatUnits} from \"@ethersproject/units\";\n\nexport namespace Slippages {\n    export type Slippage = string;\n\n    export const\n        One:      Slippage = \"ONE\",\n        OneTenth: Slippage = \"ONE_TENTH\",\n        TwoTenth: Slippage = \"TWO_TENTH\",\n        Quarter:  Slippage = \"QUARTER\";\n\n    export function _applySlippage(\n        inputValue:       BigNumber,\n        slippageSelected: string|Slippage,\n        add?:             boolean\n    ): BigNumber {\n        add = add ?? false;\n\n        let numerator: number, denominator: number;\n        switch (slippageSelected) {\n            case Slippages.OneTenth:\n                denominator = 1000;\n                numerator = denominator + (add ? 1 : -1);\n                break;\n            case Slippages.TwoTenth:\n                denominator = 500;\n                numerator = denominator + (add ? 1 : -1);\n                break;\n            case Slippages.Quarter:\n                denominator = 50;\n                numerator = denominator + (add ? 1 : -1);\n                break;\n            default: // default to 1%\n                denominator = 100;\n                numerator = denominator + (add ? 1 : -1);\n                break;\n        }\n\n        return inputValue.mul(numerator).div(denominator);\n    }\n\n    export function addSlippage(inputValue: BigNumber, slippageSelected: string|Slippage): BigNumber {\n        return _applySlippage(inputValue, slippageSelected, true);\n    }\n\n    export function subtractSlippage(inputValue: BigNumber, slippageSelected: string|Slippage): BigNumber {\n        return _applySlippage(inputValue, slippageSelected, false);\n    }\n\n    export function formatSlippageToString(slippageSelected: string|Slippage): string {\n        switch (slippageSelected) {\n            case Slippages.One:\n                return formatUnits(BigNumber.from(100), 2)\n            case Slippages.OneTenth:\n                return formatUnits(BigNumber.from(100), 3)\n            case Slippages.TwoTenth:\n                return formatUnits(BigNumber.from(200), 3)\n            case Slippages.Quarter:\n                return formatUnits(BigNumber.from(2000), 3)\n            default:\n                return \"N/A\"\n        }\n    }\n}", "import {Tokens} from \"../tokens\";\nimport {Slippages} from \"./slippages\";\nimport {ChainId} from \"../common/chainid\";\n\nimport {GenericZapBridgeContract, L2BridgeZapContract} from \"../contracts\";\n\nimport type {Token} from \"../token\";\n\nimport {BigNumber} from \"@ethersproject/bignumber\";\nimport {Zero} from \"@ethersproject/constants\";\n\n\nexport namespace BridgeUtils {\n    const ETH_CHAINS = [\n        ChainId.OPTIMISM,\n        ChainId.FANTOM,\n        ChainId.BOBA,\n        ChainId.MOONBEAM,\n        ChainId.ARBITRUM,\n        ChainId.AVALANCHE,\n        ChainId.HARMONY,\n    ];\n\n    export const isL2ETHChain = (chainId: number): boolean => ETH_CHAINS.includes(chainId);\n\n    interface DepositIfChainArgs {\n        chainId:     number,\n        tokens:      Token[],\n        depositEth:  boolean,\n        altChainId?: number,\n    }\n\n    export const DepositIfChainTokens: DepositIfChainArgs[] = [\n        {chainId: ChainId.FANTOM,    tokens: [Tokens.JUMP],  depositEth: false},\n        {chainId: ChainId.POLYGON,   tokens: [Tokens.NFD],   depositEth: false},\n        {chainId: ChainId.MOONRIVER, tokens: [Tokens.SOLAR], depositEth: false},\n        {chainId: ChainId.AVALANCHE, tokens: [Tokens.AVAX, Tokens.WAVAX], altChainId: ChainId.MOONBEAM, depositEth: true},\n        {chainId: ChainId.MOONRIVER, tokens: [Tokens.MOVR, Tokens.WMOVR], altChainId: ChainId.MOONBEAM, depositEth: true},\n    ]\n\n    interface BridgeTxArgs {\n        slippageCustom:            string,\n        slippageSelected:          string,\n        infiniteApproval:          boolean,\n        transactionDeadline:       number,\n        bridgeTransactionDeadline: number,\n    }\n\n    export const getBridgeTxArgs = (): BridgeTxArgs => ({\n        slippageCustom:   null,\n        slippageSelected: Slippages.OneTenth,\n        infiniteApproval: true,\n        transactionDeadline: getTimeMinutesFromNow(10),\n        bridgeTransactionDeadline: getTimeMinutesFromNow(60*24)\n    })\n\n    interface BridgeSlippages {\n        slippageSelected: string,\n        transactionDeadline: number,\n        bridgeTransactionDeadline: number,\n        minToSwapOrigin: BigNumber,\n        minToSwapDest: BigNumber,\n        minToSwapDestFromOrigin: BigNumber,\n        minToSwapOriginMediumSlippage: BigNumber,\n        minToSwapDestMediumSlippage: BigNumber,\n        minToSwapDestFromOriginMediumSlippage: BigNumber,\n        minToSwapOriginHighSlippage: BigNumber,\n        minToSwapDestHighSlippage: BigNumber,\n        minToSwapDestFromOriginHighSlippage: BigNumber,\n    }\n\n    export function getSlippages(amountFrom: BigNumber, amountTo: BigNumber): BridgeSlippages {\n        const {\n            slippageSelected,\n            transactionDeadline,\n            bridgeTransactionDeadline\n        } = getBridgeTxArgs();\n\n        const\n            selectedGasArgs = slippageSelected,\n            twoTenthGasArgs = Slippages.TwoTenth,\n            quarterGasArgs  = Slippages.Quarter;\n\n        const\n            minToSwapOrigin         = Slippages.subtractSlippage(amountFrom, selectedGasArgs),\n            minToSwapDest           = Slippages.subtractSlippage(amountTo, selectedGasArgs),\n            minToSwapDestFromOrigin = Slippages.subtractSlippage(minToSwapDest, selectedGasArgs);\n\n        const\n            minToSwapOriginMediumSlippage         = Slippages.subtractSlippage(amountFrom, twoTenthGasArgs),\n            minToSwapDestMediumSlippage           = Slippages.subtractSlippage(amountTo, twoTenthGasArgs),\n            minToSwapDestFromOriginMediumSlippage = Slippages.subtractSlippage(minToSwapDestMediumSlippage, twoTenthGasArgs);\n\n        const\n            minToSwapOriginHighSlippage         = Slippages.subtractSlippage(amountFrom, quarterGasArgs),\n            minToSwapDestHighSlippage           = Slippages.subtractSlippage(amountTo, quarterGasArgs),\n            minToSwapDestFromOriginHighSlippage = Slippages.subtractSlippage(minToSwapDestHighSlippage, quarterGasArgs);\n\n        return {\n            slippageSelected,\n            transactionDeadline,\n            bridgeTransactionDeadline,\n            minToSwapOrigin,\n            minToSwapDest,\n            minToSwapDestFromOrigin,\n            minToSwapOriginMediumSlippage,\n            minToSwapDestMediumSlippage,\n            minToSwapDestFromOriginMediumSlippage,\n            minToSwapOriginHighSlippage,\n            minToSwapDestHighSlippage,\n            minToSwapDestFromOriginHighSlippage,\n        }\n    }\n\n    export const subBigNumSafe = (a: BigNumber, b: BigNumber): BigNumber => a.gt(b) ? a.sub(b) : Zero\n\n    export const getTimeMinutesFromNow = (minutesFromNow: number): number =>\n        Math.round((new Date().getTime() / 1000) + 60 * minutesFromNow)\n\n    export interface BridgeTxParams {\n        addressTo: string,\n        chainIdTo: number,\n        amountFrom: BigNumber,\n    }\n\n    export const makeEasyParams = (\n        args: BridgeTxParams,\n        chainId: number,\n        t: Token\n    ): [string, number, string, BigNumber] => [args.addressTo, args.chainIdTo, t.address(chainId), args.amountFrom]\n\n    export const makeEasySubParams = (\n        args: BridgeTxParams,\n        chainId: number,\n        t: Token\n    ): [string, number, string] => {\n        let x = makeEasyParams(args, chainId, t);\n        return [x[0], x[1], x[2]]\n    }\n\n    export const depositETHParams = (args: BridgeTxParams): [string, number, BigNumber] => [args.addressTo, args.chainIdTo, args.amountFrom];\n\n    export async function calculateSwapL2Zap(\n        zapBridge: GenericZapBridgeContract,\n        intermediateToken: string,\n        tokenIndexFrom: number,\n        tokenIndexTo: number,\n        amount: BigNumber\n    ): Promise<BigNumber> {\n        return (zapBridge as L2BridgeZapContract).calculateSwap(\n            intermediateToken,\n            tokenIndexFrom,\n            tokenIndexTo,\n            amount\n        )\n    }\n\n    export const isETHLikeToken = (t: Token): boolean =>\n        t.isEqual(Tokens.WETH_E) || t.isEqual(Tokens.ONE_ETH) || t.isEqual(Tokens.FTM_ETH)\n\n    export const makeOverrides = (value: BigNumber, withValue: boolean): any => {\n        let overrides: any = {}\n        if (withValue) {\n            overrides = {value}\n        }\n\n        return overrides\n    }\n}"],
  "mappings": "6qBAAA,qgBCIA,OAAwC,kBAIlC,GAAO,CACX,CACE,OAAQ,GACR,gBAAiB,aACjB,KAAM,eAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,oBACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,YAGV,KAAM,mBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,cACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,cACN,KAAM,SAER,CACE,OAAQ,GACR,KAAM,qBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,qBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,mBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,iBACN,QAAS,CACP,CACE,aAAc,WACd,KAAM,SACN,KAAM,aAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,YAGV,KAAM,eACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,YAGV,KAAM,gBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,YAGV,KAAM,qBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,SACd,KAAM,UACN,KAAM,UAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,WACN,QAAS,CACP,CACE,WAAY,CACV,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,gBACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,aACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,aACN,KAAM,WAER,CACE,aAAc,OACd,KAAM,gBACN,KAAM,QAER,CACE,aAAc,OACd,KAAM,eACN,KAAM,SAGV,aAAc,4BACd,KAAM,QACN,KAAM,UAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,WACN,QAAS,CACP,CACE,WAAY,CACV,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,gBACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,aACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,aACN,KAAM,WAER,CACE,aAAc,OACd,KAAM,gBACN,KAAM,QAER,CACE,aAAc,OACd,KAAM,eACN,KAAM,SAGV,aAAc,4BACd,KAAM,QACN,KAAM,UAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,aACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,WAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,SACd,KAAM,UACN,KAAM,WAGV,KAAM,qBACN,QAAS,CACP,CACE,WAAY,CACV,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,gBACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,aACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,aACN,KAAM,WAER,CACE,aAAc,OACd,KAAM,gBACN,KAAM,QAER,CACE,aAAc,OACd,KAAM,eACN,KAAM,SAGV,aAAc,4BACd,KAAM,QACN,KAAM,UAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,YACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,UACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,SAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,SACd,KAAM,UACN,KAAM,WAGV,KAAM,qBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,SAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,SACd,KAAM,UACN,KAAM,WAGV,KAAM,iBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,SAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,eACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,aACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,SACd,KAAM,UACN,KAAM,UAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,gBACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,aACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,aACN,KAAM,WAER,CACE,aAAc,OACd,KAAM,gBACN,KAAM,QAER,CACE,aAAc,OACd,KAAM,eACN,KAAM,SAGV,KAAM,iBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,SAGV,gBAAiB,aACjB,KAAM,aAIH,QAA4B,OAE1B,kBAAyC,CAC9C,MAAO,IAAI,UAAM,UAAU,UAEtB,SACL,EACA,EACc,CACd,MAAO,IAAI,aAAS,EAAS,GAAM,KARrB,EADX,GACW,MAAM,IC1oBxB,OAAwC,kBAIlC,GAAO,CACX,CACE,SAAU,GACV,OAAQ,GACR,KAAM,OACN,QAAS,CACP,CACE,KAAM,GACN,KAAM,WAGV,QAAS,GACT,gBAAiB,OACjB,KAAM,YAER,CACE,SAAU,GACV,OAAQ,CACN,CACE,KAAM,WACN,KAAM,WAER,CACE,KAAM,SACN,KAAM,YAGV,KAAM,UACN,QAAS,CACP,CACE,KAAM,GACN,KAAM,SAGV,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,SAAU,GACV,OAAQ,GACR,KAAM,cACN,QAAS,CACP,CACE,KAAM,GACN,KAAM,YAGV,QAAS,GACT,gBAAiB,OACjB,KAAM,YAER,CACE,SAAU,GACV,OAAQ,CACN,CACE,KAAM,QACN,KAAM,WAER,CACE,KAAM,MACN,KAAM,WAER,CACE,KAAM,SACN,KAAM,YAGV,KAAM,eACN,QAAS,CACP,CACE,KAAM,GACN,KAAM,SAGV,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,SAAU,GACV,OAAQ,GACR,KAAM,WACN,QAAS,CACP,CACE,KAAM,GACN,KAAM,UAGV,QAAS,GACT,gBAAiB,OACjB,KAAM,YAER,CACE,SAAU,GACV,OAAQ,CACN,CACE,KAAM,SACN,KAAM,YAGV,KAAM,YACN,QAAS,CACP,CACE,KAAM,UACN,KAAM,YAGV,QAAS,GACT,gBAAiB,OACjB,KAAM,YAER,CACE,SAAU,GACV,OAAQ,GACR,KAAM,SACN,QAAS,CACP,CACE,KAAM,GACN,KAAM,WAGV,QAAS,GACT,gBAAiB,OACjB,KAAM,YAER,CACE,SAAU,GACV,OAAQ,CACN,CACE,KAAM,MACN,KAAM,WAER,CACE,KAAM,SACN,KAAM,YAGV,KAAM,WACN,QAAS,CACP,CACE,KAAM,GACN,KAAM,SAGV,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,SAAU,GACV,OAAQ,CACN,CACE,KAAM,SACN,KAAM,WAER,CACE,KAAM,WACN,KAAM,YAGV,KAAM,YACN,QAAS,CACP,CACE,KAAM,GACN,KAAM,YAGV,QAAS,GACT,gBAAiB,OACjB,KAAM,YAER,CACE,QAAS,GACT,gBAAiB,UACjB,KAAM,YAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,KAAM,QACN,KAAM,YAGV,KAAM,WACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,KAAM,OACN,KAAM,WAER,CACE,QAAS,GACT,KAAM,KACN,KAAM,WAER,CACE,QAAS,GACT,KAAM,QACN,KAAM,YAGV,KAAM,WACN,KAAM,UAIH,QAAqB,OAEnB,kBAAkC,CACvC,MAAO,IAAI,UAAM,UAAU,UAEtB,SAAQ,EAAiB,EAA4C,CAC1E,MAAO,IAAI,aAAS,EAAS,GAAM,KALrB,EADX,GACW,MAAM,ICpOxB,OAAwC,kBAIlC,GAAO,CACX,CACE,OAAQ,CACN,CACE,aAAc,kBACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,iBACd,KAAM,YACN,KAAM,WAER,CACE,aAAc,0BACd,KAAM,iBACN,KAAM,YAGV,gBAAiB,aACjB,KAAM,eAER,CACE,OAAQ,GACR,KAAM,eACN,QAAS,CACP,CACE,aAAc,kBACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,KAAM,aACN,QAAS,CACP,CACE,aAAc,kBACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,cACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,aACN,KAAM,UAGV,KAAM,mCACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,uBACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,YACd,KAAM,UACN,KAAM,aAER,CACE,aAAc,OACd,KAAM,UACN,KAAM,SAGV,KAAM,uBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,UACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,iBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,aACN,QAAS,GACT,gBAAiB,UACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,oBACN,QAAS,GACT,gBAAiB,UACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,SACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,YACd,KAAM,mBACN,KAAM,aAER,CACE,aAAc,UACd,KAAM,YACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,gBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,YACd,KAAM,mBACN,KAAM,aAER,CACE,aAAc,UACd,KAAM,YACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,cACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,eACN,KAAM,YAGV,KAAM,uBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,aAIH,OAA2B,OAEzB,kBAAwC,CAC7C,MAAO,IAAI,UAAM,UAAU,UAEtB,SACL,EACA,EACa,CACb,MAAO,IAAI,aAAS,EAAS,GAAM,KARrB,EADX,EACW,MAAM,ICvXxB,OAAwC,kBAIlC,GAAO,CACX,CACE,OAAQ,CACN,CACE,aAAc,kBACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,WAER,CACE,aAAc,0BACd,KAAM,iBACN,KAAM,YAGV,gBAAiB,aACjB,KAAM,eAER,CACE,OAAQ,GACR,KAAM,eACN,QAAS,CACP,CACE,aAAc,kBACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,KACN,KAAM,YAGV,KAAM,gBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,UACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,aACN,QAAS,GACT,gBAAiB,UACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,SACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,gBACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,cACN,KAAM,YAGV,KAAM,kBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,gBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,gBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,gBACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,cACN,KAAM,YAGV,KAAM,yBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,qBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,mBACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,YACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,eACN,KAAM,YAGV,KAAM,uBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,mBACN,QAAS,GACT,gBAAiB,UACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,qBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,mBACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,YACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,eACN,KAAM,YAGV,KAAM,0BACN,QAAS,GACT,gBAAiB,UACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,KAAM,UACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,GACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,KAAM,gBACN,QAAS,CACP,CACE,aAAc,kBACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,aAIH,QAA2B,OAEzB,kBAAwC,CAC7C,MAAO,IAAI,UAAM,UAAU,UAEtB,SACL,EACA,EACa,CACb,MAAO,IAAI,aAAS,EAAS,GAAM,KARrB,EADX,GACW,MAAM,ICvlBxB,OAAwC,kBAIlC,GAAO,CACX,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,SACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,oBACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,YAGV,KAAM,mBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,cACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,cACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,eACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,QAAS,GACT,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,sBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,0BACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,MACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,YAGV,KAAM,YACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,0BACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,MACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,QAAS,GACT,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,OACd,KAAM,cACN,KAAM,QAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,YAGV,KAAM,mBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,cACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,YAGV,KAAM,uBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,QAAS,GACT,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,qBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,MACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,YAGV,KAAM,gBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,MACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,WAER,CACE,QAAS,GACT,aAAc,OACd,KAAM,cACN,KAAM,QAER,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,YAGV,KAAM,yBACN,KAAM,SAER,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,WACN,KAAM,SAER,CACE,OAAQ,GACR,KAAM,qBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,kBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,iBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,eACN,QAAS,CACP,CACE,aAAc,kBACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,YACd,KAAM,SACN,KAAM,cAGV,KAAM,YACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,gBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,iBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,UACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,kBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,iBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,eACN,KAAM,YAGV,KAAM,gBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,YAGV,KAAM,eACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,YAGV,KAAM,gBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,YAGV,KAAM,qBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,YAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,YACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,UACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,SAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,aACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,QACN,KAAM,YAGV,KAAM,cACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,SAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,kBACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,0BACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,MACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,YAGV,KAAM,OACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,kBACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,0BACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,MACN,KAAM,WAER,CACE,aAAc,iBACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,YAGV,KAAM,cACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,QACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,SACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,SAGV,gBAAiB,OACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,yBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,SACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,yBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,gBACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,eACN,KAAM,YAGV,KAAM,kBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,WAER,CACE,aAAc,yBACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,SACN,KAAM,WAER,CACE,aAAc,QACd,KAAM,iBACN,KAAM,SAER,CACE,aAAc,QACd,KAAM,eACN,KAAM,SAER,CACE,aAAc,UACd,KAAM,QACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,WACN,KAAM,YAGV,KAAM,gBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,eACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,WAER,CACE,aAAc,UACd,KAAM,UACN,KAAM,YAGV,KAAM,aACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,SACN,KAAM,YAGV,KAAM,oBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,CACN,CACE,aAAc,kBACd,KAAM,eACN,KAAM,YAGV,KAAM,iBACN,QAAS,GACT,gBAAiB,aACjB,KAAM,YAER,CACE,OAAQ,GACR,KAAM,mBACN,QAAS,CACP,CACE,aAAc,UACd,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",
  "names": []
}
